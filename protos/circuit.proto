//!
//! # vlsir Circuit Schema
//!

syntax = "proto3";
package vlsir.circuit;
import "utils.proto";

// # Package
// A Collection of Modules and ExternalModules
message Package {
  // Domain Name
  string domain = 1;
  // `Module` Definitions
  repeated Module modules = 2;
  // `ExternalModule` interfaces used by `modules`, and available externally
  repeated ExternalModule ext_modules = 3;
  // Description
  string desc = 10;
}

// # Port
// An externally-visible `Signal` with a `Direction`.
message Port {
  enum Direction {
    INPUT = 0;
    OUTPUT = 1;
    INOUT = 2;
    NONE = 3;
  }
  Signal signal = 1;
  Direction direction = 2;
}

// # Signal
// A named connection element, potentially with non-unit `width`.
message Signal {
  // Signal Name
  string name = 1;
  // Bus Width
  int64 width = 2;
}

// # Signal Slice
// Reference to a subset of bits of `signal`.
// Indices `top` and `bot` are both inclusive, similar to popular HDLs.
message Slice {
  // Parent Signal Name
  string signal = 1;
  // Top Index
  int64 top = 2;
  // Bottom Index
  int64 bot = 3;
}

// Signal Concatenation
// FIXME: documentation of ordering, MSB-LSB
message Concat {
  repeated Connection parts = 1;
}

// # Connection Union
// Enumerates all types that can be
// (a) Connected to Ports, and
// (b) Concatenated
message Connection {
  oneof stype {
    // FIXME: `sig` can become just string-valued reference to signal-name
    Signal sig = 1;
    Slice slice = 2;
    Concat concat = 3;
  }
}
// Module Instance
message Instance {
  // Instance Name
  string name = 1;
  // vlsir.utils.Reference to Module instantiated
  vlsir.utils.Reference module = 2;
  // Param Values
  map<string, vlsir.utils.ParamValue> parameters = 3;
  // Map internal to external signals by name.
  map<string, Connection> connections = 4;
}

// Module - the primary unit of hardware re-use
message Module {
  // Module Name
  string name = 1;
  // Port Definitions
  repeated Port ports = 2;
  // Internal Signals
  repeated Signal signals = 3;
  // Module Instances
  repeated Instance instances = 4;
  // Parameters
  repeated vlsir.utils.Param parameters = 5;
}

// # Externally Defined Module
// Primarily for sake of port-ordering, for translation with connect-by-position
// formats.
message ExternalModule {
  // Qualified External Module Name
  vlsir.utils.QualifiedName name = 1;
  // Description
  string desc = 2;
  // Port Definitions
  repeated Port ports = 3;
  // Params
  repeated vlsir.utils.Param parameters = 5;
}

// # Interface
// Defines the logical IO of a `Module`
message Interface {
  // Cell Name
  string name = 1;
  // Port List
  repeated Port ports = 10;
}
