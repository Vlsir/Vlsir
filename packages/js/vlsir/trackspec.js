// source: tetris.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.vlsir.tetris.TrackSpec');
goog.provide('proto.vlsir.tetris.TrackSpec.Repeat');
goog.provide('proto.vlsir.tetris.TrackSpec.SpecCase');
goog.provide('proto.vlsir.tetris.TrackSpec.TrackEntry');
goog.provide('proto.vlsir.tetris.TrackSpec.TrackEntry.TrackType');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vlsir.tetris.TrackSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.vlsir.tetris.TrackSpec.oneofGroups_);
};
goog.inherits(proto.vlsir.tetris.TrackSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vlsir.tetris.TrackSpec.displayName = 'proto.vlsir.tetris.TrackSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vlsir.tetris.TrackSpec.TrackEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vlsir.tetris.TrackSpec.TrackEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vlsir.tetris.TrackSpec.TrackEntry.displayName = 'proto.vlsir.tetris.TrackSpec.TrackEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vlsir.tetris.TrackSpec.Repeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vlsir.tetris.TrackSpec.Repeat.repeatedFields_, null);
};
goog.inherits(proto.vlsir.tetris.TrackSpec.Repeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vlsir.tetris.TrackSpec.Repeat.displayName = 'proto.vlsir.tetris.TrackSpec.Repeat';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vlsir.tetris.TrackSpec.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.vlsir.tetris.TrackSpec.SpecCase = {
  SPEC_NOT_SET: 0,
  ENTRY: 1,
  REPEAT: 2
};

/**
 * @return {proto.vlsir.tetris.TrackSpec.SpecCase}
 */
proto.vlsir.tetris.TrackSpec.prototype.getSpecCase = function() {
  return /** @type {proto.vlsir.tetris.TrackSpec.SpecCase} */(jspb.Message.computeOneofCase(this, proto.vlsir.tetris.TrackSpec.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vlsir.tetris.TrackSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.vlsir.tetris.TrackSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vlsir.tetris.TrackSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vlsir.tetris.TrackSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    entry: (f = msg.getEntry()) && proto.vlsir.tetris.TrackSpec.TrackEntry.toObject(includeInstance, f),
    repeat: (f = msg.getRepeat()) && proto.vlsir.tetris.TrackSpec.Repeat.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vlsir.tetris.TrackSpec}
 */
proto.vlsir.tetris.TrackSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vlsir.tetris.TrackSpec;
  return proto.vlsir.tetris.TrackSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vlsir.tetris.TrackSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vlsir.tetris.TrackSpec}
 */
proto.vlsir.tetris.TrackSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vlsir.tetris.TrackSpec.TrackEntry;
      reader.readMessage(value,proto.vlsir.tetris.TrackSpec.TrackEntry.deserializeBinaryFromReader);
      msg.setEntry(value);
      break;
    case 2:
      var value = new proto.vlsir.tetris.TrackSpec.Repeat;
      reader.readMessage(value,proto.vlsir.tetris.TrackSpec.Repeat.deserializeBinaryFromReader);
      msg.setRepeat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vlsir.tetris.TrackSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vlsir.tetris.TrackSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vlsir.tetris.TrackSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vlsir.tetris.TrackSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntry();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vlsir.tetris.TrackSpec.TrackEntry.serializeBinaryToWriter
    );
  }
  f = message.getRepeat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vlsir.tetris.TrackSpec.Repeat.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vlsir.tetris.TrackSpec.TrackEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.vlsir.tetris.TrackSpec.TrackEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vlsir.tetris.TrackSpec.TrackEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vlsir.tetris.TrackSpec.TrackEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    ttype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    width: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vlsir.tetris.TrackSpec.TrackEntry}
 */
proto.vlsir.tetris.TrackSpec.TrackEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vlsir.tetris.TrackSpec.TrackEntry;
  return proto.vlsir.tetris.TrackSpec.TrackEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vlsir.tetris.TrackSpec.TrackEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vlsir.tetris.TrackSpec.TrackEntry}
 */
proto.vlsir.tetris.TrackSpec.TrackEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.vlsir.tetris.TrackSpec.TrackEntry.TrackType} */ (reader.readEnum());
      msg.setTtype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWidth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vlsir.tetris.TrackSpec.TrackEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vlsir.tetris.TrackSpec.TrackEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vlsir.tetris.TrackSpec.TrackEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vlsir.tetris.TrackSpec.TrackEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.vlsir.tetris.TrackSpec.TrackEntry.TrackType = {
  GAP: 0,
  SIGNAL: 1,
  RAIL: 2
};

/**
 * optional TrackType ttype = 1;
 * @return {!proto.vlsir.tetris.TrackSpec.TrackEntry.TrackType}
 */
proto.vlsir.tetris.TrackSpec.TrackEntry.prototype.getTtype = function() {
  return /** @type {!proto.vlsir.tetris.TrackSpec.TrackEntry.TrackType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.vlsir.tetris.TrackSpec.TrackEntry.TrackType} value
 * @return {!proto.vlsir.tetris.TrackSpec.TrackEntry} returns this
 */
proto.vlsir.tetris.TrackSpec.TrackEntry.prototype.setTtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 width = 2;
 * @return {number}
 */
proto.vlsir.tetris.TrackSpec.TrackEntry.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.vlsir.tetris.TrackSpec.TrackEntry} returns this
 */
proto.vlsir.tetris.TrackSpec.TrackEntry.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vlsir.tetris.TrackSpec.Repeat.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vlsir.tetris.TrackSpec.Repeat.prototype.toObject = function(opt_includeInstance) {
  return proto.vlsir.tetris.TrackSpec.Repeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vlsir.tetris.TrackSpec.Repeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vlsir.tetris.TrackSpec.Repeat.toObject = function(includeInstance, msg) {
  var f, obj = {
    entriesList: jspb.Message.toObjectList(msg.getEntriesList(),
    proto.vlsir.tetris.TrackSpec.TrackEntry.toObject, includeInstance),
    nrep: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vlsir.tetris.TrackSpec.Repeat}
 */
proto.vlsir.tetris.TrackSpec.Repeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vlsir.tetris.TrackSpec.Repeat;
  return proto.vlsir.tetris.TrackSpec.Repeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vlsir.tetris.TrackSpec.Repeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vlsir.tetris.TrackSpec.Repeat}
 */
proto.vlsir.tetris.TrackSpec.Repeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vlsir.tetris.TrackSpec.TrackEntry;
      reader.readMessage(value,proto.vlsir.tetris.TrackSpec.TrackEntry.deserializeBinaryFromReader);
      msg.addEntries(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNrep(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vlsir.tetris.TrackSpec.Repeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vlsir.tetris.TrackSpec.Repeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vlsir.tetris.TrackSpec.Repeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vlsir.tetris.TrackSpec.Repeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.vlsir.tetris.TrackSpec.TrackEntry.serializeBinaryToWriter
    );
  }
  f = message.getNrep();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * repeated TrackEntry entries = 1;
 * @return {!Array<!proto.vlsir.tetris.TrackSpec.TrackEntry>}
 */
proto.vlsir.tetris.TrackSpec.Repeat.prototype.getEntriesList = function() {
  return /** @type{!Array<!proto.vlsir.tetris.TrackSpec.TrackEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vlsir.tetris.TrackSpec.TrackEntry, 1));
};


/**
 * @param {!Array<!proto.vlsir.tetris.TrackSpec.TrackEntry>} value
 * @return {!proto.vlsir.tetris.TrackSpec.Repeat} returns this
*/
proto.vlsir.tetris.TrackSpec.Repeat.prototype.setEntriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vlsir.tetris.TrackSpec.TrackEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vlsir.tetris.TrackSpec.TrackEntry}
 */
proto.vlsir.tetris.TrackSpec.Repeat.prototype.addEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vlsir.tetris.TrackSpec.TrackEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vlsir.tetris.TrackSpec.Repeat} returns this
 */
proto.vlsir.tetris.TrackSpec.Repeat.prototype.clearEntriesList = function() {
  return this.setEntriesList([]);
};


/**
 * optional int64 nrep = 2;
 * @return {number}
 */
proto.vlsir.tetris.TrackSpec.Repeat.prototype.getNrep = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.vlsir.tetris.TrackSpec.Repeat} returns this
 */
proto.vlsir.tetris.TrackSpec.Repeat.prototype.setNrep = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional TrackEntry entry = 1;
 * @return {?proto.vlsir.tetris.TrackSpec.TrackEntry}
 */
proto.vlsir.tetris.TrackSpec.prototype.getEntry = function() {
  return /** @type{?proto.vlsir.tetris.TrackSpec.TrackEntry} */ (
    jspb.Message.getWrapperField(this, proto.vlsir.tetris.TrackSpec.TrackEntry, 1));
};


/**
 * @param {?proto.vlsir.tetris.TrackSpec.TrackEntry|undefined} value
 * @return {!proto.vlsir.tetris.TrackSpec} returns this
*/
proto.vlsir.tetris.TrackSpec.prototype.setEntry = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.vlsir.tetris.TrackSpec.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vlsir.tetris.TrackSpec} returns this
 */
proto.vlsir.tetris.TrackSpec.prototype.clearEntry = function() {
  return this.setEntry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vlsir.tetris.TrackSpec.prototype.hasEntry = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Repeat repeat = 2;
 * @return {?proto.vlsir.tetris.TrackSpec.Repeat}
 */
proto.vlsir.tetris.TrackSpec.prototype.getRepeat = function() {
  return /** @type{?proto.vlsir.tetris.TrackSpec.Repeat} */ (
    jspb.Message.getWrapperField(this, proto.vlsir.tetris.TrackSpec.Repeat, 2));
};


/**
 * @param {?proto.vlsir.tetris.TrackSpec.Repeat|undefined} value
 * @return {!proto.vlsir.tetris.TrackSpec} returns this
*/
proto.vlsir.tetris.TrackSpec.prototype.setRepeat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.vlsir.tetris.TrackSpec.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vlsir.tetris.TrackSpec} returns this
 */
proto.vlsir.tetris.TrackSpec.prototype.clearRepeat = function() {
  return this.setRepeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vlsir.tetris.TrackSpec.prototype.hasRepeat = function() {
  return jspb.Message.getField(this, 2) != null;
};


