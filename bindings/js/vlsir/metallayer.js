// source: tetris.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.vlsir.tetris.MetalLayer');
goog.provide('proto.vlsir.tetris.MetalLayer.Dir');
goog.provide('proto.vlsir.tetris.MetalLayer.PrimitiveMode');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.vlsir.raw.Layer');
goog.require('proto.vlsir.tetris.TrackSpec');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vlsir.tetris.MetalLayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vlsir.tetris.MetalLayer.repeatedFields_, null);
};
goog.inherits(proto.vlsir.tetris.MetalLayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vlsir.tetris.MetalLayer.displayName = 'proto.vlsir.tetris.MetalLayer';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vlsir.tetris.MetalLayer.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vlsir.tetris.MetalLayer.prototype.toObject = function(opt_includeInstance) {
  return proto.vlsir.tetris.MetalLayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vlsir.tetris.MetalLayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vlsir.tetris.MetalLayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dir: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cutsize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    entriesList: jspb.Message.toObjectList(msg.getEntriesList(),
    proto.vlsir.tetris.TrackSpec.toObject, includeInstance),
    offset: jspb.Message.getFieldWithDefault(msg, 5, 0),
    overlap: jspb.Message.getFieldWithDefault(msg, 6, 0),
    flip: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    prim: jspb.Message.getFieldWithDefault(msg, 8, 0),
    raw: (f = msg.getRaw()) && proto.vlsir.raw.Layer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vlsir.tetris.MetalLayer}
 */
proto.vlsir.tetris.MetalLayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vlsir.tetris.MetalLayer;
  return proto.vlsir.tetris.MetalLayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vlsir.tetris.MetalLayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vlsir.tetris.MetalLayer}
 */
proto.vlsir.tetris.MetalLayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.vlsir.tetris.MetalLayer.Dir} */ (reader.readEnum());
      msg.setDir(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCutsize(value);
      break;
    case 4:
      var value = new proto.vlsir.tetris.TrackSpec;
      reader.readMessage(value,proto.vlsir.tetris.TrackSpec.deserializeBinaryFromReader);
      msg.addEntries(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffset(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOverlap(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFlip(value);
      break;
    case 8:
      var value = /** @type {!proto.vlsir.tetris.MetalLayer.PrimitiveMode} */ (reader.readEnum());
      msg.setPrim(value);
      break;
    case 11:
      var value = new proto.vlsir.raw.Layer;
      reader.readMessage(value,proto.vlsir.raw.Layer.deserializeBinaryFromReader);
      msg.setRaw(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vlsir.tetris.MetalLayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vlsir.tetris.MetalLayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vlsir.tetris.MetalLayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vlsir.tetris.MetalLayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDir();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCutsize();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.vlsir.tetris.TrackSpec.serializeBinaryToWriter
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getOverlap();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getFlip();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getPrim();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getRaw();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.vlsir.raw.Layer.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.vlsir.tetris.MetalLayer.Dir = {
  HORIZ: 0,
  VERT: 1
};

/**
 * @enum {number}
 */
proto.vlsir.tetris.MetalLayer.PrimitiveMode = {
  PRIM: 0,
  SPLIT: 1,
  STACK: 2
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.vlsir.tetris.MetalLayer.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vlsir.tetris.MetalLayer} returns this
 */
proto.vlsir.tetris.MetalLayer.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Dir dir = 2;
 * @return {!proto.vlsir.tetris.MetalLayer.Dir}
 */
proto.vlsir.tetris.MetalLayer.prototype.getDir = function() {
  return /** @type {!proto.vlsir.tetris.MetalLayer.Dir} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.vlsir.tetris.MetalLayer.Dir} value
 * @return {!proto.vlsir.tetris.MetalLayer} returns this
 */
proto.vlsir.tetris.MetalLayer.prototype.setDir = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int64 cutsize = 3;
 * @return {number}
 */
proto.vlsir.tetris.MetalLayer.prototype.getCutsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.vlsir.tetris.MetalLayer} returns this
 */
proto.vlsir.tetris.MetalLayer.prototype.setCutsize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated TrackSpec entries = 4;
 * @return {!Array<!proto.vlsir.tetris.TrackSpec>}
 */
proto.vlsir.tetris.MetalLayer.prototype.getEntriesList = function() {
  return /** @type{!Array<!proto.vlsir.tetris.TrackSpec>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vlsir.tetris.TrackSpec, 4));
};


/**
 * @param {!Array<!proto.vlsir.tetris.TrackSpec>} value
 * @return {!proto.vlsir.tetris.MetalLayer} returns this
*/
proto.vlsir.tetris.MetalLayer.prototype.setEntriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.vlsir.tetris.TrackSpec=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vlsir.tetris.TrackSpec}
 */
proto.vlsir.tetris.MetalLayer.prototype.addEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.vlsir.tetris.TrackSpec, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vlsir.tetris.MetalLayer} returns this
 */
proto.vlsir.tetris.MetalLayer.prototype.clearEntriesList = function() {
  return this.setEntriesList([]);
};


/**
 * optional int64 offset = 5;
 * @return {number}
 */
proto.vlsir.tetris.MetalLayer.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.vlsir.tetris.MetalLayer} returns this
 */
proto.vlsir.tetris.MetalLayer.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 overlap = 6;
 * @return {number}
 */
proto.vlsir.tetris.MetalLayer.prototype.getOverlap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.vlsir.tetris.MetalLayer} returns this
 */
proto.vlsir.tetris.MetalLayer.prototype.setOverlap = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool flip = 7;
 * @return {boolean}
 */
proto.vlsir.tetris.MetalLayer.prototype.getFlip = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.vlsir.tetris.MetalLayer} returns this
 */
proto.vlsir.tetris.MetalLayer.prototype.setFlip = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional PrimitiveMode prim = 8;
 * @return {!proto.vlsir.tetris.MetalLayer.PrimitiveMode}
 */
proto.vlsir.tetris.MetalLayer.prototype.getPrim = function() {
  return /** @type {!proto.vlsir.tetris.MetalLayer.PrimitiveMode} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.vlsir.tetris.MetalLayer.PrimitiveMode} value
 * @return {!proto.vlsir.tetris.MetalLayer} returns this
 */
proto.vlsir.tetris.MetalLayer.prototype.setPrim = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional vlsir.raw.Layer raw = 11;
 * @return {?proto.vlsir.raw.Layer}
 */
proto.vlsir.tetris.MetalLayer.prototype.getRaw = function() {
  return /** @type{?proto.vlsir.raw.Layer} */ (
    jspb.Message.getWrapperField(this, proto.vlsir.raw.Layer, 11));
};


/**
 * @param {?proto.vlsir.raw.Layer|undefined} value
 * @return {!proto.vlsir.tetris.MetalLayer} returns this
*/
proto.vlsir.tetris.MetalLayer.prototype.setRaw = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vlsir.tetris.MetalLayer} returns this
 */
proto.vlsir.tetris.MetalLayer.prototype.clearRaw = function() {
  return this.setRaw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vlsir.tetris.MetalLayer.prototype.hasRaw = function() {
  return jspb.Message.getField(this, 11) != null;
};


