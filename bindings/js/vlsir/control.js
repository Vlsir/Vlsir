/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.vlsir.spice.Control');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.vlsir.spice.Include');
goog.require('proto.vlsir.spice.LibInclude');
goog.require('proto.vlsir.spice.Meas');
goog.require('proto.vlsir.spice.Save');
goog.require('proto.vlsir.utils.Param');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vlsir.spice.Control = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.vlsir.spice.Control.oneofGroups_);
};
goog.inherits(proto.vlsir.spice.Control, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vlsir.spice.Control.displayName = 'proto.vlsir.spice.Control';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vlsir.spice.Control.oneofGroups_ = [[1,2,5,6,7,10]];

/**
 * @enum {number}
 */
proto.vlsir.spice.Control.CtrlCase = {
  CTRL_NOT_SET: 0,
  INCLUDE: 1,
  LIB: 2,
  SAVE: 5,
  MEAS: 6,
  PARAM: 7,
  LITERAL: 10
};

/**
 * @return {proto.vlsir.spice.Control.CtrlCase}
 */
proto.vlsir.spice.Control.prototype.getCtrlCase = function() {
  return /** @type {proto.vlsir.spice.Control.CtrlCase} */(jspb.Message.computeOneofCase(this, proto.vlsir.spice.Control.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vlsir.spice.Control.prototype.toObject = function(opt_includeInstance) {
  return proto.vlsir.spice.Control.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vlsir.spice.Control} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vlsir.spice.Control.toObject = function(includeInstance, msg) {
  var f, obj = {
    include: (f = msg.getInclude()) && proto.vlsir.spice.Include.toObject(includeInstance, f),
    lib: (f = msg.getLib()) && proto.vlsir.spice.LibInclude.toObject(includeInstance, f),
    save: (f = msg.getSave()) && proto.vlsir.spice.Save.toObject(includeInstance, f),
    meas: (f = msg.getMeas()) && proto.vlsir.spice.Meas.toObject(includeInstance, f),
    param: (f = msg.getParam()) && proto.vlsir.utils.Param.toObject(includeInstance, f),
    literal: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vlsir.spice.Control}
 */
proto.vlsir.spice.Control.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vlsir.spice.Control;
  return proto.vlsir.spice.Control.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vlsir.spice.Control} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vlsir.spice.Control}
 */
proto.vlsir.spice.Control.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vlsir.spice.Include;
      reader.readMessage(value,proto.vlsir.spice.Include.deserializeBinaryFromReader);
      msg.setInclude(value);
      break;
    case 2:
      var value = new proto.vlsir.spice.LibInclude;
      reader.readMessage(value,proto.vlsir.spice.LibInclude.deserializeBinaryFromReader);
      msg.setLib(value);
      break;
    case 5:
      var value = new proto.vlsir.spice.Save;
      reader.readMessage(value,proto.vlsir.spice.Save.deserializeBinaryFromReader);
      msg.setSave(value);
      break;
    case 6:
      var value = new proto.vlsir.spice.Meas;
      reader.readMessage(value,proto.vlsir.spice.Meas.deserializeBinaryFromReader);
      msg.setMeas(value);
      break;
    case 7:
      var value = new proto.vlsir.utils.Param;
      reader.readMessage(value,proto.vlsir.utils.Param.deserializeBinaryFromReader);
      msg.setParam(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setLiteral(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vlsir.spice.Control.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vlsir.spice.Control.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vlsir.spice.Control} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vlsir.spice.Control.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInclude();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vlsir.spice.Include.serializeBinaryToWriter
    );
  }
  f = message.getLib();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vlsir.spice.LibInclude.serializeBinaryToWriter
    );
  }
  f = message.getSave();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.vlsir.spice.Save.serializeBinaryToWriter
    );
  }
  f = message.getMeas();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.vlsir.spice.Meas.serializeBinaryToWriter
    );
  }
  f = message.getParam();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.vlsir.utils.Param.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional Include include = 1;
 * @return {?proto.vlsir.spice.Include}
 */
proto.vlsir.spice.Control.prototype.getInclude = function() {
  return /** @type{?proto.vlsir.spice.Include} */ (
    jspb.Message.getWrapperField(this, proto.vlsir.spice.Include, 1));
};


/** @param {?proto.vlsir.spice.Include|undefined} value */
proto.vlsir.spice.Control.prototype.setInclude = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.vlsir.spice.Control.oneofGroups_[0], value);
};


proto.vlsir.spice.Control.prototype.clearInclude = function() {
  this.setInclude(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vlsir.spice.Control.prototype.hasInclude = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LibInclude lib = 2;
 * @return {?proto.vlsir.spice.LibInclude}
 */
proto.vlsir.spice.Control.prototype.getLib = function() {
  return /** @type{?proto.vlsir.spice.LibInclude} */ (
    jspb.Message.getWrapperField(this, proto.vlsir.spice.LibInclude, 2));
};


/** @param {?proto.vlsir.spice.LibInclude|undefined} value */
proto.vlsir.spice.Control.prototype.setLib = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.vlsir.spice.Control.oneofGroups_[0], value);
};


proto.vlsir.spice.Control.prototype.clearLib = function() {
  this.setLib(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vlsir.spice.Control.prototype.hasLib = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Save save = 5;
 * @return {?proto.vlsir.spice.Save}
 */
proto.vlsir.spice.Control.prototype.getSave = function() {
  return /** @type{?proto.vlsir.spice.Save} */ (
    jspb.Message.getWrapperField(this, proto.vlsir.spice.Save, 5));
};


/** @param {?proto.vlsir.spice.Save|undefined} value */
proto.vlsir.spice.Control.prototype.setSave = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.vlsir.spice.Control.oneofGroups_[0], value);
};


proto.vlsir.spice.Control.prototype.clearSave = function() {
  this.setSave(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vlsir.spice.Control.prototype.hasSave = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Meas meas = 6;
 * @return {?proto.vlsir.spice.Meas}
 */
proto.vlsir.spice.Control.prototype.getMeas = function() {
  return /** @type{?proto.vlsir.spice.Meas} */ (
    jspb.Message.getWrapperField(this, proto.vlsir.spice.Meas, 6));
};


/** @param {?proto.vlsir.spice.Meas|undefined} value */
proto.vlsir.spice.Control.prototype.setMeas = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.vlsir.spice.Control.oneofGroups_[0], value);
};


proto.vlsir.spice.Control.prototype.clearMeas = function() {
  this.setMeas(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vlsir.spice.Control.prototype.hasMeas = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional vlsir.utils.Param param = 7;
 * @return {?proto.vlsir.utils.Param}
 */
proto.vlsir.spice.Control.prototype.getParam = function() {
  return /** @type{?proto.vlsir.utils.Param} */ (
    jspb.Message.getWrapperField(this, proto.vlsir.utils.Param, 7));
};


/** @param {?proto.vlsir.utils.Param|undefined} value */
proto.vlsir.spice.Control.prototype.setParam = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.vlsir.spice.Control.oneofGroups_[0], value);
};


proto.vlsir.spice.Control.prototype.clearParam = function() {
  this.setParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vlsir.spice.Control.prototype.hasParam = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string literal = 10;
 * @return {string}
 */
proto.vlsir.spice.Control.prototype.getLiteral = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.vlsir.spice.Control.prototype.setLiteral = function(value) {
  jspb.Message.setOneofField(this, 10, proto.vlsir.spice.Control.oneofGroups_[0], value);
};


proto.vlsir.spice.Control.prototype.clearLiteral = function() {
  jspb.Message.setOneofField(this, 10, proto.vlsir.spice.Control.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vlsir.spice.Control.prototype.hasLiteral = function() {
  return jspb.Message.getField(this, 10) != null;
};


