// source: tetris.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.vlsir.tetris.AbstractPort');
goog.provide('proto.vlsir.tetris.AbstractPort.EdgePort');
goog.provide('proto.vlsir.tetris.AbstractPort.KindCase');
goog.provide('proto.vlsir.tetris.AbstractPort.PortSide');
goog.provide('proto.vlsir.tetris.AbstractPort.ZTopEdgePort');
goog.provide('proto.vlsir.tetris.AbstractPort.ZTopInner');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.vlsir.tetris.TrackCross');
goog.require('proto.vlsir.tetris.TrackRef');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vlsir.tetris.AbstractPort = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.vlsir.tetris.AbstractPort.oneofGroups_);
};
goog.inherits(proto.vlsir.tetris.AbstractPort, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vlsir.tetris.AbstractPort.displayName = 'proto.vlsir.tetris.AbstractPort';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vlsir.tetris.AbstractPort.EdgePort = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vlsir.tetris.AbstractPort.EdgePort, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vlsir.tetris.AbstractPort.EdgePort.displayName = 'proto.vlsir.tetris.AbstractPort.EdgePort';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vlsir.tetris.AbstractPort.ZTopEdgePort = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vlsir.tetris.AbstractPort.ZTopEdgePort, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vlsir.tetris.AbstractPort.ZTopEdgePort.displayName = 'proto.vlsir.tetris.AbstractPort.ZTopEdgePort';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vlsir.tetris.AbstractPort.ZTopInner = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vlsir.tetris.AbstractPort.ZTopInner.repeatedFields_, null);
};
goog.inherits(proto.vlsir.tetris.AbstractPort.ZTopInner, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vlsir.tetris.AbstractPort.ZTopInner.displayName = 'proto.vlsir.tetris.AbstractPort.ZTopInner';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vlsir.tetris.AbstractPort.oneofGroups_ = [[10,11,12]];

/**
 * @enum {number}
 */
proto.vlsir.tetris.AbstractPort.KindCase = {
  KIND_NOT_SET: 0,
  EDGE: 10,
  ZTOP_EDGE: 11,
  ZTOP_INNER: 12
};

/**
 * @return {proto.vlsir.tetris.AbstractPort.KindCase}
 */
proto.vlsir.tetris.AbstractPort.prototype.getKindCase = function() {
  return /** @type {proto.vlsir.tetris.AbstractPort.KindCase} */(jspb.Message.computeOneofCase(this, proto.vlsir.tetris.AbstractPort.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vlsir.tetris.AbstractPort.prototype.toObject = function(opt_includeInstance) {
  return proto.vlsir.tetris.AbstractPort.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vlsir.tetris.AbstractPort} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vlsir.tetris.AbstractPort.toObject = function(includeInstance, msg) {
  var f, obj = {
    net: jspb.Message.getFieldWithDefault(msg, 1, ""),
    edge: (f = msg.getEdge()) && proto.vlsir.tetris.AbstractPort.EdgePort.toObject(includeInstance, f),
    ztopEdge: (f = msg.getZtopEdge()) && proto.vlsir.tetris.AbstractPort.ZTopEdgePort.toObject(includeInstance, f),
    ztopInner: (f = msg.getZtopInner()) && proto.vlsir.tetris.AbstractPort.ZTopInner.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vlsir.tetris.AbstractPort}
 */
proto.vlsir.tetris.AbstractPort.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vlsir.tetris.AbstractPort;
  return proto.vlsir.tetris.AbstractPort.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vlsir.tetris.AbstractPort} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vlsir.tetris.AbstractPort}
 */
proto.vlsir.tetris.AbstractPort.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNet(value);
      break;
    case 10:
      var value = new proto.vlsir.tetris.AbstractPort.EdgePort;
      reader.readMessage(value,proto.vlsir.tetris.AbstractPort.EdgePort.deserializeBinaryFromReader);
      msg.setEdge(value);
      break;
    case 11:
      var value = new proto.vlsir.tetris.AbstractPort.ZTopEdgePort;
      reader.readMessage(value,proto.vlsir.tetris.AbstractPort.ZTopEdgePort.deserializeBinaryFromReader);
      msg.setZtopEdge(value);
      break;
    case 12:
      var value = new proto.vlsir.tetris.AbstractPort.ZTopInner;
      reader.readMessage(value,proto.vlsir.tetris.AbstractPort.ZTopInner.deserializeBinaryFromReader);
      msg.setZtopInner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vlsir.tetris.AbstractPort.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vlsir.tetris.AbstractPort.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vlsir.tetris.AbstractPort} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vlsir.tetris.AbstractPort.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNet();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEdge();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.vlsir.tetris.AbstractPort.EdgePort.serializeBinaryToWriter
    );
  }
  f = message.getZtopEdge();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.vlsir.tetris.AbstractPort.ZTopEdgePort.serializeBinaryToWriter
    );
  }
  f = message.getZtopInner();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.vlsir.tetris.AbstractPort.ZTopInner.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.vlsir.tetris.AbstractPort.PortSide = {
  BOTTOM_OR_LEFT: 0,
  TOP_OR_RIGHT: 1
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vlsir.tetris.AbstractPort.EdgePort.prototype.toObject = function(opt_includeInstance) {
  return proto.vlsir.tetris.AbstractPort.EdgePort.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vlsir.tetris.AbstractPort.EdgePort} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vlsir.tetris.AbstractPort.EdgePort.toObject = function(includeInstance, msg) {
  var f, obj = {
    track: (f = msg.getTrack()) && proto.vlsir.tetris.TrackRef.toObject(includeInstance, f),
    side: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vlsir.tetris.AbstractPort.EdgePort}
 */
proto.vlsir.tetris.AbstractPort.EdgePort.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vlsir.tetris.AbstractPort.EdgePort;
  return proto.vlsir.tetris.AbstractPort.EdgePort.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vlsir.tetris.AbstractPort.EdgePort} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vlsir.tetris.AbstractPort.EdgePort}
 */
proto.vlsir.tetris.AbstractPort.EdgePort.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vlsir.tetris.TrackRef;
      reader.readMessage(value,proto.vlsir.tetris.TrackRef.deserializeBinaryFromReader);
      msg.setTrack(value);
      break;
    case 2:
      var value = /** @type {!proto.vlsir.tetris.AbstractPort.PortSide} */ (reader.readEnum());
      msg.setSide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vlsir.tetris.AbstractPort.EdgePort.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vlsir.tetris.AbstractPort.EdgePort.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vlsir.tetris.AbstractPort.EdgePort} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vlsir.tetris.AbstractPort.EdgePort.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrack();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vlsir.tetris.TrackRef.serializeBinaryToWriter
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional TrackRef track = 1;
 * @return {?proto.vlsir.tetris.TrackRef}
 */
proto.vlsir.tetris.AbstractPort.EdgePort.prototype.getTrack = function() {
  return /** @type{?proto.vlsir.tetris.TrackRef} */ (
    jspb.Message.getWrapperField(this, proto.vlsir.tetris.TrackRef, 1));
};


/**
 * @param {?proto.vlsir.tetris.TrackRef|undefined} value
 * @return {!proto.vlsir.tetris.AbstractPort.EdgePort} returns this
*/
proto.vlsir.tetris.AbstractPort.EdgePort.prototype.setTrack = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vlsir.tetris.AbstractPort.EdgePort} returns this
 */
proto.vlsir.tetris.AbstractPort.EdgePort.prototype.clearTrack = function() {
  return this.setTrack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vlsir.tetris.AbstractPort.EdgePort.prototype.hasTrack = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PortSide side = 2;
 * @return {!proto.vlsir.tetris.AbstractPort.PortSide}
 */
proto.vlsir.tetris.AbstractPort.EdgePort.prototype.getSide = function() {
  return /** @type {!proto.vlsir.tetris.AbstractPort.PortSide} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.vlsir.tetris.AbstractPort.PortSide} value
 * @return {!proto.vlsir.tetris.AbstractPort.EdgePort} returns this
 */
proto.vlsir.tetris.AbstractPort.EdgePort.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vlsir.tetris.AbstractPort.ZTopEdgePort.prototype.toObject = function(opt_includeInstance) {
  return proto.vlsir.tetris.AbstractPort.ZTopEdgePort.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vlsir.tetris.AbstractPort.ZTopEdgePort} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vlsir.tetris.AbstractPort.ZTopEdgePort.toObject = function(includeInstance, msg) {
  var f, obj = {
    track: jspb.Message.getFieldWithDefault(msg, 1, 0),
    side: jspb.Message.getFieldWithDefault(msg, 2, 0),
    into: (f = msg.getInto()) && proto.vlsir.tetris.TrackRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vlsir.tetris.AbstractPort.ZTopEdgePort}
 */
proto.vlsir.tetris.AbstractPort.ZTopEdgePort.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vlsir.tetris.AbstractPort.ZTopEdgePort;
  return proto.vlsir.tetris.AbstractPort.ZTopEdgePort.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vlsir.tetris.AbstractPort.ZTopEdgePort} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vlsir.tetris.AbstractPort.ZTopEdgePort}
 */
proto.vlsir.tetris.AbstractPort.ZTopEdgePort.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTrack(value);
      break;
    case 2:
      var value = /** @type {!proto.vlsir.tetris.AbstractPort.PortSide} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 3:
      var value = new proto.vlsir.tetris.TrackRef;
      reader.readMessage(value,proto.vlsir.tetris.TrackRef.deserializeBinaryFromReader);
      msg.setInto(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vlsir.tetris.AbstractPort.ZTopEdgePort.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vlsir.tetris.AbstractPort.ZTopEdgePort.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vlsir.tetris.AbstractPort.ZTopEdgePort} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vlsir.tetris.AbstractPort.ZTopEdgePort.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrack();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getInto();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.vlsir.tetris.TrackRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 track = 1;
 * @return {number}
 */
proto.vlsir.tetris.AbstractPort.ZTopEdgePort.prototype.getTrack = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vlsir.tetris.AbstractPort.ZTopEdgePort} returns this
 */
proto.vlsir.tetris.AbstractPort.ZTopEdgePort.prototype.setTrack = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional PortSide side = 2;
 * @return {!proto.vlsir.tetris.AbstractPort.PortSide}
 */
proto.vlsir.tetris.AbstractPort.ZTopEdgePort.prototype.getSide = function() {
  return /** @type {!proto.vlsir.tetris.AbstractPort.PortSide} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.vlsir.tetris.AbstractPort.PortSide} value
 * @return {!proto.vlsir.tetris.AbstractPort.ZTopEdgePort} returns this
 */
proto.vlsir.tetris.AbstractPort.ZTopEdgePort.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional TrackRef into = 3;
 * @return {?proto.vlsir.tetris.TrackRef}
 */
proto.vlsir.tetris.AbstractPort.ZTopEdgePort.prototype.getInto = function() {
  return /** @type{?proto.vlsir.tetris.TrackRef} */ (
    jspb.Message.getWrapperField(this, proto.vlsir.tetris.TrackRef, 3));
};


/**
 * @param {?proto.vlsir.tetris.TrackRef|undefined} value
 * @return {!proto.vlsir.tetris.AbstractPort.ZTopEdgePort} returns this
*/
proto.vlsir.tetris.AbstractPort.ZTopEdgePort.prototype.setInto = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vlsir.tetris.AbstractPort.ZTopEdgePort} returns this
 */
proto.vlsir.tetris.AbstractPort.ZTopEdgePort.prototype.clearInto = function() {
  return this.setInto(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vlsir.tetris.AbstractPort.ZTopEdgePort.prototype.hasInto = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vlsir.tetris.AbstractPort.ZTopInner.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vlsir.tetris.AbstractPort.ZTopInner.prototype.toObject = function(opt_includeInstance) {
  return proto.vlsir.tetris.AbstractPort.ZTopInner.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vlsir.tetris.AbstractPort.ZTopInner} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vlsir.tetris.AbstractPort.ZTopInner.toObject = function(includeInstance, msg) {
  var f, obj = {
    locsList: jspb.Message.toObjectList(msg.getLocsList(),
    proto.vlsir.tetris.TrackCross.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vlsir.tetris.AbstractPort.ZTopInner}
 */
proto.vlsir.tetris.AbstractPort.ZTopInner.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vlsir.tetris.AbstractPort.ZTopInner;
  return proto.vlsir.tetris.AbstractPort.ZTopInner.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vlsir.tetris.AbstractPort.ZTopInner} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vlsir.tetris.AbstractPort.ZTopInner}
 */
proto.vlsir.tetris.AbstractPort.ZTopInner.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vlsir.tetris.TrackCross;
      reader.readMessage(value,proto.vlsir.tetris.TrackCross.deserializeBinaryFromReader);
      msg.addLocs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vlsir.tetris.AbstractPort.ZTopInner.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vlsir.tetris.AbstractPort.ZTopInner.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vlsir.tetris.AbstractPort.ZTopInner} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vlsir.tetris.AbstractPort.ZTopInner.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.vlsir.tetris.TrackCross.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TrackCross locs = 1;
 * @return {!Array<!proto.vlsir.tetris.TrackCross>}
 */
proto.vlsir.tetris.AbstractPort.ZTopInner.prototype.getLocsList = function() {
  return /** @type{!Array<!proto.vlsir.tetris.TrackCross>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vlsir.tetris.TrackCross, 1));
};


/**
 * @param {!Array<!proto.vlsir.tetris.TrackCross>} value
 * @return {!proto.vlsir.tetris.AbstractPort.ZTopInner} returns this
*/
proto.vlsir.tetris.AbstractPort.ZTopInner.prototype.setLocsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vlsir.tetris.TrackCross=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vlsir.tetris.TrackCross}
 */
proto.vlsir.tetris.AbstractPort.ZTopInner.prototype.addLocs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vlsir.tetris.TrackCross, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vlsir.tetris.AbstractPort.ZTopInner} returns this
 */
proto.vlsir.tetris.AbstractPort.ZTopInner.prototype.clearLocsList = function() {
  return this.setLocsList([]);
};


/**
 * optional string net = 1;
 * @return {string}
 */
proto.vlsir.tetris.AbstractPort.prototype.getNet = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vlsir.tetris.AbstractPort} returns this
 */
proto.vlsir.tetris.AbstractPort.prototype.setNet = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional EdgePort edge = 10;
 * @return {?proto.vlsir.tetris.AbstractPort.EdgePort}
 */
proto.vlsir.tetris.AbstractPort.prototype.getEdge = function() {
  return /** @type{?proto.vlsir.tetris.AbstractPort.EdgePort} */ (
    jspb.Message.getWrapperField(this, proto.vlsir.tetris.AbstractPort.EdgePort, 10));
};


/**
 * @param {?proto.vlsir.tetris.AbstractPort.EdgePort|undefined} value
 * @return {!proto.vlsir.tetris.AbstractPort} returns this
*/
proto.vlsir.tetris.AbstractPort.prototype.setEdge = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.vlsir.tetris.AbstractPort.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vlsir.tetris.AbstractPort} returns this
 */
proto.vlsir.tetris.AbstractPort.prototype.clearEdge = function() {
  return this.setEdge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vlsir.tetris.AbstractPort.prototype.hasEdge = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ZTopEdgePort ztop_edge = 11;
 * @return {?proto.vlsir.tetris.AbstractPort.ZTopEdgePort}
 */
proto.vlsir.tetris.AbstractPort.prototype.getZtopEdge = function() {
  return /** @type{?proto.vlsir.tetris.AbstractPort.ZTopEdgePort} */ (
    jspb.Message.getWrapperField(this, proto.vlsir.tetris.AbstractPort.ZTopEdgePort, 11));
};


/**
 * @param {?proto.vlsir.tetris.AbstractPort.ZTopEdgePort|undefined} value
 * @return {!proto.vlsir.tetris.AbstractPort} returns this
*/
proto.vlsir.tetris.AbstractPort.prototype.setZtopEdge = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.vlsir.tetris.AbstractPort.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vlsir.tetris.AbstractPort} returns this
 */
proto.vlsir.tetris.AbstractPort.prototype.clearZtopEdge = function() {
  return this.setZtopEdge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vlsir.tetris.AbstractPort.prototype.hasZtopEdge = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional ZTopInner ztop_inner = 12;
 * @return {?proto.vlsir.tetris.AbstractPort.ZTopInner}
 */
proto.vlsir.tetris.AbstractPort.prototype.getZtopInner = function() {
  return /** @type{?proto.vlsir.tetris.AbstractPort.ZTopInner} */ (
    jspb.Message.getWrapperField(this, proto.vlsir.tetris.AbstractPort.ZTopInner, 12));
};


/**
 * @param {?proto.vlsir.tetris.AbstractPort.ZTopInner|undefined} value
 * @return {!proto.vlsir.tetris.AbstractPort} returns this
*/
proto.vlsir.tetris.AbstractPort.prototype.setZtopInner = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.vlsir.tetris.AbstractPort.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vlsir.tetris.AbstractPort} returns this
 */
proto.vlsir.tetris.AbstractPort.prototype.clearZtopInner = function() {
  return this.setZtopInner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vlsir.tetris.AbstractPort.prototype.hasZtopInner = function() {
  return jspb.Message.getField(this, 12) != null;
};


