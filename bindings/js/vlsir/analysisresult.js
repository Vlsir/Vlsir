/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.vlsir.spice.AnalysisResult');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.vlsir.spice.AcResult');
goog.require('proto.vlsir.spice.CustomAnalysisResult');
goog.require('proto.vlsir.spice.DcResult');
goog.require('proto.vlsir.spice.MonteResult');
goog.require('proto.vlsir.spice.NoiseResult');
goog.require('proto.vlsir.spice.OpResult');
goog.require('proto.vlsir.spice.SweepResult');
goog.require('proto.vlsir.spice.TranResult');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vlsir.spice.AnalysisResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.vlsir.spice.AnalysisResult.oneofGroups_);
};
goog.inherits(proto.vlsir.spice.AnalysisResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vlsir.spice.AnalysisResult.displayName = 'proto.vlsir.spice.AnalysisResult';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vlsir.spice.AnalysisResult.oneofGroups_ = [[1,2,3,4,5,10,11,20]];

/**
 * @enum {number}
 */
proto.vlsir.spice.AnalysisResult.AnCase = {
  AN_NOT_SET: 0,
  OP: 1,
  DC: 2,
  TRAN: 3,
  AC: 4,
  NOISE: 5,
  SWEEP: 10,
  MONTE: 11,
  CUSTOM: 20
};

/**
 * @return {proto.vlsir.spice.AnalysisResult.AnCase}
 */
proto.vlsir.spice.AnalysisResult.prototype.getAnCase = function() {
  return /** @type {proto.vlsir.spice.AnalysisResult.AnCase} */(jspb.Message.computeOneofCase(this, proto.vlsir.spice.AnalysisResult.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vlsir.spice.AnalysisResult.prototype.toObject = function(opt_includeInstance) {
  return proto.vlsir.spice.AnalysisResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vlsir.spice.AnalysisResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vlsir.spice.AnalysisResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    op: (f = msg.getOp()) && proto.vlsir.spice.OpResult.toObject(includeInstance, f),
    dc: (f = msg.getDc()) && proto.vlsir.spice.DcResult.toObject(includeInstance, f),
    tran: (f = msg.getTran()) && proto.vlsir.spice.TranResult.toObject(includeInstance, f),
    ac: (f = msg.getAc()) && proto.vlsir.spice.AcResult.toObject(includeInstance, f),
    noise: (f = msg.getNoise()) && proto.vlsir.spice.NoiseResult.toObject(includeInstance, f),
    sweep: (f = msg.getSweep()) && proto.vlsir.spice.SweepResult.toObject(includeInstance, f),
    monte: (f = msg.getMonte()) && proto.vlsir.spice.MonteResult.toObject(includeInstance, f),
    custom: (f = msg.getCustom()) && proto.vlsir.spice.CustomAnalysisResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vlsir.spice.AnalysisResult}
 */
proto.vlsir.spice.AnalysisResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vlsir.spice.AnalysisResult;
  return proto.vlsir.spice.AnalysisResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vlsir.spice.AnalysisResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vlsir.spice.AnalysisResult}
 */
proto.vlsir.spice.AnalysisResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vlsir.spice.OpResult;
      reader.readMessage(value,proto.vlsir.spice.OpResult.deserializeBinaryFromReader);
      msg.setOp(value);
      break;
    case 2:
      var value = new proto.vlsir.spice.DcResult;
      reader.readMessage(value,proto.vlsir.spice.DcResult.deserializeBinaryFromReader);
      msg.setDc(value);
      break;
    case 3:
      var value = new proto.vlsir.spice.TranResult;
      reader.readMessage(value,proto.vlsir.spice.TranResult.deserializeBinaryFromReader);
      msg.setTran(value);
      break;
    case 4:
      var value = new proto.vlsir.spice.AcResult;
      reader.readMessage(value,proto.vlsir.spice.AcResult.deserializeBinaryFromReader);
      msg.setAc(value);
      break;
    case 5:
      var value = new proto.vlsir.spice.NoiseResult;
      reader.readMessage(value,proto.vlsir.spice.NoiseResult.deserializeBinaryFromReader);
      msg.setNoise(value);
      break;
    case 10:
      var value = new proto.vlsir.spice.SweepResult;
      reader.readMessage(value,proto.vlsir.spice.SweepResult.deserializeBinaryFromReader);
      msg.setSweep(value);
      break;
    case 11:
      var value = new proto.vlsir.spice.MonteResult;
      reader.readMessage(value,proto.vlsir.spice.MonteResult.deserializeBinaryFromReader);
      msg.setMonte(value);
      break;
    case 20:
      var value = new proto.vlsir.spice.CustomAnalysisResult;
      reader.readMessage(value,proto.vlsir.spice.CustomAnalysisResult.deserializeBinaryFromReader);
      msg.setCustom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vlsir.spice.AnalysisResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vlsir.spice.AnalysisResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vlsir.spice.AnalysisResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vlsir.spice.AnalysisResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vlsir.spice.OpResult.serializeBinaryToWriter
    );
  }
  f = message.getDc();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vlsir.spice.DcResult.serializeBinaryToWriter
    );
  }
  f = message.getTran();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.vlsir.spice.TranResult.serializeBinaryToWriter
    );
  }
  f = message.getAc();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.vlsir.spice.AcResult.serializeBinaryToWriter
    );
  }
  f = message.getNoise();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.vlsir.spice.NoiseResult.serializeBinaryToWriter
    );
  }
  f = message.getSweep();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.vlsir.spice.SweepResult.serializeBinaryToWriter
    );
  }
  f = message.getMonte();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.vlsir.spice.MonteResult.serializeBinaryToWriter
    );
  }
  f = message.getCustom();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.vlsir.spice.CustomAnalysisResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional OpResult op = 1;
 * @return {?proto.vlsir.spice.OpResult}
 */
proto.vlsir.spice.AnalysisResult.prototype.getOp = function() {
  return /** @type{?proto.vlsir.spice.OpResult} */ (
    jspb.Message.getWrapperField(this, proto.vlsir.spice.OpResult, 1));
};


/** @param {?proto.vlsir.spice.OpResult|undefined} value */
proto.vlsir.spice.AnalysisResult.prototype.setOp = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.vlsir.spice.AnalysisResult.oneofGroups_[0], value);
};


proto.vlsir.spice.AnalysisResult.prototype.clearOp = function() {
  this.setOp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vlsir.spice.AnalysisResult.prototype.hasOp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DcResult dc = 2;
 * @return {?proto.vlsir.spice.DcResult}
 */
proto.vlsir.spice.AnalysisResult.prototype.getDc = function() {
  return /** @type{?proto.vlsir.spice.DcResult} */ (
    jspb.Message.getWrapperField(this, proto.vlsir.spice.DcResult, 2));
};


/** @param {?proto.vlsir.spice.DcResult|undefined} value */
proto.vlsir.spice.AnalysisResult.prototype.setDc = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.vlsir.spice.AnalysisResult.oneofGroups_[0], value);
};


proto.vlsir.spice.AnalysisResult.prototype.clearDc = function() {
  this.setDc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vlsir.spice.AnalysisResult.prototype.hasDc = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TranResult tran = 3;
 * @return {?proto.vlsir.spice.TranResult}
 */
proto.vlsir.spice.AnalysisResult.prototype.getTran = function() {
  return /** @type{?proto.vlsir.spice.TranResult} */ (
    jspb.Message.getWrapperField(this, proto.vlsir.spice.TranResult, 3));
};


/** @param {?proto.vlsir.spice.TranResult|undefined} value */
proto.vlsir.spice.AnalysisResult.prototype.setTran = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.vlsir.spice.AnalysisResult.oneofGroups_[0], value);
};


proto.vlsir.spice.AnalysisResult.prototype.clearTran = function() {
  this.setTran(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vlsir.spice.AnalysisResult.prototype.hasTran = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AcResult ac = 4;
 * @return {?proto.vlsir.spice.AcResult}
 */
proto.vlsir.spice.AnalysisResult.prototype.getAc = function() {
  return /** @type{?proto.vlsir.spice.AcResult} */ (
    jspb.Message.getWrapperField(this, proto.vlsir.spice.AcResult, 4));
};


/** @param {?proto.vlsir.spice.AcResult|undefined} value */
proto.vlsir.spice.AnalysisResult.prototype.setAc = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.vlsir.spice.AnalysisResult.oneofGroups_[0], value);
};


proto.vlsir.spice.AnalysisResult.prototype.clearAc = function() {
  this.setAc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vlsir.spice.AnalysisResult.prototype.hasAc = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional NoiseResult noise = 5;
 * @return {?proto.vlsir.spice.NoiseResult}
 */
proto.vlsir.spice.AnalysisResult.prototype.getNoise = function() {
  return /** @type{?proto.vlsir.spice.NoiseResult} */ (
    jspb.Message.getWrapperField(this, proto.vlsir.spice.NoiseResult, 5));
};


/** @param {?proto.vlsir.spice.NoiseResult|undefined} value */
proto.vlsir.spice.AnalysisResult.prototype.setNoise = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.vlsir.spice.AnalysisResult.oneofGroups_[0], value);
};


proto.vlsir.spice.AnalysisResult.prototype.clearNoise = function() {
  this.setNoise(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vlsir.spice.AnalysisResult.prototype.hasNoise = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SweepResult sweep = 10;
 * @return {?proto.vlsir.spice.SweepResult}
 */
proto.vlsir.spice.AnalysisResult.prototype.getSweep = function() {
  return /** @type{?proto.vlsir.spice.SweepResult} */ (
    jspb.Message.getWrapperField(this, proto.vlsir.spice.SweepResult, 10));
};


/** @param {?proto.vlsir.spice.SweepResult|undefined} value */
proto.vlsir.spice.AnalysisResult.prototype.setSweep = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.vlsir.spice.AnalysisResult.oneofGroups_[0], value);
};


proto.vlsir.spice.AnalysisResult.prototype.clearSweep = function() {
  this.setSweep(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vlsir.spice.AnalysisResult.prototype.hasSweep = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional MonteResult monte = 11;
 * @return {?proto.vlsir.spice.MonteResult}
 */
proto.vlsir.spice.AnalysisResult.prototype.getMonte = function() {
  return /** @type{?proto.vlsir.spice.MonteResult} */ (
    jspb.Message.getWrapperField(this, proto.vlsir.spice.MonteResult, 11));
};


/** @param {?proto.vlsir.spice.MonteResult|undefined} value */
proto.vlsir.spice.AnalysisResult.prototype.setMonte = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.vlsir.spice.AnalysisResult.oneofGroups_[0], value);
};


proto.vlsir.spice.AnalysisResult.prototype.clearMonte = function() {
  this.setMonte(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vlsir.spice.AnalysisResult.prototype.hasMonte = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional CustomAnalysisResult custom = 20;
 * @return {?proto.vlsir.spice.CustomAnalysisResult}
 */
proto.vlsir.spice.AnalysisResult.prototype.getCustom = function() {
  return /** @type{?proto.vlsir.spice.CustomAnalysisResult} */ (
    jspb.Message.getWrapperField(this, proto.vlsir.spice.CustomAnalysisResult, 20));
};


/** @param {?proto.vlsir.spice.CustomAnalysisResult|undefined} value */
proto.vlsir.spice.AnalysisResult.prototype.setCustom = function(value) {
  jspb.Message.setOneofWrapperField(this, 20, proto.vlsir.spice.AnalysisResult.oneofGroups_[0], value);
};


proto.vlsir.spice.AnalysisResult.prototype.clearCustom = function() {
  this.setCustom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vlsir.spice.AnalysisResult.prototype.hasCustom = function() {
  return jspb.Message.getField(this, 20) != null;
};


