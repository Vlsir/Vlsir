// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: circuit.proto

#include "circuit.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace vlsir {
namespace circuit {
PROTOBUF_CONSTEXPR Package::Package(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.modules_)*/{}
  , /*decltype(_impl_.ext_modules_)*/{}
  , /*decltype(_impl_.domain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PackageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PackageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PackageDefaultTypeInternal() {}
  union {
    Package _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PackageDefaultTypeInternal _Package_default_instance_;
PROTOBUF_CONSTEXPR Port::Port(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signal_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PortDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PortDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PortDefaultTypeInternal() {}
  union {
    Port _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PortDefaultTypeInternal _Port_default_instance_;
PROTOBUF_CONSTEXPR Signal::Signal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.width_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignalDefaultTypeInternal() {}
  union {
    Signal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignalDefaultTypeInternal _Signal_default_instance_;
PROTOBUF_CONSTEXPR Slice::Slice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signal_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.top_)*/int64_t{0}
  , /*decltype(_impl_.bot_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SliceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SliceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SliceDefaultTypeInternal() {}
  union {
    Slice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SliceDefaultTypeInternal _Slice_default_instance_;
PROTOBUF_CONSTEXPR Concat::Concat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parts_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConcatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConcatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConcatDefaultTypeInternal() {}
  union {
    Concat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConcatDefaultTypeInternal _Concat_default_instance_;
PROTOBUF_CONSTEXPR ConnectionTarget::ConnectionTarget(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stype_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ConnectionTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionTargetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionTargetDefaultTypeInternal() {}
  union {
    ConnectionTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionTargetDefaultTypeInternal _ConnectionTarget_default_instance_;
PROTOBUF_CONSTEXPR Connection::Connection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.portname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionDefaultTypeInternal() {}
  union {
    Connection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionDefaultTypeInternal _Connection_default_instance_;
PROTOBUF_CONSTEXPR Instance::Instance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parameters_)*/{}
  , /*decltype(_impl_.connections_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.module_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InstanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstanceDefaultTypeInternal() {}
  union {
    Instance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstanceDefaultTypeInternal _Instance_default_instance_;
PROTOBUF_CONSTEXPR Module::Module(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ports_)*/{}
  , /*decltype(_impl_.signals_)*/{}
  , /*decltype(_impl_.instances_)*/{}
  , /*decltype(_impl_.parameters_)*/{}
  , /*decltype(_impl_.literals_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModuleDefaultTypeInternal() {}
  union {
    Module _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModuleDefaultTypeInternal _Module_default_instance_;
PROTOBUF_CONSTEXPR ExternalModule::ExternalModule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ports_)*/{}
  , /*decltype(_impl_.signals_)*/{}
  , /*decltype(_impl_.parameters_)*/{}
  , /*decltype(_impl_.desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/nullptr
  , /*decltype(_impl_.spicetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExternalModuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExternalModuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExternalModuleDefaultTypeInternal() {}
  union {
    ExternalModule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExternalModuleDefaultTypeInternal _ExternalModule_default_instance_;
PROTOBUF_CONSTEXPR Interface::Interface(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ports_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InterfaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InterfaceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InterfaceDefaultTypeInternal() {}
  union {
    Interface _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InterfaceDefaultTypeInternal _Interface_default_instance_;
}  // namespace circuit
}  // namespace vlsir
static ::_pb::Metadata file_level_metadata_circuit_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_circuit_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_circuit_2eproto = nullptr;

const uint32_t TableStruct_circuit_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Package, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Package, _impl_.domain_),
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Package, _impl_.modules_),
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Package, _impl_.ext_modules_),
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Package, _impl_.desc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Port, _impl_.signal_),
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Port, _impl_.direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Signal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Signal, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Signal, _impl_.width_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Slice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Slice, _impl_.signal_),
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Slice, _impl_.top_),
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Slice, _impl_.bot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Concat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Concat, _impl_.parts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::ConnectionTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::ConnectionTarget, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::ConnectionTarget, _impl_.stype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Connection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Connection, _impl_.portname_),
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Connection, _impl_.target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Instance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Instance, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Instance, _impl_.module_),
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Instance, _impl_.parameters_),
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Instance, _impl_.connections_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Module, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Module, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Module, _impl_.ports_),
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Module, _impl_.signals_),
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Module, _impl_.instances_),
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Module, _impl_.parameters_),
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Module, _impl_.literals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::ExternalModule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::ExternalModule, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::ExternalModule, _impl_.desc_),
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::ExternalModule, _impl_.ports_),
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::ExternalModule, _impl_.signals_),
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::ExternalModule, _impl_.parameters_),
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::ExternalModule, _impl_.spicetype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Interface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Interface, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::circuit::Interface, _impl_.ports_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::vlsir::circuit::Package)},
  { 10, -1, -1, sizeof(::vlsir::circuit::Port)},
  { 18, -1, -1, sizeof(::vlsir::circuit::Signal)},
  { 26, -1, -1, sizeof(::vlsir::circuit::Slice)},
  { 35, -1, -1, sizeof(::vlsir::circuit::Concat)},
  { 42, -1, -1, sizeof(::vlsir::circuit::ConnectionTarget)},
  { 52, -1, -1, sizeof(::vlsir::circuit::Connection)},
  { 60, -1, -1, sizeof(::vlsir::circuit::Instance)},
  { 70, -1, -1, sizeof(::vlsir::circuit::Module)},
  { 82, -1, -1, sizeof(::vlsir::circuit::ExternalModule)},
  { 94, -1, -1, sizeof(::vlsir::circuit::Interface)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::vlsir::circuit::_Package_default_instance_._instance,
  &::vlsir::circuit::_Port_default_instance_._instance,
  &::vlsir::circuit::_Signal_default_instance_._instance,
  &::vlsir::circuit::_Slice_default_instance_._instance,
  &::vlsir::circuit::_Concat_default_instance_._instance,
  &::vlsir::circuit::_ConnectionTarget_default_instance_._instance,
  &::vlsir::circuit::_Connection_default_instance_._instance,
  &::vlsir::circuit::_Instance_default_instance_._instance,
  &::vlsir::circuit::_Module_default_instance_._instance,
  &::vlsir::circuit::_ExternalModule_default_instance_._instance,
  &::vlsir::circuit::_Interface_default_instance_._instance,
};

const char descriptor_table_protodef_circuit_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rcircuit.proto\022\rvlsir.circuit\032\013utils.pr"
  "oto\"\203\001\n\007Package\022\016\n\006domain\030\001 \001(\t\022&\n\007modul"
  "es\030\002 \003(\0132\025.vlsir.circuit.Module\0222\n\013ext_m"
  "odules\030\003 \003(\0132\035.vlsir.circuit.ExternalMod"
  "ule\022\014\n\004desc\030\n \001(\t\"\201\001\n\004Port\022\016\n\006signal\030\001 \001"
  "(\t\0220\n\tdirection\030\002 \001(\0162\035.vlsir.circuit.Po"
  "rt.Direction\"7\n\tDirection\022\t\n\005INPUT\020\000\022\n\n\006"
  "OUTPUT\020\001\022\t\n\005INOUT\020\002\022\010\n\004NONE\020\003\"%\n\006Signal\022"
  "\014\n\004name\030\001 \001(\t\022\r\n\005width\030\002 \001(\003\"1\n\005Slice\022\016\n"
  "\006signal\030\001 \001(\t\022\013\n\003top\030\002 \001(\003\022\013\n\003bot\030\003 \001(\003\""
  "8\n\006Concat\022.\n\005parts\030\001 \003(\0132\037.vlsir.circuit"
  ".ConnectionTarget\"z\n\020ConnectionTarget\022\r\n"
  "\003sig\030\001 \001(\tH\000\022%\n\005slice\030\002 \001(\0132\024.vlsir.circ"
  "uit.SliceH\000\022\'\n\006concat\030\003 \001(\0132\025.vlsir.circ"
  "uit.ConcatH\000B\007\n\005stype\"O\n\nConnection\022\020\n\010p"
  "ortname\030\001 \001(\t\022/\n\006target\030\002 \001(\0132\037.vlsir.ci"
  "rcuit.ConnectionTarget\"\230\001\n\010Instance\022\014\n\004n"
  "ame\030\001 \001(\t\022&\n\006module\030\002 \001(\0132\026.vlsir.utils."
  "Reference\022&\n\nparameters\030\003 \003(\0132\022.vlsir.ut"
  "ils.Param\022.\n\013connections\030\004 \003(\0132\031.vlsir.c"
  "ircuit.Connection\"\310\001\n\006Module\022\014\n\004name\030\001 \001"
  "(\t\022\"\n\005ports\030\002 \003(\0132\023.vlsir.circuit.Port\022&"
  "\n\007signals\030\003 \003(\0132\025.vlsir.circuit.Signal\022*"
  "\n\tinstances\030\004 \003(\0132\027.vlsir.circuit.Instan"
  "ce\022&\n\nparameters\030\005 \003(\0132\022.vlsir.utils.Par"
  "am\022\020\n\010literals\030\006 \003(\t\"\351\001\n\016ExternalModule\022"
  "(\n\004name\030\001 \001(\0132\032.vlsir.utils.QualifiedNam"
  "e\022\014\n\004desc\030\002 \001(\t\022\"\n\005ports\030\003 \003(\0132\023.vlsir.c"
  "ircuit.Port\022&\n\007signals\030\004 \003(\0132\025.vlsir.cir"
  "cuit.Signal\022&\n\nparameters\030\005 \003(\0132\022.vlsir."
  "utils.Param\022+\n\tspicetype\030\006 \001(\0162\030.vlsir.c"
  "ircuit.SpiceType\"=\n\tInterface\022\014\n\004name\030\001 "
  "\001(\t\022\"\n\005ports\030\n \003(\0132\023.vlsir.circuit.Port*"
  "\260\001\n\tSpiceType\022\n\n\006SUBCKT\020\000\022\014\n\010RESISTOR\020\001\022"
  "\r\n\tCAPACITOR\020\002\022\014\n\010INDUCTOR\020\003\022\007\n\003MOS\020\004\022\t\n"
  "\005DIODE\020\005\022\013\n\007BIPOLAR\020\006\022\013\n\007VSOURCE\020\007\022\013\n\007IS"
  "OURCE\020\010\022\010\n\004VCVS\020\t\022\010\n\004VCCS\020\n\022\010\n\004CCCS\020\013\022\010\n"
  "\004CCVS\020\014\022\t\n\005TLINE\020\rb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_circuit_2eproto_deps[1] = {
  &::descriptor_table_utils_2eproto,
};
static ::_pbi::once_flag descriptor_table_circuit_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_circuit_2eproto = {
    false, false, 1506, descriptor_table_protodef_circuit_2eproto,
    "circuit.proto",
    &descriptor_table_circuit_2eproto_once, descriptor_table_circuit_2eproto_deps, 1, 11,
    schemas, file_default_instances, TableStruct_circuit_2eproto::offsets,
    file_level_metadata_circuit_2eproto, file_level_enum_descriptors_circuit_2eproto,
    file_level_service_descriptors_circuit_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_circuit_2eproto_getter() {
  return &descriptor_table_circuit_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_circuit_2eproto(&descriptor_table_circuit_2eproto);
namespace vlsir {
namespace circuit {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Port_Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_circuit_2eproto);
  return file_level_enum_descriptors_circuit_2eproto[0];
}
bool Port_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Port_Direction Port::INPUT;
constexpr Port_Direction Port::OUTPUT;
constexpr Port_Direction Port::INOUT;
constexpr Port_Direction Port::NONE;
constexpr Port_Direction Port::Direction_MIN;
constexpr Port_Direction Port::Direction_MAX;
constexpr int Port::Direction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpiceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_circuit_2eproto);
  return file_level_enum_descriptors_circuit_2eproto[1];
}
bool SpiceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Package::_Internal {
 public:
};

Package::Package(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.circuit.Package)
}
Package::Package(const Package& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Package* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.modules_){from._impl_.modules_}
    , decltype(_impl_.ext_modules_){from._impl_.ext_modules_}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.desc_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_domain().empty()) {
    _this->_impl_.domain_.Set(from._internal_domain(), 
      _this->GetArenaForAllocation());
  }
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    _this->_impl_.desc_.Set(from._internal_desc(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.circuit.Package)
}

inline void Package::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.modules_){arena}
    , decltype(_impl_.ext_modules_){arena}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.desc_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Package::~Package() {
  // @@protoc_insertion_point(destructor:vlsir.circuit.Package)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Package::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.modules_.~RepeatedPtrField();
  _impl_.ext_modules_.~RepeatedPtrField();
  _impl_.domain_.Destroy();
  _impl_.desc_.Destroy();
}

void Package::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Package::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.circuit.Package)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.modules_.Clear();
  _impl_.ext_modules_.Clear();
  _impl_.domain_.ClearToEmpty();
  _impl_.desc_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Package::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string domain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.circuit.Package.domain"));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.circuit.Module modules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_modules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.circuit.ExternalModule ext_modules = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ext_modules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string desc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.circuit.Package.desc"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Package::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.circuit.Package)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string domain = 1;
  if (!this->_internal_domain().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.circuit.Package.domain");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_domain(), target);
  }

  // repeated .vlsir.circuit.Module modules = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_modules_size()); i < n; i++) {
    const auto& repfield = this->_internal_modules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .vlsir.circuit.ExternalModule ext_modules = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ext_modules_size()); i < n; i++) {
    const auto& repfield = this->_internal_ext_modules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string desc = 10;
  if (!this->_internal_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.circuit.Package.desc");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.circuit.Package)
  return target;
}

size_t Package::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.circuit.Package)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.circuit.Module modules = 2;
  total_size += 1UL * this->_internal_modules_size();
  for (const auto& msg : this->_impl_.modules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vlsir.circuit.ExternalModule ext_modules = 3;
  total_size += 1UL * this->_internal_ext_modules_size();
  for (const auto& msg : this->_impl_.ext_modules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string domain = 1;
  if (!this->_internal_domain().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domain());
  }

  // string desc = 10;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Package::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Package::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Package::GetClassData() const { return &_class_data_; }


void Package::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Package*>(&to_msg);
  auto& from = static_cast<const Package&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.circuit.Package)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.modules_.MergeFrom(from._impl_.modules_);
  _this->_impl_.ext_modules_.MergeFrom(from._impl_.ext_modules_);
  if (!from._internal_domain().empty()) {
    _this->_internal_set_domain(from._internal_domain());
  }
  if (!from._internal_desc().empty()) {
    _this->_internal_set_desc(from._internal_desc());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Package::CopyFrom(const Package& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.circuit.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Package::IsInitialized() const {
  return true;
}

void Package::InternalSwap(Package* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.modules_.InternalSwap(&other->_impl_.modules_);
  _impl_.ext_modules_.InternalSwap(&other->_impl_.ext_modules_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.domain_, lhs_arena,
      &other->_impl_.domain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_, lhs_arena,
      &other->_impl_.desc_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Package::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_circuit_2eproto_getter, &descriptor_table_circuit_2eproto_once,
      file_level_metadata_circuit_2eproto[0]);
}

// ===================================================================

class Port::_Internal {
 public:
};

Port::Port(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.circuit.Port)
}
Port::Port(const Port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Port* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signal_){}
    , decltype(_impl_.direction_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.signal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signal_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signal().empty()) {
    _this->_impl_.signal_.Set(from._internal_signal(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.direction_ = from._impl_.direction_;
  // @@protoc_insertion_point(copy_constructor:vlsir.circuit.Port)
}

inline void Port::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.signal_){}
    , decltype(_impl_.direction_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.signal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signal_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Port::~Port() {
  // @@protoc_insertion_point(destructor:vlsir.circuit.Port)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Port::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signal_.Destroy();
}

void Port::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Port::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.circuit.Port)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signal_.ClearToEmpty();
  _impl_.direction_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Port::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string signal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_signal();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.circuit.Port.signal"));
        } else
          goto handle_unusual;
        continue;
      // .vlsir.circuit.Port.Direction direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::vlsir::circuit::Port_Direction>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Port::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.circuit.Port)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string signal = 1;
  if (!this->_internal_signal().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signal().data(), static_cast<int>(this->_internal_signal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.circuit.Port.signal");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_signal(), target);
  }

  // .vlsir.circuit.Port.Direction direction = 2;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.circuit.Port)
  return target;
}

size_t Port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.circuit.Port)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string signal = 1;
  if (!this->_internal_signal().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signal());
  }

  // .vlsir.circuit.Port.Direction direction = 2;
  if (this->_internal_direction() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Port::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Port::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Port::GetClassData() const { return &_class_data_; }


void Port::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Port*>(&to_msg);
  auto& from = static_cast<const Port&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.circuit.Port)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signal().empty()) {
    _this->_internal_set_signal(from._internal_signal());
  }
  if (from._internal_direction() != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Port::CopyFrom(const Port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.circuit.Port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Port::IsInitialized() const {
  return true;
}

void Port::InternalSwap(Port* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signal_, lhs_arena,
      &other->_impl_.signal_, rhs_arena
  );
  swap(_impl_.direction_, other->_impl_.direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Port::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_circuit_2eproto_getter, &descriptor_table_circuit_2eproto_once,
      file_level_metadata_circuit_2eproto[1]);
}

// ===================================================================

class Signal::_Internal {
 public:
};

Signal::Signal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.circuit.Signal)
}
Signal::Signal(const Signal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Signal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.width_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.width_ = from._impl_.width_;
  // @@protoc_insertion_point(copy_constructor:vlsir.circuit.Signal)
}

inline void Signal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.width_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Signal::~Signal() {
  // @@protoc_insertion_point(destructor:vlsir.circuit.Signal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Signal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void Signal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.circuit.Signal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.width_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Signal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.circuit.Signal.name"));
        } else
          goto handle_unusual;
        continue;
      // int64 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Signal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.circuit.Signal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.circuit.Signal.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int64 width = 2;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.circuit.Signal)
  return target;
}

size_t Signal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.circuit.Signal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 width = 2;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_width());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Signal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Signal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Signal::GetClassData() const { return &_class_data_; }


void Signal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Signal*>(&to_msg);
  auto& from = static_cast<const Signal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.circuit.Signal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Signal::CopyFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.circuit.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {
  return true;
}

void Signal::InternalSwap(Signal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.width_, other->_impl_.width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Signal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_circuit_2eproto_getter, &descriptor_table_circuit_2eproto_once,
      file_level_metadata_circuit_2eproto[2]);
}

// ===================================================================

class Slice::_Internal {
 public:
};

Slice::Slice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.circuit.Slice)
}
Slice::Slice(const Slice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Slice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signal_){}
    , decltype(_impl_.top_){}
    , decltype(_impl_.bot_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.signal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signal_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signal().empty()) {
    _this->_impl_.signal_.Set(from._internal_signal(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.top_, &from._impl_.top_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bot_) -
    reinterpret_cast<char*>(&_impl_.top_)) + sizeof(_impl_.bot_));
  // @@protoc_insertion_point(copy_constructor:vlsir.circuit.Slice)
}

inline void Slice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.signal_){}
    , decltype(_impl_.top_){int64_t{0}}
    , decltype(_impl_.bot_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.signal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signal_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Slice::~Slice() {
  // @@protoc_insertion_point(destructor:vlsir.circuit.Slice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Slice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signal_.Destroy();
}

void Slice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Slice::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.circuit.Slice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signal_.ClearToEmpty();
  ::memset(&_impl_.top_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bot_) -
      reinterpret_cast<char*>(&_impl_.top_)) + sizeof(_impl_.bot_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Slice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string signal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_signal();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.circuit.Slice.signal"));
        } else
          goto handle_unusual;
        continue;
      // int64 top = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 bot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Slice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.circuit.Slice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string signal = 1;
  if (!this->_internal_signal().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signal().data(), static_cast<int>(this->_internal_signal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.circuit.Slice.signal");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_signal(), target);
  }

  // int64 top = 2;
  if (this->_internal_top() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_top(), target);
  }

  // int64 bot = 3;
  if (this->_internal_bot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_bot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.circuit.Slice)
  return target;
}

size_t Slice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.circuit.Slice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string signal = 1;
  if (!this->_internal_signal().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signal());
  }

  // int64 top = 2;
  if (this->_internal_top() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_top());
  }

  // int64 bot = 3;
  if (this->_internal_bot() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Slice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Slice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Slice::GetClassData() const { return &_class_data_; }


void Slice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Slice*>(&to_msg);
  auto& from = static_cast<const Slice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.circuit.Slice)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signal().empty()) {
    _this->_internal_set_signal(from._internal_signal());
  }
  if (from._internal_top() != 0) {
    _this->_internal_set_top(from._internal_top());
  }
  if (from._internal_bot() != 0) {
    _this->_internal_set_bot(from._internal_bot());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Slice::CopyFrom(const Slice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.circuit.Slice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Slice::IsInitialized() const {
  return true;
}

void Slice::InternalSwap(Slice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signal_, lhs_arena,
      &other->_impl_.signal_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Slice, _impl_.bot_)
      + sizeof(Slice::_impl_.bot_)
      - PROTOBUF_FIELD_OFFSET(Slice, _impl_.top_)>(
          reinterpret_cast<char*>(&_impl_.top_),
          reinterpret_cast<char*>(&other->_impl_.top_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Slice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_circuit_2eproto_getter, &descriptor_table_circuit_2eproto_once,
      file_level_metadata_circuit_2eproto[3]);
}

// ===================================================================

class Concat::_Internal {
 public:
};

Concat::Concat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.circuit.Concat)
}
Concat::Concat(const Concat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Concat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.parts_){from._impl_.parts_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vlsir.circuit.Concat)
}

inline void Concat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.parts_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Concat::~Concat() {
  // @@protoc_insertion_point(destructor:vlsir.circuit.Concat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Concat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parts_.~RepeatedPtrField();
}

void Concat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Concat::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.circuit.Concat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Concat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .vlsir.circuit.ConnectionTarget parts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Concat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.circuit.Concat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vlsir.circuit.ConnectionTarget parts = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_parts_size()); i < n; i++) {
    const auto& repfield = this->_internal_parts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.circuit.Concat)
  return target;
}

size_t Concat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.circuit.Concat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.circuit.ConnectionTarget parts = 1;
  total_size += 1UL * this->_internal_parts_size();
  for (const auto& msg : this->_impl_.parts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Concat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Concat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Concat::GetClassData() const { return &_class_data_; }


void Concat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Concat*>(&to_msg);
  auto& from = static_cast<const Concat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.circuit.Concat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.parts_.MergeFrom(from._impl_.parts_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Concat::CopyFrom(const Concat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.circuit.Concat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Concat::IsInitialized() const {
  return true;
}

void Concat::InternalSwap(Concat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.parts_.InternalSwap(&other->_impl_.parts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Concat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_circuit_2eproto_getter, &descriptor_table_circuit_2eproto_once,
      file_level_metadata_circuit_2eproto[4]);
}

// ===================================================================

class ConnectionTarget::_Internal {
 public:
  static const ::vlsir::circuit::Slice& slice(const ConnectionTarget* msg);
  static const ::vlsir::circuit::Concat& concat(const ConnectionTarget* msg);
};

const ::vlsir::circuit::Slice&
ConnectionTarget::_Internal::slice(const ConnectionTarget* msg) {
  return *msg->_impl_.stype_.slice_;
}
const ::vlsir::circuit::Concat&
ConnectionTarget::_Internal::concat(const ConnectionTarget* msg) {
  return *msg->_impl_.stype_.concat_;
}
void ConnectionTarget::set_allocated_slice(::vlsir::circuit::Slice* slice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stype();
  if (slice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(slice);
    if (message_arena != submessage_arena) {
      slice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slice, submessage_arena);
    }
    set_has_slice();
    _impl_.stype_.slice_ = slice;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.circuit.ConnectionTarget.slice)
}
void ConnectionTarget::set_allocated_concat(::vlsir::circuit::Concat* concat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stype();
  if (concat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(concat);
    if (message_arena != submessage_arena) {
      concat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concat, submessage_arena);
    }
    set_has_concat();
    _impl_.stype_.concat_ = concat;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.circuit.ConnectionTarget.concat)
}
ConnectionTarget::ConnectionTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.circuit.ConnectionTarget)
}
ConnectionTarget::ConnectionTarget(const ConnectionTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectionTarget* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stype_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_stype();
  switch (from.stype_case()) {
    case kSig: {
      _this->_internal_set_sig(from._internal_sig());
      break;
    }
    case kSlice: {
      _this->_internal_mutable_slice()->::vlsir::circuit::Slice::MergeFrom(
          from._internal_slice());
      break;
    }
    case kConcat: {
      _this->_internal_mutable_concat()->::vlsir::circuit::Concat::MergeFrom(
          from._internal_concat());
      break;
    }
    case STYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.circuit.ConnectionTarget)
}

inline void ConnectionTarget::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stype_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_stype();
}

ConnectionTarget::~ConnectionTarget() {
  // @@protoc_insertion_point(destructor:vlsir.circuit.ConnectionTarget)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectionTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_stype()) {
    clear_stype();
  }
}

void ConnectionTarget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectionTarget::clear_stype() {
// @@protoc_insertion_point(one_of_clear_start:vlsir.circuit.ConnectionTarget)
  switch (stype_case()) {
    case kSig: {
      _impl_.stype_.sig_.Destroy();
      break;
    }
    case kSlice: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stype_.slice_;
      }
      break;
    }
    case kConcat: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stype_.concat_;
      }
      break;
    }
    case STYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = STYPE_NOT_SET;
}


void ConnectionTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.circuit.ConnectionTarget)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_stype();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionTarget::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sig = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sig();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.circuit.ConnectionTarget.sig"));
        } else
          goto handle_unusual;
        continue;
      // .vlsir.circuit.Slice slice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slice(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vlsir.circuit.Concat concat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_concat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectionTarget::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.circuit.ConnectionTarget)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sig = 1;
  if (_internal_has_sig()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sig().data(), static_cast<int>(this->_internal_sig().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.circuit.ConnectionTarget.sig");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sig(), target);
  }

  // .vlsir.circuit.Slice slice = 2;
  if (_internal_has_slice()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slice(this),
        _Internal::slice(this).GetCachedSize(), target, stream);
  }

  // .vlsir.circuit.Concat concat = 3;
  if (_internal_has_concat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::concat(this),
        _Internal::concat(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.circuit.ConnectionTarget)
  return target;
}

size_t ConnectionTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.circuit.ConnectionTarget)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (stype_case()) {
    // string sig = 1;
    case kSig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sig());
      break;
    }
    // .vlsir.circuit.Slice slice = 2;
    case kSlice: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stype_.slice_);
      break;
    }
    // .vlsir.circuit.Concat concat = 3;
    case kConcat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stype_.concat_);
      break;
    }
    case STYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectionTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionTarget::GetClassData() const { return &_class_data_; }


void ConnectionTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectionTarget*>(&to_msg);
  auto& from = static_cast<const ConnectionTarget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.circuit.ConnectionTarget)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.stype_case()) {
    case kSig: {
      _this->_internal_set_sig(from._internal_sig());
      break;
    }
    case kSlice: {
      _this->_internal_mutable_slice()->::vlsir::circuit::Slice::MergeFrom(
          from._internal_slice());
      break;
    }
    case kConcat: {
      _this->_internal_mutable_concat()->::vlsir::circuit::Concat::MergeFrom(
          from._internal_concat());
      break;
    }
    case STYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionTarget::CopyFrom(const ConnectionTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.circuit.ConnectionTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionTarget::IsInitialized() const {
  return true;
}

void ConnectionTarget::InternalSwap(ConnectionTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.stype_, other->_impl_.stype_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionTarget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_circuit_2eproto_getter, &descriptor_table_circuit_2eproto_once,
      file_level_metadata_circuit_2eproto[5]);
}

// ===================================================================

class Connection::_Internal {
 public:
  static const ::vlsir::circuit::ConnectionTarget& target(const Connection* msg);
};

const ::vlsir::circuit::ConnectionTarget&
Connection::_Internal::target(const Connection* msg) {
  return *msg->_impl_.target_;
}
Connection::Connection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.circuit.Connection)
}
Connection::Connection(const Connection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Connection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.portname_){}
    , decltype(_impl_.target_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.portname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.portname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_portname().empty()) {
    _this->_impl_.portname_.Set(from._internal_portname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_target()) {
    _this->_impl_.target_ = new ::vlsir::circuit::ConnectionTarget(*from._impl_.target_);
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.circuit.Connection)
}

inline void Connection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.portname_){}
    , decltype(_impl_.target_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.portname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.portname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Connection::~Connection() {
  // @@protoc_insertion_point(destructor:vlsir.circuit.Connection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Connection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.portname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.target_;
}

void Connection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Connection::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.circuit.Connection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.portname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.target_ != nullptr) {
    delete _impl_.target_;
  }
  _impl_.target_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Connection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string portname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_portname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.circuit.Connection.portname"));
        } else
          goto handle_unusual;
        continue;
      // .vlsir.circuit.ConnectionTarget target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Connection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.circuit.Connection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string portname = 1;
  if (!this->_internal_portname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_portname().data(), static_cast<int>(this->_internal_portname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.circuit.Connection.portname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_portname(), target);
  }

  // .vlsir.circuit.ConnectionTarget target = 2;
  if (this->_internal_has_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.circuit.Connection)
  return target;
}

size_t Connection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.circuit.Connection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string portname = 1;
  if (!this->_internal_portname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_portname());
  }

  // .vlsir.circuit.ConnectionTarget target = 2;
  if (this->_internal_has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Connection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Connection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Connection::GetClassData() const { return &_class_data_; }


void Connection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Connection*>(&to_msg);
  auto& from = static_cast<const Connection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.circuit.Connection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_portname().empty()) {
    _this->_internal_set_portname(from._internal_portname());
  }
  if (from._internal_has_target()) {
    _this->_internal_mutable_target()->::vlsir::circuit::ConnectionTarget::MergeFrom(
        from._internal_target());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Connection::CopyFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.circuit.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connection::IsInitialized() const {
  return true;
}

void Connection::InternalSwap(Connection* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.portname_, lhs_arena,
      &other->_impl_.portname_, rhs_arena
  );
  swap(_impl_.target_, other->_impl_.target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Connection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_circuit_2eproto_getter, &descriptor_table_circuit_2eproto_once,
      file_level_metadata_circuit_2eproto[6]);
}

// ===================================================================

class Instance::_Internal {
 public:
  static const ::vlsir::utils::Reference& module(const Instance* msg);
};

const ::vlsir::utils::Reference&
Instance::_Internal::module(const Instance* msg) {
  return *msg->_impl_.module_;
}
void Instance::clear_module() {
  if (GetArenaForAllocation() == nullptr && _impl_.module_ != nullptr) {
    delete _impl_.module_;
  }
  _impl_.module_ = nullptr;
}
void Instance::clear_parameters() {
  _impl_.parameters_.Clear();
}
Instance::Instance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.circuit.Instance)
}
Instance::Instance(const Instance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Instance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.parameters_){from._impl_.parameters_}
    , decltype(_impl_.connections_){from._impl_.connections_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.module_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_module()) {
    _this->_impl_.module_ = new ::vlsir::utils::Reference(*from._impl_.module_);
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.circuit.Instance)
}

inline void Instance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.parameters_){arena}
    , decltype(_impl_.connections_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.module_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Instance::~Instance() {
  // @@protoc_insertion_point(destructor:vlsir.circuit.Instance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Instance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parameters_.~RepeatedPtrField();
  _impl_.connections_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.module_;
}

void Instance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Instance::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.circuit.Instance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parameters_.Clear();
  _impl_.connections_.Clear();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.module_ != nullptr) {
    delete _impl_.module_;
  }
  _impl_.module_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Instance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.circuit.Instance.name"));
        } else
          goto handle_unusual;
        continue;
      // .vlsir.utils.Reference module = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_module(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.utils.Param parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.circuit.Connection connections = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_connections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Instance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.circuit.Instance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.circuit.Instance.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .vlsir.utils.Reference module = 2;
  if (this->_internal_has_module()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::module(this),
        _Internal::module(this).GetCachedSize(), target, stream);
  }

  // repeated .vlsir.utils.Param parameters = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_parameters_size()); i < n; i++) {
    const auto& repfield = this->_internal_parameters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .vlsir.circuit.Connection connections = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_connections_size()); i < n; i++) {
    const auto& repfield = this->_internal_connections(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.circuit.Instance)
  return target;
}

size_t Instance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.circuit.Instance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.utils.Param parameters = 3;
  total_size += 1UL * this->_internal_parameters_size();
  for (const auto& msg : this->_impl_.parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vlsir.circuit.Connection connections = 4;
  total_size += 1UL * this->_internal_connections_size();
  for (const auto& msg : this->_impl_.connections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .vlsir.utils.Reference module = 2;
  if (this->_internal_has_module()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.module_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Instance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Instance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Instance::GetClassData() const { return &_class_data_; }


void Instance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Instance*>(&to_msg);
  auto& from = static_cast<const Instance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.circuit.Instance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.parameters_.MergeFrom(from._impl_.parameters_);
  _this->_impl_.connections_.MergeFrom(from._impl_.connections_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_module()) {
    _this->_internal_mutable_module()->::vlsir::utils::Reference::MergeFrom(
        from._internal_module());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Instance::CopyFrom(const Instance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.circuit.Instance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instance::IsInitialized() const {
  return true;
}

void Instance::InternalSwap(Instance* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.parameters_.InternalSwap(&other->_impl_.parameters_);
  _impl_.connections_.InternalSwap(&other->_impl_.connections_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.module_, other->_impl_.module_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Instance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_circuit_2eproto_getter, &descriptor_table_circuit_2eproto_once,
      file_level_metadata_circuit_2eproto[7]);
}

// ===================================================================

class Module::_Internal {
 public:
};

void Module::clear_parameters() {
  _impl_.parameters_.Clear();
}
Module::Module(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.circuit.Module)
}
Module::Module(const Module& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Module* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ports_){from._impl_.ports_}
    , decltype(_impl_.signals_){from._impl_.signals_}
    , decltype(_impl_.instances_){from._impl_.instances_}
    , decltype(_impl_.parameters_){from._impl_.parameters_}
    , decltype(_impl_.literals_){from._impl_.literals_}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.circuit.Module)
}

inline void Module::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ports_){arena}
    , decltype(_impl_.signals_){arena}
    , decltype(_impl_.instances_){arena}
    , decltype(_impl_.parameters_){arena}
    , decltype(_impl_.literals_){arena}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Module::~Module() {
  // @@protoc_insertion_point(destructor:vlsir.circuit.Module)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Module::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ports_.~RepeatedPtrField();
  _impl_.signals_.~RepeatedPtrField();
  _impl_.instances_.~RepeatedPtrField();
  _impl_.parameters_.~RepeatedPtrField();
  _impl_.literals_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void Module::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Module::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.circuit.Module)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ports_.Clear();
  _impl_.signals_.Clear();
  _impl_.instances_.Clear();
  _impl_.parameters_.Clear();
  _impl_.literals_.Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Module::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.circuit.Module.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.circuit.Port ports = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.circuit.Signal signals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.circuit.Instance instances = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.utils.Param parameters = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string literals = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_literals();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "vlsir.circuit.Module.literals"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Module::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.circuit.Module)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.circuit.Module.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .vlsir.circuit.Port ports = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ports_size()); i < n; i++) {
    const auto& repfield = this->_internal_ports(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .vlsir.circuit.Signal signals = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signals_size()); i < n; i++) {
    const auto& repfield = this->_internal_signals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .vlsir.circuit.Instance instances = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instances_size()); i < n; i++) {
    const auto& repfield = this->_internal_instances(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .vlsir.utils.Param parameters = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_parameters_size()); i < n; i++) {
    const auto& repfield = this->_internal_parameters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string literals = 6;
  for (int i = 0, n = this->_internal_literals_size(); i < n; i++) {
    const auto& s = this->_internal_literals(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.circuit.Module.literals");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.circuit.Module)
  return target;
}

size_t Module::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.circuit.Module)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.circuit.Port ports = 2;
  total_size += 1UL * this->_internal_ports_size();
  for (const auto& msg : this->_impl_.ports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vlsir.circuit.Signal signals = 3;
  total_size += 1UL * this->_internal_signals_size();
  for (const auto& msg : this->_impl_.signals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vlsir.circuit.Instance instances = 4;
  total_size += 1UL * this->_internal_instances_size();
  for (const auto& msg : this->_impl_.instances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vlsir.utils.Param parameters = 5;
  total_size += 1UL * this->_internal_parameters_size();
  for (const auto& msg : this->_impl_.parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string literals = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.literals_.size());
  for (int i = 0, n = _impl_.literals_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.literals_.Get(i));
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Module::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Module::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Module::GetClassData() const { return &_class_data_; }


void Module::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Module*>(&to_msg);
  auto& from = static_cast<const Module&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.circuit.Module)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ports_.MergeFrom(from._impl_.ports_);
  _this->_impl_.signals_.MergeFrom(from._impl_.signals_);
  _this->_impl_.instances_.MergeFrom(from._impl_.instances_);
  _this->_impl_.parameters_.MergeFrom(from._impl_.parameters_);
  _this->_impl_.literals_.MergeFrom(from._impl_.literals_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Module::CopyFrom(const Module& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.circuit.Module)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Module::IsInitialized() const {
  return true;
}

void Module::InternalSwap(Module* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ports_.InternalSwap(&other->_impl_.ports_);
  _impl_.signals_.InternalSwap(&other->_impl_.signals_);
  _impl_.instances_.InternalSwap(&other->_impl_.instances_);
  _impl_.parameters_.InternalSwap(&other->_impl_.parameters_);
  _impl_.literals_.InternalSwap(&other->_impl_.literals_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Module::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_circuit_2eproto_getter, &descriptor_table_circuit_2eproto_once,
      file_level_metadata_circuit_2eproto[8]);
}

// ===================================================================

class ExternalModule::_Internal {
 public:
  static const ::vlsir::utils::QualifiedName& name(const ExternalModule* msg);
};

const ::vlsir::utils::QualifiedName&
ExternalModule::_Internal::name(const ExternalModule* msg) {
  return *msg->_impl_.name_;
}
void ExternalModule::clear_name() {
  if (GetArenaForAllocation() == nullptr && _impl_.name_ != nullptr) {
    delete _impl_.name_;
  }
  _impl_.name_ = nullptr;
}
void ExternalModule::clear_parameters() {
  _impl_.parameters_.Clear();
}
ExternalModule::ExternalModule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.circuit.ExternalModule)
}
ExternalModule::ExternalModule(const ExternalModule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExternalModule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ports_){from._impl_.ports_}
    , decltype(_impl_.signals_){from._impl_.signals_}
    , decltype(_impl_.parameters_){from._impl_.parameters_}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.name_){nullptr}
    , decltype(_impl_.spicetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    _this->_impl_.desc_.Set(from._internal_desc(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_name()) {
    _this->_impl_.name_ = new ::vlsir::utils::QualifiedName(*from._impl_.name_);
  }
  _this->_impl_.spicetype_ = from._impl_.spicetype_;
  // @@protoc_insertion_point(copy_constructor:vlsir.circuit.ExternalModule)
}

inline void ExternalModule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ports_){arena}
    , decltype(_impl_.signals_){arena}
    , decltype(_impl_.parameters_){arena}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.name_){nullptr}
    , decltype(_impl_.spicetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExternalModule::~ExternalModule() {
  // @@protoc_insertion_point(destructor:vlsir.circuit.ExternalModule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExternalModule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ports_.~RepeatedPtrField();
  _impl_.signals_.~RepeatedPtrField();
  _impl_.parameters_.~RepeatedPtrField();
  _impl_.desc_.Destroy();
  if (this != internal_default_instance()) delete _impl_.name_;
}

void ExternalModule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExternalModule::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.circuit.ExternalModule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ports_.Clear();
  _impl_.signals_.Clear();
  _impl_.parameters_.Clear();
  _impl_.desc_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.name_ != nullptr) {
    delete _impl_.name_;
  }
  _impl_.name_ = nullptr;
  _impl_.spicetype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExternalModule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vlsir.utils.QualifiedName name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string desc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.circuit.ExternalModule.desc"));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.circuit.Port ports = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.circuit.Signal signals = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.utils.Param parameters = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .vlsir.circuit.SpiceType spicetype = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_spicetype(static_cast<::vlsir::circuit::SpiceType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExternalModule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.circuit.ExternalModule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vlsir.utils.QualifiedName name = 1;
  if (this->_internal_has_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::name(this),
        _Internal::name(this).GetCachedSize(), target, stream);
  }

  // string desc = 2;
  if (!this->_internal_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.circuit.ExternalModule.desc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_desc(), target);
  }

  // repeated .vlsir.circuit.Port ports = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ports_size()); i < n; i++) {
    const auto& repfield = this->_internal_ports(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .vlsir.circuit.Signal signals = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signals_size()); i < n; i++) {
    const auto& repfield = this->_internal_signals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .vlsir.utils.Param parameters = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_parameters_size()); i < n; i++) {
    const auto& repfield = this->_internal_parameters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .vlsir.circuit.SpiceType spicetype = 6;
  if (this->_internal_spicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_spicetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.circuit.ExternalModule)
  return target;
}

size_t ExternalModule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.circuit.ExternalModule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.circuit.Port ports = 3;
  total_size += 1UL * this->_internal_ports_size();
  for (const auto& msg : this->_impl_.ports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vlsir.circuit.Signal signals = 4;
  total_size += 1UL * this->_internal_signals_size();
  for (const auto& msg : this->_impl_.signals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vlsir.utils.Param parameters = 5;
  total_size += 1UL * this->_internal_parameters_size();
  for (const auto& msg : this->_impl_.parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string desc = 2;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // .vlsir.utils.QualifiedName name = 1;
  if (this->_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.name_);
  }

  // .vlsir.circuit.SpiceType spicetype = 6;
  if (this->_internal_spicetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_spicetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExternalModule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExternalModule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExternalModule::GetClassData() const { return &_class_data_; }


void ExternalModule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExternalModule*>(&to_msg);
  auto& from = static_cast<const ExternalModule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.circuit.ExternalModule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ports_.MergeFrom(from._impl_.ports_);
  _this->_impl_.signals_.MergeFrom(from._impl_.signals_);
  _this->_impl_.parameters_.MergeFrom(from._impl_.parameters_);
  if (!from._internal_desc().empty()) {
    _this->_internal_set_desc(from._internal_desc());
  }
  if (from._internal_has_name()) {
    _this->_internal_mutable_name()->::vlsir::utils::QualifiedName::MergeFrom(
        from._internal_name());
  }
  if (from._internal_spicetype() != 0) {
    _this->_internal_set_spicetype(from._internal_spicetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExternalModule::CopyFrom(const ExternalModule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.circuit.ExternalModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalModule::IsInitialized() const {
  return true;
}

void ExternalModule::InternalSwap(ExternalModule* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ports_.InternalSwap(&other->_impl_.ports_);
  _impl_.signals_.InternalSwap(&other->_impl_.signals_);
  _impl_.parameters_.InternalSwap(&other->_impl_.parameters_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_, lhs_arena,
      &other->_impl_.desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExternalModule, _impl_.spicetype_)
      + sizeof(ExternalModule::_impl_.spicetype_)
      - PROTOBUF_FIELD_OFFSET(ExternalModule, _impl_.name_)>(
          reinterpret_cast<char*>(&_impl_.name_),
          reinterpret_cast<char*>(&other->_impl_.name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExternalModule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_circuit_2eproto_getter, &descriptor_table_circuit_2eproto_once,
      file_level_metadata_circuit_2eproto[9]);
}

// ===================================================================

class Interface::_Internal {
 public:
};

Interface::Interface(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.circuit.Interface)
}
Interface::Interface(const Interface& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Interface* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ports_){from._impl_.ports_}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.circuit.Interface)
}

inline void Interface::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ports_){arena}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Interface::~Interface() {
  // @@protoc_insertion_point(destructor:vlsir.circuit.Interface)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Interface::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ports_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void Interface::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Interface::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.circuit.Interface)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ports_.Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Interface::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.circuit.Interface.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.circuit.Port ports = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Interface::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.circuit.Interface)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.circuit.Interface.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .vlsir.circuit.Port ports = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ports_size()); i < n; i++) {
    const auto& repfield = this->_internal_ports(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.circuit.Interface)
  return target;
}

size_t Interface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.circuit.Interface)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.circuit.Port ports = 10;
  total_size += 1UL * this->_internal_ports_size();
  for (const auto& msg : this->_impl_.ports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Interface::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Interface::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Interface::GetClassData() const { return &_class_data_; }


void Interface::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Interface*>(&to_msg);
  auto& from = static_cast<const Interface&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.circuit.Interface)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ports_.MergeFrom(from._impl_.ports_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Interface::CopyFrom(const Interface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.circuit.Interface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interface::IsInitialized() const {
  return true;
}

void Interface::InternalSwap(Interface* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ports_.InternalSwap(&other->_impl_.ports_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Interface::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_circuit_2eproto_getter, &descriptor_table_circuit_2eproto_once,
      file_level_metadata_circuit_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace circuit
}  // namespace vlsir
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vlsir::circuit::Package*
Arena::CreateMaybeMessage< ::vlsir::circuit::Package >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::circuit::Package >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::circuit::Port*
Arena::CreateMaybeMessage< ::vlsir::circuit::Port >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::circuit::Port >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::circuit::Signal*
Arena::CreateMaybeMessage< ::vlsir::circuit::Signal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::circuit::Signal >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::circuit::Slice*
Arena::CreateMaybeMessage< ::vlsir::circuit::Slice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::circuit::Slice >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::circuit::Concat*
Arena::CreateMaybeMessage< ::vlsir::circuit::Concat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::circuit::Concat >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::circuit::ConnectionTarget*
Arena::CreateMaybeMessage< ::vlsir::circuit::ConnectionTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::circuit::ConnectionTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::circuit::Connection*
Arena::CreateMaybeMessage< ::vlsir::circuit::Connection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::circuit::Connection >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::circuit::Instance*
Arena::CreateMaybeMessage< ::vlsir::circuit::Instance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::circuit::Instance >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::circuit::Module*
Arena::CreateMaybeMessage< ::vlsir::circuit::Module >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::circuit::Module >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::circuit::ExternalModule*
Arena::CreateMaybeMessage< ::vlsir::circuit::ExternalModule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::circuit::ExternalModule >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::circuit::Interface*
Arena::CreateMaybeMessage< ::vlsir::circuit::Interface >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::circuit::Interface >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
