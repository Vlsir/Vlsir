// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spice.proto

#include "spice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_circuit_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_circuit_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Package;
}  // namespace protobuf_circuit_2eproto
namespace protobuf_spice_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AcResult_MeasurementsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ComplexNum;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CustomAnalysisResult;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DcResult_MeasurementsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Include;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LibInclude;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LinearSweep;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LogSweep;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Meas;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NoiseResult_IntegratedNoiseEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NoiseResult_MeasurementsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OpResult;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PointSweep;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Save;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SimOptions;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TranInput_IcEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TranResult_MeasurementsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AcInput;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CustomAnalysisInput;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DcResult;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NoiseInput;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_OpInput;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TranResult;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_AcResult;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_DcInput;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_NoiseResult;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TranInput;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Sweep;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Control;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_AnalysisResult;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spice_2eproto ::google::protobuf::internal::SCCInfo<8> scc_info_Analysis;
}  // namespace protobuf_spice_2eproto
namespace protobuf_utils_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_utils_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Param;
}  // namespace protobuf_utils_2eproto
namespace vlsir {
namespace spice {
class SimInputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SimInput>
      _instance;
} _SimInput_default_instance_;
class SimResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SimResult>
      _instance;
} _SimResult_default_instance_;
class SimOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SimOptions>
      _instance;
} _SimOptions_default_instance_;
class AnalysisDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Analysis>
      _instance;
  const ::vlsir::spice::OpInput* op_;
  const ::vlsir::spice::DcInput* dc_;
  const ::vlsir::spice::TranInput* tran_;
  const ::vlsir::spice::AcInput* ac_;
  const ::vlsir::spice::NoiseInput* noise_;
  const ::vlsir::spice::SweepInput* sweep_;
  const ::vlsir::spice::MonteInput* monte_;
  const ::vlsir::spice::CustomAnalysisInput* custom_;
} _Analysis_default_instance_;
class AnalysisResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalysisResult>
      _instance;
  const ::vlsir::spice::OpResult* op_;
  const ::vlsir::spice::DcResult* dc_;
  const ::vlsir::spice::TranResult* tran_;
  const ::vlsir::spice::AcResult* ac_;
  const ::vlsir::spice::NoiseResult* noise_;
  const ::vlsir::spice::SweepResult* sweep_;
  const ::vlsir::spice::MonteResult* monte_;
  const ::vlsir::spice::CustomAnalysisResult* custom_;
} _AnalysisResult_default_instance_;
class OpInputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpInput>
      _instance;
} _OpInput_default_instance_;
class OpResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpResult>
      _instance;
} _OpResult_default_instance_;
class DcInputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DcInput>
      _instance;
} _DcInput_default_instance_;
class DcResult_MeasurementsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DcResult_MeasurementsEntry_DoNotUse>
      _instance;
} _DcResult_MeasurementsEntry_DoNotUse_default_instance_;
class DcResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DcResult>
      _instance;
} _DcResult_default_instance_;
class TranInput_IcEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TranInput_IcEntry_DoNotUse>
      _instance;
} _TranInput_IcEntry_DoNotUse_default_instance_;
class TranInputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TranInput>
      _instance;
} _TranInput_default_instance_;
class TranResult_MeasurementsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TranResult_MeasurementsEntry_DoNotUse>
      _instance;
} _TranResult_MeasurementsEntry_DoNotUse_default_instance_;
class TranResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TranResult>
      _instance;
} _TranResult_default_instance_;
class ComplexNumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ComplexNum>
      _instance;
} _ComplexNum_default_instance_;
class AcInputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcInput>
      _instance;
} _AcInput_default_instance_;
class AcResult_MeasurementsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcResult_MeasurementsEntry_DoNotUse>
      _instance;
} _AcResult_MeasurementsEntry_DoNotUse_default_instance_;
class AcResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcResult>
      _instance;
} _AcResult_default_instance_;
class NoiseInputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NoiseInput>
      _instance;
} _NoiseInput_default_instance_;
class NoiseResult_IntegratedNoiseEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NoiseResult_IntegratedNoiseEntry_DoNotUse>
      _instance;
} _NoiseResult_IntegratedNoiseEntry_DoNotUse_default_instance_;
class NoiseResult_MeasurementsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NoiseResult_MeasurementsEntry_DoNotUse>
      _instance;
} _NoiseResult_MeasurementsEntry_DoNotUse_default_instance_;
class NoiseResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NoiseResult>
      _instance;
} _NoiseResult_default_instance_;
class SweepInputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SweepInput>
      _instance;
} _SweepInput_default_instance_;
class SweepResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SweepResult>
      _instance;
} _SweepResult_default_instance_;
class MonteInputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MonteInput>
      _instance;
} _MonteInput_default_instance_;
class MonteResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MonteResult>
      _instance;
} _MonteResult_default_instance_;
class CustomAnalysisInputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CustomAnalysisInput>
      _instance;
} _CustomAnalysisInput_default_instance_;
class CustomAnalysisResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CustomAnalysisResult>
      _instance;
} _CustomAnalysisResult_default_instance_;
class SweepDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sweep>
      _instance;
  const ::vlsir::spice::LinearSweep* linear_;
  const ::vlsir::spice::LogSweep* log_;
  const ::vlsir::spice::PointSweep* points_;
} _Sweep_default_instance_;
class LinearSweepDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LinearSweep>
      _instance;
} _LinearSweep_default_instance_;
class LogSweepDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogSweep>
      _instance;
} _LogSweep_default_instance_;
class PointSweepDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PointSweep>
      _instance;
} _PointSweep_default_instance_;
class ControlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Control>
      _instance;
  const ::vlsir::spice::Include* include_;
  const ::vlsir::spice::LibInclude* lib_;
  const ::vlsir::spice::Save* save_;
  const ::vlsir::spice::Meas* meas_;
  const ::vlsir::utils::Param* param_;
  ::google::protobuf::internal::ArenaStringPtr literal_;
} _Control_default_instance_;
class SaveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Save>
      _instance;
  int mode_;
  ::google::protobuf::internal::ArenaStringPtr signal_;
} _Save_default_instance_;
class IncludeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Include>
      _instance;
} _Include_default_instance_;
class LibIncludeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LibInclude>
      _instance;
} _LibInclude_default_instance_;
class MeasDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Meas>
      _instance;
} _Meas_default_instance_;
class SignalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Signal>
      _instance;
} _Signal_default_instance_;
}  // namespace spice
}  // namespace vlsir
namespace protobuf_spice_2eproto {
static void InitDefaultsSimInput() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_SimInput_default_instance_;
    new (ptr) ::vlsir::spice::SimInput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::SimInput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_SimInput =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsSimInput}, {
      &protobuf_circuit_2eproto::scc_info_Package.base,
      &protobuf_spice_2eproto::scc_info_SimOptions.base,
      &protobuf_spice_2eproto::scc_info_Analysis.base,
      &protobuf_spice_2eproto::scc_info_Control.base,}};

static void InitDefaultsSimResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_SimResult_default_instance_;
    new (ptr) ::vlsir::spice::SimResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::SimResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SimResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSimResult}, {
      &protobuf_spice_2eproto::scc_info_AnalysisResult.base,}};

static void InitDefaultsSimOptions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_SimOptions_default_instance_;
    new (ptr) ::vlsir::spice::SimOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::SimOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SimOptions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSimOptions}, {}};

static void InitDefaultsAnalysis() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_Analysis_default_instance_;
    new (ptr) ::vlsir::spice::Analysis();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::vlsir::spice::_SweepInput_default_instance_;
    new (ptr) ::vlsir::spice::SweepInput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::vlsir::spice::_MonteInput_default_instance_;
    new (ptr) ::vlsir::spice::MonteInput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::Analysis::InitAsDefaultInstance();
  ::vlsir::spice::SweepInput::InitAsDefaultInstance();
  ::vlsir::spice::MonteInput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<8> scc_info_Analysis =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsAnalysis}, {
      &protobuf_spice_2eproto::scc_info_OpInput.base,
      &protobuf_spice_2eproto::scc_info_DcInput.base,
      &protobuf_spice_2eproto::scc_info_TranInput.base,
      &protobuf_spice_2eproto::scc_info_AcInput.base,
      &protobuf_spice_2eproto::scc_info_NoiseInput.base,
      &protobuf_spice_2eproto::scc_info_CustomAnalysisInput.base,
      &protobuf_spice_2eproto::scc_info_Control.base,
      &protobuf_spice_2eproto::scc_info_Sweep.base,}};

static void InitDefaultsAnalysisResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_AnalysisResult_default_instance_;
    new (ptr) ::vlsir::spice::AnalysisResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::vlsir::spice::_SweepResult_default_instance_;
    new (ptr) ::vlsir::spice::SweepResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::vlsir::spice::_MonteResult_default_instance_;
    new (ptr) ::vlsir::spice::MonteResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::AnalysisResult::InitAsDefaultInstance();
  ::vlsir::spice::SweepResult::InitAsDefaultInstance();
  ::vlsir::spice::MonteResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_AnalysisResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsAnalysisResult}, {
      &protobuf_spice_2eproto::scc_info_OpResult.base,
      &protobuf_spice_2eproto::scc_info_DcResult.base,
      &protobuf_spice_2eproto::scc_info_TranResult.base,
      &protobuf_spice_2eproto::scc_info_AcResult.base,
      &protobuf_spice_2eproto::scc_info_NoiseResult.base,
      &protobuf_spice_2eproto::scc_info_CustomAnalysisResult.base,
      &protobuf_spice_2eproto::scc_info_Sweep.base,}};

static void InitDefaultsOpInput() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_OpInput_default_instance_;
    new (ptr) ::vlsir::spice::OpInput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::OpInput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OpInput =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOpInput}, {
      &protobuf_spice_2eproto::scc_info_Control.base,}};

static void InitDefaultsOpResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_OpResult_default_instance_;
    new (ptr) ::vlsir::spice::OpResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::OpResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OpResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOpResult}, {}};

static void InitDefaultsDcInput() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_DcInput_default_instance_;
    new (ptr) ::vlsir::spice::DcInput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::DcInput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DcInput =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDcInput}, {
      &protobuf_spice_2eproto::scc_info_Sweep.base,
      &protobuf_spice_2eproto::scc_info_Control.base,}};

static void InitDefaultsDcResult_MeasurementsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_DcResult_MeasurementsEntry_DoNotUse_default_instance_;
    new (ptr) ::vlsir::spice::DcResult_MeasurementsEntry_DoNotUse();
  }
  ::vlsir::spice::DcResult_MeasurementsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DcResult_MeasurementsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDcResult_MeasurementsEntry_DoNotUse}, {}};

static void InitDefaultsDcResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_DcResult_default_instance_;
    new (ptr) ::vlsir::spice::DcResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::DcResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DcResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDcResult}, {
      &protobuf_spice_2eproto::scc_info_DcResult_MeasurementsEntry_DoNotUse.base,}};

static void InitDefaultsTranInput_IcEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_TranInput_IcEntry_DoNotUse_default_instance_;
    new (ptr) ::vlsir::spice::TranInput_IcEntry_DoNotUse();
  }
  ::vlsir::spice::TranInput_IcEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TranInput_IcEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTranInput_IcEntry_DoNotUse}, {}};

static void InitDefaultsTranInput() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_TranInput_default_instance_;
    new (ptr) ::vlsir::spice::TranInput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::TranInput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TranInput =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTranInput}, {
      &protobuf_spice_2eproto::scc_info_TranInput_IcEntry_DoNotUse.base,
      &protobuf_spice_2eproto::scc_info_Control.base,}};

static void InitDefaultsTranResult_MeasurementsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_TranResult_MeasurementsEntry_DoNotUse_default_instance_;
    new (ptr) ::vlsir::spice::TranResult_MeasurementsEntry_DoNotUse();
  }
  ::vlsir::spice::TranResult_MeasurementsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TranResult_MeasurementsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTranResult_MeasurementsEntry_DoNotUse}, {}};

static void InitDefaultsTranResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_TranResult_default_instance_;
    new (ptr) ::vlsir::spice::TranResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::TranResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TranResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTranResult}, {
      &protobuf_spice_2eproto::scc_info_TranResult_MeasurementsEntry_DoNotUse.base,}};

static void InitDefaultsComplexNum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_ComplexNum_default_instance_;
    new (ptr) ::vlsir::spice::ComplexNum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::ComplexNum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ComplexNum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsComplexNum}, {}};

static void InitDefaultsAcInput() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_AcInput_default_instance_;
    new (ptr) ::vlsir::spice::AcInput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::AcInput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AcInput =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAcInput}, {
      &protobuf_spice_2eproto::scc_info_Control.base,}};

static void InitDefaultsAcResult_MeasurementsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_AcResult_MeasurementsEntry_DoNotUse_default_instance_;
    new (ptr) ::vlsir::spice::AcResult_MeasurementsEntry_DoNotUse();
  }
  ::vlsir::spice::AcResult_MeasurementsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AcResult_MeasurementsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAcResult_MeasurementsEntry_DoNotUse}, {}};

static void InitDefaultsAcResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_AcResult_default_instance_;
    new (ptr) ::vlsir::spice::AcResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::AcResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AcResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAcResult}, {
      &protobuf_spice_2eproto::scc_info_ComplexNum.base,
      &protobuf_spice_2eproto::scc_info_AcResult_MeasurementsEntry_DoNotUse.base,}};

static void InitDefaultsNoiseInput() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_NoiseInput_default_instance_;
    new (ptr) ::vlsir::spice::NoiseInput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::NoiseInput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NoiseInput =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNoiseInput}, {
      &protobuf_spice_2eproto::scc_info_Control.base,}};

static void InitDefaultsNoiseResult_IntegratedNoiseEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_NoiseResult_IntegratedNoiseEntry_DoNotUse_default_instance_;
    new (ptr) ::vlsir::spice::NoiseResult_IntegratedNoiseEntry_DoNotUse();
  }
  ::vlsir::spice::NoiseResult_IntegratedNoiseEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NoiseResult_IntegratedNoiseEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNoiseResult_IntegratedNoiseEntry_DoNotUse}, {}};

static void InitDefaultsNoiseResult_MeasurementsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_NoiseResult_MeasurementsEntry_DoNotUse_default_instance_;
    new (ptr) ::vlsir::spice::NoiseResult_MeasurementsEntry_DoNotUse();
  }
  ::vlsir::spice::NoiseResult_MeasurementsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NoiseResult_MeasurementsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNoiseResult_MeasurementsEntry_DoNotUse}, {}};

static void InitDefaultsNoiseResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_NoiseResult_default_instance_;
    new (ptr) ::vlsir::spice::NoiseResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::NoiseResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_NoiseResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsNoiseResult}, {
      &protobuf_spice_2eproto::scc_info_NoiseResult_IntegratedNoiseEntry_DoNotUse.base,
      &protobuf_spice_2eproto::scc_info_NoiseResult_MeasurementsEntry_DoNotUse.base,}};

static void InitDefaultsCustomAnalysisInput() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_CustomAnalysisInput_default_instance_;
    new (ptr) ::vlsir::spice::CustomAnalysisInput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::CustomAnalysisInput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CustomAnalysisInput =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCustomAnalysisInput}, {
      &protobuf_spice_2eproto::scc_info_Control.base,}};

static void InitDefaultsCustomAnalysisResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_CustomAnalysisResult_default_instance_;
    new (ptr) ::vlsir::spice::CustomAnalysisResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::CustomAnalysisResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CustomAnalysisResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCustomAnalysisResult}, {}};

static void InitDefaultsSweep() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_Sweep_default_instance_;
    new (ptr) ::vlsir::spice::Sweep();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::Sweep::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Sweep =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsSweep}, {
      &protobuf_spice_2eproto::scc_info_LinearSweep.base,
      &protobuf_spice_2eproto::scc_info_LogSweep.base,
      &protobuf_spice_2eproto::scc_info_PointSweep.base,}};

static void InitDefaultsLinearSweep() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_LinearSweep_default_instance_;
    new (ptr) ::vlsir::spice::LinearSweep();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::LinearSweep::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LinearSweep =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLinearSweep}, {}};

static void InitDefaultsLogSweep() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_LogSweep_default_instance_;
    new (ptr) ::vlsir::spice::LogSweep();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::LogSweep::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LogSweep =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLogSweep}, {}};

static void InitDefaultsPointSweep() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_PointSweep_default_instance_;
    new (ptr) ::vlsir::spice::PointSweep();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::PointSweep::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PointSweep =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPointSweep}, {}};

static void InitDefaultsControl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_Control_default_instance_;
    new (ptr) ::vlsir::spice::Control();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::Control::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_Control =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsControl}, {
      &protobuf_spice_2eproto::scc_info_Include.base,
      &protobuf_spice_2eproto::scc_info_LibInclude.base,
      &protobuf_spice_2eproto::scc_info_Save.base,
      &protobuf_spice_2eproto::scc_info_Meas.base,
      &protobuf_utils_2eproto::scc_info_Param.base,}};

static void InitDefaultsSave() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_Save_default_instance_;
    new (ptr) ::vlsir::spice::Save();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::Save::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Save =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSave}, {}};

static void InitDefaultsInclude() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_Include_default_instance_;
    new (ptr) ::vlsir::spice::Include();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::Include::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Include =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInclude}, {}};

static void InitDefaultsLibInclude() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_LibInclude_default_instance_;
    new (ptr) ::vlsir::spice::LibInclude();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::LibInclude::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LibInclude =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLibInclude}, {}};

static void InitDefaultsMeas() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_Meas_default_instance_;
    new (ptr) ::vlsir::spice::Meas();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::Meas::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Meas =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMeas}, {}};

static void InitDefaultsSignal() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_Signal_default_instance_;
    new (ptr) ::vlsir::spice::Signal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::Signal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Signal =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSignal}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SimInput.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SimResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SimOptions.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Analysis.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnalysisResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OpInput.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OpResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DcInput.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DcResult_MeasurementsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DcResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TranInput_IcEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TranInput.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TranResult_MeasurementsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TranResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ComplexNum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AcInput.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AcResult_MeasurementsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AcResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NoiseInput.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NoiseResult_IntegratedNoiseEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NoiseResult_MeasurementsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NoiseResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CustomAnalysisInput.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CustomAnalysisResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Sweep.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LinearSweep.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LogSweep.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PointSweep.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Control.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Save.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Include.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LibInclude.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Meas.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Signal.base);
}

::google::protobuf::Metadata file_level_metadata[38];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::SimInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::SimInput, pkg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::SimInput, top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::SimInput, opts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::SimInput, an_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::SimInput, ctrls_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::SimResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::SimResult, an_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::SimOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::SimOptions, temp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::SimOptions, tnom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::SimOptions, gmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::SimOptions, iabstol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::SimOptions, reltol_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::Analysis, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::Analysis, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::vlsir::spice::AnalysisDefaultTypeInternal, op_),
  offsetof(::vlsir::spice::AnalysisDefaultTypeInternal, dc_),
  offsetof(::vlsir::spice::AnalysisDefaultTypeInternal, tran_),
  offsetof(::vlsir::spice::AnalysisDefaultTypeInternal, ac_),
  offsetof(::vlsir::spice::AnalysisDefaultTypeInternal, noise_),
  offsetof(::vlsir::spice::AnalysisDefaultTypeInternal, sweep_),
  offsetof(::vlsir::spice::AnalysisDefaultTypeInternal, monte_),
  offsetof(::vlsir::spice::AnalysisDefaultTypeInternal, custom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::Analysis, an_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::AnalysisResult, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::AnalysisResult, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::vlsir::spice::AnalysisResultDefaultTypeInternal, op_),
  offsetof(::vlsir::spice::AnalysisResultDefaultTypeInternal, dc_),
  offsetof(::vlsir::spice::AnalysisResultDefaultTypeInternal, tran_),
  offsetof(::vlsir::spice::AnalysisResultDefaultTypeInternal, ac_),
  offsetof(::vlsir::spice::AnalysisResultDefaultTypeInternal, noise_),
  offsetof(::vlsir::spice::AnalysisResultDefaultTypeInternal, sweep_),
  offsetof(::vlsir::spice::AnalysisResultDefaultTypeInternal, monte_),
  offsetof(::vlsir::spice::AnalysisResultDefaultTypeInternal, custom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::AnalysisResult, an_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::OpInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::OpInput, analysis_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::OpInput, ctrls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::OpInput, raw_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::OpResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::OpResult, analysis_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::OpResult, signals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::OpResult, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::DcInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::DcInput, analysis_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::DcInput, indep_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::DcInput, sweep_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::DcInput, ctrls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::DcInput, raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::DcResult_MeasurementsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::DcResult_MeasurementsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::DcResult_MeasurementsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::DcResult_MeasurementsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::DcResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::DcResult, analysis_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::DcResult, indep_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::DcResult, signals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::DcResult, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::DcResult, measurements_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::TranInput_IcEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::TranInput_IcEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::TranInput_IcEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::TranInput_IcEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::TranInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::TranInput, analysis_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::TranInput, tstop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::TranInput, tstep_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::TranInput, ic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::TranInput, ctrls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::TranInput, raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::TranResult_MeasurementsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::TranResult_MeasurementsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::TranResult_MeasurementsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::TranResult_MeasurementsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::TranResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::TranResult, analysis_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::TranResult, signals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::TranResult, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::TranResult, measurements_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::ComplexNum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::ComplexNum, re_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::ComplexNum, im_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::AcInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::AcInput, analysis_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::AcInput, fstart_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::AcInput, fstop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::AcInput, npts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::AcInput, ctrls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::AcInput, raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::AcResult_MeasurementsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::AcResult_MeasurementsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::AcResult_MeasurementsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::AcResult_MeasurementsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::AcResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::AcResult, analysis_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::AcResult, freq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::AcResult, signals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::AcResult, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::AcResult, measurements_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::NoiseInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::NoiseInput, analysis_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::NoiseInput, output_p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::NoiseInput, output_n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::NoiseInput, input_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::NoiseInput, fstart_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::NoiseInput, fstop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::NoiseInput, npts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::NoiseInput, ctrls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::NoiseInput, raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::NoiseResult_IntegratedNoiseEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::NoiseResult_IntegratedNoiseEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::NoiseResult_IntegratedNoiseEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::NoiseResult_IntegratedNoiseEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::NoiseResult_MeasurementsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::NoiseResult_MeasurementsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::NoiseResult_MeasurementsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::NoiseResult_MeasurementsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::NoiseResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::NoiseResult, analysis_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::NoiseResult, signals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::NoiseResult, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::NoiseResult, integrated_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::NoiseResult, measurements_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::SweepInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::SweepInput, analysis_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::SweepInput, variable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::SweepInput, sweep_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::SweepInput, an_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::SweepInput, ctrls_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::SweepResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::SweepResult, analysis_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::SweepResult, variable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::SweepResult, sweep_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::SweepResult, an_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::MonteInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::MonteInput, analysis_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::MonteInput, npts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::MonteInput, seed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::MonteInput, an_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::MonteInput, ctrls_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::MonteResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::MonteResult, analysis_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::MonteResult, variable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::MonteResult, sweep_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::MonteResult, an_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::CustomAnalysisInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::CustomAnalysisInput, analysis_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::CustomAnalysisInput, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::CustomAnalysisInput, ctrls_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::CustomAnalysisResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::Sweep, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::Sweep, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::vlsir::spice::SweepDefaultTypeInternal, linear_),
  offsetof(::vlsir::spice::SweepDefaultTypeInternal, log_),
  offsetof(::vlsir::spice::SweepDefaultTypeInternal, points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::Sweep, tp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::LinearSweep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::LinearSweep, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::LinearSweep, stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::LinearSweep, step_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::LogSweep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::LogSweep, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::LogSweep, stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::LogSweep, npts_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::PointSweep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::PointSweep, points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::PointSweep, stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::PointSweep, npts_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::Control, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::Control, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::vlsir::spice::ControlDefaultTypeInternal, include_),
  offsetof(::vlsir::spice::ControlDefaultTypeInternal, lib_),
  offsetof(::vlsir::spice::ControlDefaultTypeInternal, save_),
  offsetof(::vlsir::spice::ControlDefaultTypeInternal, meas_),
  offsetof(::vlsir::spice::ControlDefaultTypeInternal, param_),
  offsetof(::vlsir::spice::ControlDefaultTypeInternal, literal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::Control, ctrl_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::Save, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::Save, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::vlsir::spice::SaveDefaultTypeInternal, mode_),
  offsetof(::vlsir::spice::SaveDefaultTypeInternal, signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::Save, save_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::Include, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::Include, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::LibInclude, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::LibInclude, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::LibInclude, section_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::Meas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::Meas, analysis_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::Meas, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::Meas, expr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::Signal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::Signal, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vlsir::spice::Signal, quantity_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vlsir::spice::SimInput)},
  { 10, -1, sizeof(::vlsir::spice::SimResult)},
  { 16, -1, sizeof(::vlsir::spice::SimOptions)},
  { 26, -1, sizeof(::vlsir::spice::Analysis)},
  { 40, -1, sizeof(::vlsir::spice::AnalysisResult)},
  { 54, -1, sizeof(::vlsir::spice::OpInput)},
  { 62, -1, sizeof(::vlsir::spice::OpResult)},
  { 70, -1, sizeof(::vlsir::spice::DcInput)},
  { 80, 87, sizeof(::vlsir::spice::DcResult_MeasurementsEntry_DoNotUse)},
  { 89, -1, sizeof(::vlsir::spice::DcResult)},
  { 99, 106, sizeof(::vlsir::spice::TranInput_IcEntry_DoNotUse)},
  { 108, -1, sizeof(::vlsir::spice::TranInput)},
  { 119, 126, sizeof(::vlsir::spice::TranResult_MeasurementsEntry_DoNotUse)},
  { 128, -1, sizeof(::vlsir::spice::TranResult)},
  { 137, -1, sizeof(::vlsir::spice::ComplexNum)},
  { 144, -1, sizeof(::vlsir::spice::AcInput)},
  { 155, 162, sizeof(::vlsir::spice::AcResult_MeasurementsEntry_DoNotUse)},
  { 164, -1, sizeof(::vlsir::spice::AcResult)},
  { 174, -1, sizeof(::vlsir::spice::NoiseInput)},
  { 188, 195, sizeof(::vlsir::spice::NoiseResult_IntegratedNoiseEntry_DoNotUse)},
  { 197, 204, sizeof(::vlsir::spice::NoiseResult_MeasurementsEntry_DoNotUse)},
  { 206, -1, sizeof(::vlsir::spice::NoiseResult)},
  { 216, -1, sizeof(::vlsir::spice::SweepInput)},
  { 226, -1, sizeof(::vlsir::spice::SweepResult)},
  { 235, -1, sizeof(::vlsir::spice::MonteInput)},
  { 245, -1, sizeof(::vlsir::spice::MonteResult)},
  { 254, -1, sizeof(::vlsir::spice::CustomAnalysisInput)},
  { 262, -1, sizeof(::vlsir::spice::CustomAnalysisResult)},
  { 267, -1, sizeof(::vlsir::spice::Sweep)},
  { 276, -1, sizeof(::vlsir::spice::LinearSweep)},
  { 284, -1, sizeof(::vlsir::spice::LogSweep)},
  { 292, -1, sizeof(::vlsir::spice::PointSweep)},
  { 300, -1, sizeof(::vlsir::spice::Control)},
  { 312, -1, sizeof(::vlsir::spice::Save)},
  { 320, -1, sizeof(::vlsir::spice::Include)},
  { 326, -1, sizeof(::vlsir::spice::LibInclude)},
  { 333, -1, sizeof(::vlsir::spice::Meas)},
  { 341, -1, sizeof(::vlsir::spice::Signal)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_SimInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_SimResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_SimOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_Analysis_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_AnalysisResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_OpInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_OpResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_DcInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_DcResult_MeasurementsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_DcResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_TranInput_IcEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_TranInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_TranResult_MeasurementsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_TranResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_ComplexNum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_AcInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_AcResult_MeasurementsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_AcResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_NoiseInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_NoiseResult_IntegratedNoiseEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_NoiseResult_MeasurementsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_NoiseResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_SweepInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_SweepResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_MonteInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_MonteResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_CustomAnalysisInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_CustomAnalysisResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_Sweep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_LinearSweep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_LogSweep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_PointSweep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_Control_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_Save_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_Include_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_LibInclude_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_Meas_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vlsir::spice::_Signal_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "spice.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 38);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013spice.proto\022\013vlsir.spice\032\013utils.proto\032"
      "\rcircuit.proto\"\253\001\n\010SimInput\022#\n\003pkg\030\001 \001(\013"
      "2\026.vlsir.circuit.Package\022\013\n\003top\030\002 \001(\t\022%\n"
      "\004opts\030\n \003(\0132\027.vlsir.spice.SimOptions\022!\n\002"
      "an\030\013 \003(\0132\025.vlsir.spice.Analysis\022#\n\005ctrls"
      "\030\014 \003(\0132\024.vlsir.spice.Control\"4\n\tSimResul"
      "t\022\'\n\002an\030\001 \003(\0132\033.vlsir.spice.AnalysisResu"
      "lt\"W\n\nSimOptions\022\014\n\004temp\030\001 \001(\001\022\014\n\004tnom\030\002"
      " \001(\001\022\014\n\004gmin\030\003 \001(\001\022\017\n\007iabstol\030\004 \001(\001\022\016\n\006r"
      "eltol\030\005 \001(\001\"\326\002\n\010Analysis\022\"\n\002op\030\001 \001(\0132\024.v"
      "lsir.spice.OpInputH\000\022\"\n\002dc\030\002 \001(\0132\024.vlsir"
      ".spice.DcInputH\000\022&\n\004tran\030\003 \001(\0132\026.vlsir.s"
      "pice.TranInputH\000\022\"\n\002ac\030\004 \001(\0132\024.vlsir.spi"
      "ce.AcInputH\000\022(\n\005noise\030\005 \001(\0132\027.vlsir.spic"
      "e.NoiseInputH\000\022(\n\005sweep\030\n \001(\0132\027.vlsir.sp"
      "ice.SweepInputH\000\022(\n\005monte\030\013 \001(\0132\027.vlsir."
      "spice.MonteInputH\000\0222\n\006custom\030\024 \001(\0132 .vls"
      "ir.spice.CustomAnalysisInputH\000B\004\n\002an\"\344\002\n"
      "\016AnalysisResult\022#\n\002op\030\001 \001(\0132\025.vlsir.spic"
      "e.OpResultH\000\022#\n\002dc\030\002 \001(\0132\025.vlsir.spice.D"
      "cResultH\000\022\'\n\004tran\030\003 \001(\0132\027.vlsir.spice.Tr"
      "anResultH\000\022#\n\002ac\030\004 \001(\0132\025.vlsir.spice.AcR"
      "esultH\000\022)\n\005noise\030\005 \001(\0132\030.vlsir.spice.Noi"
      "seResultH\000\022)\n\005sweep\030\n \001(\0132\030.vlsir.spice."
      "SweepResultH\000\022)\n\005monte\030\013 \001(\0132\030.vlsir.spi"
      "ce.MonteResultH\000\0223\n\006custom\030\024 \001(\0132!.vlsir"
      ".spice.CustomAnalysisResultH\000B\004\n\002an\"R\n\007O"
      "pInput\022\025\n\ranalysis_name\030\001 \001(\t\022#\n\005ctrls\030\005"
      " \003(\0132\024.vlsir.spice.Control\022\013\n\003raw\030\006 \001(\t\""
      "L\n\010OpResult\022\025\n\ranalysis_name\030\001 \001(\t\022\017\n\007si"
      "gnals\030\003 \003(\t\022\014\n\004data\030\005 \003(\001J\004\010\002\020\003J\004\010\004\020\005\"\211\001"
      "\n\007DcInput\022\025\n\ranalysis_name\030\001 \001(\t\022\022\n\ninde"
      "p_name\030\002 \001(\t\022!\n\005sweep\030\003 \001(\0132\022.vlsir.spic"
      "e.Sweep\022#\n\005ctrls\030\005 \003(\0132\024.vlsir.spice.Con"
      "trol\022\013\n\003raw\030\006 \001(\t\"\316\001\n\010DcResult\022\025\n\ranalys"
      "is_name\030\001 \001(\t\022\022\n\nindep_name\030\002 \001(\t\022\017\n\007sig"
      "nals\030\003 \003(\t\022\014\n\004data\030\005 \003(\001\022=\n\014measurements"
      "\030\n \003(\0132\'.vlsir.spice.DcResult.Measuremen"
      "tsEntry\0323\n\021MeasurementsEntry\022\013\n\003key\030\001 \001("
      "\t\022\r\n\005value\030\002 \001(\001:\0028\001J\004\010\004\020\005\"\311\001\n\tTranInput"
      "\022\025\n\ranalysis_name\030\001 \001(\t\022\r\n\005tstop\030\002 \001(\001\022\r"
      "\n\005tstep\030\003 \001(\001\022*\n\002ic\030\004 \003(\0132\036.vlsir.spice."
      "TranInput.IcEntry\022#\n\005ctrls\030\005 \003(\0132\024.vlsir"
      ".spice.Control\022\013\n\003raw\030\006 \001(\t\032)\n\007IcEntry\022\013"
      "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\"\304\001\n\nTranR"
      "esult\022\025\n\ranalysis_name\030\001 \001(\t\022\017\n\007signals\030"
      "\003 \003(\t\022\014\n\004data\030\005 \003(\001\022\?\n\014measurements\030\n \003("
      "\0132).vlsir.spice.TranResult.MeasurementsE"
      "ntry\0323\n\021MeasurementsEntry\022\013\n\003key\030\001 \001(\t\022\r"
      "\n\005value\030\002 \001(\001:\0028\001J\004\010\002\020\003J\004\010\004\020\005\"$\n\nComplex"
      "Num\022\n\n\002re\030\001 \001(\001\022\n\n\002im\030\002 \001(\001\"\177\n\007AcInput\022\025"
      "\n\ranalysis_name\030\001 \001(\t\022\016\n\006fstart\030\002 \001(\001\022\r\n"
      "\005fstop\030\003 \001(\001\022\014\n\004npts\030\004 \001(\004\022#\n\005ctrls\030\005 \003("
      "\0132\024.vlsir.spice.Control\022\013\n\003raw\030\006 \001(\t\"\341\001\n"
      "\010AcResult\022\025\n\ranalysis_name\030\001 \001(\t\022\014\n\004freq"
      "\030\002 \003(\001\022\017\n\007signals\030\003 \003(\t\022%\n\004data\030\005 \003(\0132\027."
      "vlsir.spice.ComplexNum\022=\n\014measurements\030\n"
      " \003(\0132\'.vlsir.spice.AcResult.Measurements"
      "Entry\0323\n\021MeasurementsEntry\022\013\n\003key\030\001 \001(\t\022"
      "\r\n\005value\030\002 \001(\001:\0028\001J\004\010\004\020\005\"\274\001\n\nNoiseInput\022"
      "\025\n\ranalysis_name\030\001 \001(\t\022\020\n\010output_p\030\002 \001(\t"
      "\022\020\n\010output_n\030\003 \001(\t\022\024\n\014input_source\030\004 \001(\t"
      "\022\016\n\006fstart\030\n \001(\001\022\r\n\005fstop\030\013 \001(\001\022\014\n\004npts\030"
      "\014 \001(\004\022#\n\005ctrls\030\024 \003(\0132\024.vlsir.spice.Contr"
      "ol\022\013\n\003raw\030\006 \001(\t\"\307\002\n\013NoiseResult\022\025\n\ranaly"
      "sis_name\030\001 \001(\t\022\017\n\007signals\030\003 \003(\t\022\014\n\004data\030"
      "\005 \003(\001\022G\n\020integrated_noise\030\n \003(\0132-.vlsir."
      "spice.NoiseResult.IntegratedNoiseEntry\022@"
      "\n\014measurements\030\013 \003(\0132*.vlsir.spice.Noise"
      "Result.MeasurementsEntry\0326\n\024IntegratedNo"
      "iseEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001"
      "\0323\n\021MeasurementsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
      "lue\030\002 \001(\001:\0028\001J\004\010\002\020\003J\004\010\004\020\005\"\240\001\n\nSweepInput"
      "\022\025\n\ranalysis_name\030\001 \001(\t\022\020\n\010variable\030\002 \001("
      "\t\022!\n\005sweep\030\003 \001(\0132\022.vlsir.spice.Sweep\022!\n\002"
      "an\030\004 \003(\0132\025.vlsir.spice.Analysis\022#\n\005ctrls"
      "\030\005 \003(\0132\024.vlsir.spice.Control\"\202\001\n\013SweepRe"
      "sult\022\025\n\ranalysis_name\030\001 \001(\t\022\020\n\010variable\030"
      "\002 \001(\t\022!\n\005sweep\030\003 \001(\0132\022.vlsir.spice.Sweep"
      "\022\'\n\002an\030\004 \003(\0132\033.vlsir.spice.AnalysisResul"
      "t\"\207\001\n\nMonteInput\022\025\n\ranalysis_name\030\001 \001(\t\022"
      "\014\n\004npts\030\002 \001(\003\022\014\n\004seed\030\003 \001(\003\022!\n\002an\030\004 \003(\0132"
      "\025.vlsir.spice.Analysis\022#\n\005ctrls\030\005 \003(\0132\024."
      "vlsir.spice.Control\"\202\001\n\013MonteResult\022\025\n\ra"
      "nalysis_name\030\001 \001(\t\022\020\n\010variable\030\002 \001(\t\022!\n\005"
      "sweep\030\003 \001(\0132\022.vlsir.spice.Sweep\022\'\n\002an\030\004 "
      "\003(\0132\033.vlsir.spice.AnalysisResult\"^\n\023Cust"
      "omAnalysisInput\022\025\n\ranalysis_name\030\001 \001(\t\022\013"
      "\n\003cmd\030\002 \001(\t\022#\n\005ctrls\030\005 \003(\0132\024.vlsir.spice"
      ".Control\"\026\n\024CustomAnalysisResult\"\212\001\n\005Swe"
      "ep\022*\n\006linear\030\001 \001(\0132\030.vlsir.spice.LinearS"
      "weepH\000\022$\n\003log\030\002 \001(\0132\025.vlsir.spice.LogSwe"
      "epH\000\022)\n\006points\030\003 \001(\0132\027.vlsir.spice.Point"
      "SweepH\000B\004\n\002tp\"8\n\013LinearSweep\022\r\n\005start\030\001 "
      "\001(\001\022\014\n\004stop\030\002 \001(\001\022\014\n\004step\030\003 \001(\001\"5\n\010LogSw"
      "eep\022\r\n\005start\030\001 \001(\001\022\014\n\004stop\030\002 \001(\001\022\014\n\004npts"
      "\030\003 \001(\001\"8\n\nPointSweep\022\016\n\006points\030\001 \003(\001\022\014\n\004"
      "stop\030\002 \001(\001\022\014\n\004npts\030\003 \001(\001\"\340\001\n\007Control\022\'\n\007"
      "include\030\001 \001(\0132\024.vlsir.spice.IncludeH\000\022&\n"
      "\003lib\030\002 \001(\0132\027.vlsir.spice.LibIncludeH\000\022!\n"
      "\004save\030\005 \001(\0132\021.vlsir.spice.SaveH\000\022!\n\004meas"
      "\030\006 \001(\0132\021.vlsir.spice.MeasH\000\022#\n\005param\030\007 \001"
      "(\0132\022.vlsir.utils.ParamH\000\022\021\n\007literal\030\n \001("
      "\tH\000B\006\n\004ctrl\"k\n\004Save\022*\n\004mode\030\001 \001(\0162\032.vlsi"
      "r.spice.Save.SaveModeH\000\022\020\n\006signal\030\002 \001(\tH"
      "\000\"\035\n\010SaveMode\022\010\n\004NONE\020\000\022\007\n\003ALL\020\001B\006\n\004save"
      "\"\027\n\007Include\022\014\n\004path\030\001 \001(\t\"+\n\nLibInclude\022"
      "\014\n\004path\030\001 \001(\t\022\017\n\007section\030\002 \001(\t\"9\n\004Meas\022\025"
      "\n\ranalysis_type\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\014\n\004e"
      "xpr\030\003 \001(\t\"v\n\006Signal\022\014\n\004name\030\001 \001(\t\022.\n\010qua"
      "ntity\030\002 \001(\0162\034.vlsir.spice.Signal.Quantit"
      "y\".\n\010Quantity\022\013\n\007VOLTAGE\020\000\022\013\n\007CURRENT\020\001\022"
      "\010\n\004NONE\020\0032=\n\005Spice\0224\n\003Sim\022\025.vlsir.spice."
      "SimInput\032\026.vlsir.spice.SimResultb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4560);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "spice.proto", &protobuf_RegisterTypes);
  ::protobuf_utils_2eproto::AddDescriptors();
  ::protobuf_circuit_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_spice_2eproto
namespace vlsir {
namespace spice {
const ::google::protobuf::EnumDescriptor* Save_SaveMode_descriptor() {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_spice_2eproto::file_level_enum_descriptors[0];
}
bool Save_SaveMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Save_SaveMode Save::NONE;
const Save_SaveMode Save::ALL;
const Save_SaveMode Save::SaveMode_MIN;
const Save_SaveMode Save::SaveMode_MAX;
const int Save::SaveMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Signal_Quantity_descriptor() {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_spice_2eproto::file_level_enum_descriptors[1];
}
bool Signal_Quantity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Signal_Quantity Signal::VOLTAGE;
const Signal_Quantity Signal::CURRENT;
const Signal_Quantity Signal::NONE;
const Signal_Quantity Signal::Quantity_MIN;
const Signal_Quantity Signal::Quantity_MAX;
const int Signal::Quantity_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void SimInput::InitAsDefaultInstance() {
  ::vlsir::spice::_SimInput_default_instance_._instance.get_mutable()->pkg_ = const_cast< ::vlsir::circuit::Package*>(
      ::vlsir::circuit::Package::internal_default_instance());
}
void SimInput::clear_pkg() {
  if (GetArenaNoVirtual() == NULL && pkg_ != NULL) {
    delete pkg_;
  }
  pkg_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimInput::kPkgFieldNumber;
const int SimInput::kTopFieldNumber;
const int SimInput::kOptsFieldNumber;
const int SimInput::kAnFieldNumber;
const int SimInput::kCtrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimInput::SimInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_SimInput.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.SimInput)
}
SimInput::SimInput(const SimInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      opts_(from.opts_),
      an_(from.an_),
      ctrls_(from.ctrls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  top_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.top().size() > 0) {
    top_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.top_);
  }
  if (from.has_pkg()) {
    pkg_ = new ::vlsir::circuit::Package(*from.pkg_);
  } else {
    pkg_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.SimInput)
}

void SimInput::SharedCtor() {
  top_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pkg_ = NULL;
}

SimInput::~SimInput() {
  // @@protoc_insertion_point(destructor:vlsir.spice.SimInput)
  SharedDtor();
}

void SimInput::SharedDtor() {
  top_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pkg_;
}

void SimInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SimInput::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimInput& SimInput::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_SimInput.base);
  return *internal_default_instance();
}


void SimInput::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.SimInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opts_.Clear();
  an_.Clear();
  ctrls_.Clear();
  top_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pkg_ != NULL) {
    delete pkg_;
  }
  pkg_ = NULL;
  _internal_metadata_.Clear();
}

bool SimInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.SimInput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vlsir.circuit.Package pkg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pkg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string top = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_top()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->top().data(), static_cast<int>(this->top().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.SimInput.top"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vlsir.spice.SimOptions opts = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_opts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vlsir.spice.Analysis an = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_an()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vlsir.spice.Control ctrls = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ctrls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.SimInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.SimInput)
  return false;
#undef DO_
}

void SimInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.SimInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vlsir.circuit.Package pkg = 1;
  if (this->has_pkg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_pkg(), output);
  }

  // string top = 2;
  if (this->top().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->top().data(), static_cast<int>(this->top().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.SimInput.top");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->top(), output);
  }

  // repeated .vlsir.spice.SimOptions opts = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->opts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->opts(static_cast<int>(i)),
      output);
  }

  // repeated .vlsir.spice.Analysis an = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->an_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->an(static_cast<int>(i)),
      output);
  }

  // repeated .vlsir.spice.Control ctrls = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ctrls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->ctrls(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.SimInput)
}

::google::protobuf::uint8* SimInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.SimInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vlsir.circuit.Package pkg = 1;
  if (this->has_pkg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_pkg(), deterministic, target);
  }

  // string top = 2;
  if (this->top().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->top().data(), static_cast<int>(this->top().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.SimInput.top");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->top(), target);
  }

  // repeated .vlsir.spice.SimOptions opts = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->opts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->opts(static_cast<int>(i)), deterministic, target);
  }

  // repeated .vlsir.spice.Analysis an = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->an_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->an(static_cast<int>(i)), deterministic, target);
  }

  // repeated .vlsir.spice.Control ctrls = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ctrls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->ctrls(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.SimInput)
  return target;
}

size_t SimInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.SimInput)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vlsir.spice.SimOptions opts = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->opts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->opts(static_cast<int>(i)));
    }
  }

  // repeated .vlsir.spice.Analysis an = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->an_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->an(static_cast<int>(i)));
    }
  }

  // repeated .vlsir.spice.Control ctrls = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->ctrls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ctrls(static_cast<int>(i)));
    }
  }

  // string top = 2;
  if (this->top().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->top());
  }

  // .vlsir.circuit.Package pkg = 1;
  if (this->has_pkg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pkg_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.SimInput)
  GOOGLE_DCHECK_NE(&from, this);
  const SimInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.SimInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.SimInput)
    MergeFrom(*source);
  }
}

void SimInput::MergeFrom(const SimInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.SimInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  opts_.MergeFrom(from.opts_);
  an_.MergeFrom(from.an_);
  ctrls_.MergeFrom(from.ctrls_);
  if (from.top().size() > 0) {

    top_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.top_);
  }
  if (from.has_pkg()) {
    mutable_pkg()->::vlsir::circuit::Package::MergeFrom(from.pkg());
  }
}

void SimInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.SimInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimInput::CopyFrom(const SimInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.SimInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimInput::IsInitialized() const {
  return true;
}

void SimInput::Swap(SimInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimInput::InternalSwap(SimInput* other) {
  using std::swap;
  CastToBase(&opts_)->InternalSwap(CastToBase(&other->opts_));
  CastToBase(&an_)->InternalSwap(CastToBase(&other->an_));
  CastToBase(&ctrls_)->InternalSwap(CastToBase(&other->ctrls_));
  top_.Swap(&other->top_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pkg_, other->pkg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SimInput::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SimResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimResult::kAnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimResult::SimResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_SimResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.SimResult)
}
SimResult::SimResult(const SimResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      an_(from.an_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.SimResult)
}

void SimResult::SharedCtor() {
}

SimResult::~SimResult() {
  // @@protoc_insertion_point(destructor:vlsir.spice.SimResult)
  SharedDtor();
}

void SimResult::SharedDtor() {
}

void SimResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SimResult::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimResult& SimResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_SimResult.base);
  return *internal_default_instance();
}


void SimResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.SimResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  an_.Clear();
  _internal_metadata_.Clear();
}

bool SimResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.SimResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vlsir.spice.AnalysisResult an = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_an()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.SimResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.SimResult)
  return false;
#undef DO_
}

void SimResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.SimResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vlsir.spice.AnalysisResult an = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->an_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->an(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.SimResult)
}

::google::protobuf::uint8* SimResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.SimResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vlsir.spice.AnalysisResult an = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->an_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->an(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.SimResult)
  return target;
}

size_t SimResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.SimResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vlsir.spice.AnalysisResult an = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->an_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->an(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.SimResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SimResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.SimResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.SimResult)
    MergeFrom(*source);
  }
}

void SimResult::MergeFrom(const SimResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.SimResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  an_.MergeFrom(from.an_);
}

void SimResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.SimResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimResult::CopyFrom(const SimResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.SimResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimResult::IsInitialized() const {
  return true;
}

void SimResult::Swap(SimResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimResult::InternalSwap(SimResult* other) {
  using std::swap;
  CastToBase(&an_)->InternalSwap(CastToBase(&other->an_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SimResult::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SimOptions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimOptions::kTempFieldNumber;
const int SimOptions::kTnomFieldNumber;
const int SimOptions::kGminFieldNumber;
const int SimOptions::kIabstolFieldNumber;
const int SimOptions::kReltolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimOptions::SimOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_SimOptions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.SimOptions)
}
SimOptions::SimOptions(const SimOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&temp_, &from.temp_,
    static_cast<size_t>(reinterpret_cast<char*>(&reltol_) -
    reinterpret_cast<char*>(&temp_)) + sizeof(reltol_));
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.SimOptions)
}

void SimOptions::SharedCtor() {
  ::memset(&temp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reltol_) -
      reinterpret_cast<char*>(&temp_)) + sizeof(reltol_));
}

SimOptions::~SimOptions() {
  // @@protoc_insertion_point(destructor:vlsir.spice.SimOptions)
  SharedDtor();
}

void SimOptions::SharedDtor() {
}

void SimOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SimOptions::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimOptions& SimOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_SimOptions.base);
  return *internal_default_instance();
}


void SimOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.SimOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&temp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reltol_) -
      reinterpret_cast<char*>(&temp_)) + sizeof(reltol_));
  _internal_metadata_.Clear();
}

bool SimOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.SimOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double temp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double tnom = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tnom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double gmin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double iabstol = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &iabstol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double reltol = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reltol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.SimOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.SimOptions)
  return false;
#undef DO_
}

void SimOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.SimOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double temp = 1;
  if (this->temp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->temp(), output);
  }

  // double tnom = 2;
  if (this->tnom() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->tnom(), output);
  }

  // double gmin = 3;
  if (this->gmin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->gmin(), output);
  }

  // double iabstol = 4;
  if (this->iabstol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->iabstol(), output);
  }

  // double reltol = 5;
  if (this->reltol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->reltol(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.SimOptions)
}

::google::protobuf::uint8* SimOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.SimOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double temp = 1;
  if (this->temp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->temp(), target);
  }

  // double tnom = 2;
  if (this->tnom() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->tnom(), target);
  }

  // double gmin = 3;
  if (this->gmin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->gmin(), target);
  }

  // double iabstol = 4;
  if (this->iabstol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->iabstol(), target);
  }

  // double reltol = 5;
  if (this->reltol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->reltol(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.SimOptions)
  return target;
}

size_t SimOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.SimOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double temp = 1;
  if (this->temp() != 0) {
    total_size += 1 + 8;
  }

  // double tnom = 2;
  if (this->tnom() != 0) {
    total_size += 1 + 8;
  }

  // double gmin = 3;
  if (this->gmin() != 0) {
    total_size += 1 + 8;
  }

  // double iabstol = 4;
  if (this->iabstol() != 0) {
    total_size += 1 + 8;
  }

  // double reltol = 5;
  if (this->reltol() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.SimOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const SimOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.SimOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.SimOptions)
    MergeFrom(*source);
  }
}

void SimOptions::MergeFrom(const SimOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.SimOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.temp() != 0) {
    set_temp(from.temp());
  }
  if (from.tnom() != 0) {
    set_tnom(from.tnom());
  }
  if (from.gmin() != 0) {
    set_gmin(from.gmin());
  }
  if (from.iabstol() != 0) {
    set_iabstol(from.iabstol());
  }
  if (from.reltol() != 0) {
    set_reltol(from.reltol());
  }
}

void SimOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.SimOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimOptions::CopyFrom(const SimOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.SimOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimOptions::IsInitialized() const {
  return true;
}

void SimOptions::Swap(SimOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimOptions::InternalSwap(SimOptions* other) {
  using std::swap;
  swap(temp_, other->temp_);
  swap(tnom_, other->tnom_);
  swap(gmin_, other->gmin_);
  swap(iabstol_, other->iabstol_);
  swap(reltol_, other->reltol_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SimOptions::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Analysis::InitAsDefaultInstance() {
  ::vlsir::spice::_Analysis_default_instance_.op_ = const_cast< ::vlsir::spice::OpInput*>(
      ::vlsir::spice::OpInput::internal_default_instance());
  ::vlsir::spice::_Analysis_default_instance_.dc_ = const_cast< ::vlsir::spice::DcInput*>(
      ::vlsir::spice::DcInput::internal_default_instance());
  ::vlsir::spice::_Analysis_default_instance_.tran_ = const_cast< ::vlsir::spice::TranInput*>(
      ::vlsir::spice::TranInput::internal_default_instance());
  ::vlsir::spice::_Analysis_default_instance_.ac_ = const_cast< ::vlsir::spice::AcInput*>(
      ::vlsir::spice::AcInput::internal_default_instance());
  ::vlsir::spice::_Analysis_default_instance_.noise_ = const_cast< ::vlsir::spice::NoiseInput*>(
      ::vlsir::spice::NoiseInput::internal_default_instance());
  ::vlsir::spice::_Analysis_default_instance_.sweep_ = const_cast< ::vlsir::spice::SweepInput*>(
      ::vlsir::spice::SweepInput::internal_default_instance());
  ::vlsir::spice::_Analysis_default_instance_.monte_ = const_cast< ::vlsir::spice::MonteInput*>(
      ::vlsir::spice::MonteInput::internal_default_instance());
  ::vlsir::spice::_Analysis_default_instance_.custom_ = const_cast< ::vlsir::spice::CustomAnalysisInput*>(
      ::vlsir::spice::CustomAnalysisInput::internal_default_instance());
}
void Analysis::set_allocated_op(::vlsir::spice::OpInput* op) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_an();
  if (op) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      op = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, op, submessage_arena);
    }
    set_has_op();
    an_.op_ = op;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Analysis.op)
}
void Analysis::set_allocated_dc(::vlsir::spice::DcInput* dc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_an();
  if (dc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dc, submessage_arena);
    }
    set_has_dc();
    an_.dc_ = dc;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Analysis.dc)
}
void Analysis::set_allocated_tran(::vlsir::spice::TranInput* tran) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_an();
  if (tran) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tran = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tran, submessage_arena);
    }
    set_has_tran();
    an_.tran_ = tran;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Analysis.tran)
}
void Analysis::set_allocated_ac(::vlsir::spice::AcInput* ac) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_an();
  if (ac) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ac = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ac, submessage_arena);
    }
    set_has_ac();
    an_.ac_ = ac;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Analysis.ac)
}
void Analysis::set_allocated_noise(::vlsir::spice::NoiseInput* noise) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_an();
  if (noise) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      noise = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, noise, submessage_arena);
    }
    set_has_noise();
    an_.noise_ = noise;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Analysis.noise)
}
void Analysis::set_allocated_sweep(::vlsir::spice::SweepInput* sweep) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_an();
  if (sweep) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sweep = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sweep, submessage_arena);
    }
    set_has_sweep();
    an_.sweep_ = sweep;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Analysis.sweep)
}
void Analysis::set_allocated_monte(::vlsir::spice::MonteInput* monte) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_an();
  if (monte) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      monte = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, monte, submessage_arena);
    }
    set_has_monte();
    an_.monte_ = monte;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Analysis.monte)
}
void Analysis::set_allocated_custom(::vlsir::spice::CustomAnalysisInput* custom) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_an();
  if (custom) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      custom = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, custom, submessage_arena);
    }
    set_has_custom();
    an_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Analysis.custom)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Analysis::kOpFieldNumber;
const int Analysis::kDcFieldNumber;
const int Analysis::kTranFieldNumber;
const int Analysis::kAcFieldNumber;
const int Analysis::kNoiseFieldNumber;
const int Analysis::kSweepFieldNumber;
const int Analysis::kMonteFieldNumber;
const int Analysis::kCustomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Analysis::Analysis()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_Analysis.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.Analysis)
}
Analysis::Analysis(const Analysis& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_an();
  switch (from.an_case()) {
    case kOp: {
      mutable_op()->::vlsir::spice::OpInput::MergeFrom(from.op());
      break;
    }
    case kDc: {
      mutable_dc()->::vlsir::spice::DcInput::MergeFrom(from.dc());
      break;
    }
    case kTran: {
      mutable_tran()->::vlsir::spice::TranInput::MergeFrom(from.tran());
      break;
    }
    case kAc: {
      mutable_ac()->::vlsir::spice::AcInput::MergeFrom(from.ac());
      break;
    }
    case kNoise: {
      mutable_noise()->::vlsir::spice::NoiseInput::MergeFrom(from.noise());
      break;
    }
    case kSweep: {
      mutable_sweep()->::vlsir::spice::SweepInput::MergeFrom(from.sweep());
      break;
    }
    case kMonte: {
      mutable_monte()->::vlsir::spice::MonteInput::MergeFrom(from.monte());
      break;
    }
    case kCustom: {
      mutable_custom()->::vlsir::spice::CustomAnalysisInput::MergeFrom(from.custom());
      break;
    }
    case AN_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.Analysis)
}

void Analysis::SharedCtor() {
  clear_has_an();
}

Analysis::~Analysis() {
  // @@protoc_insertion_point(destructor:vlsir.spice.Analysis)
  SharedDtor();
}

void Analysis::SharedDtor() {
  if (has_an()) {
    clear_an();
  }
}

void Analysis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Analysis::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Analysis& Analysis::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_Analysis.base);
  return *internal_default_instance();
}


void Analysis::clear_an() {
// @@protoc_insertion_point(one_of_clear_start:vlsir.spice.Analysis)
  switch (an_case()) {
    case kOp: {
      delete an_.op_;
      break;
    }
    case kDc: {
      delete an_.dc_;
      break;
    }
    case kTran: {
      delete an_.tran_;
      break;
    }
    case kAc: {
      delete an_.ac_;
      break;
    }
    case kNoise: {
      delete an_.noise_;
      break;
    }
    case kSweep: {
      delete an_.sweep_;
      break;
    }
    case kMonte: {
      delete an_.monte_;
      break;
    }
    case kCustom: {
      delete an_.custom_;
      break;
    }
    case AN_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AN_NOT_SET;
}


void Analysis::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.Analysis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_an();
  _internal_metadata_.Clear();
}

bool Analysis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.Analysis)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vlsir.spice.OpInput op = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_op()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vlsir.spice.DcInput dc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vlsir.spice.TranInput tran = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tran()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vlsir.spice.AcInput ac = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vlsir.spice.NoiseInput noise = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_noise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vlsir.spice.SweepInput sweep = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sweep()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vlsir.spice.MonteInput monte = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_monte()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vlsir.spice.CustomAnalysisInput custom = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_custom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.Analysis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.Analysis)
  return false;
#undef DO_
}

void Analysis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.Analysis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vlsir.spice.OpInput op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_op(), output);
  }

  // .vlsir.spice.DcInput dc = 2;
  if (has_dc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_dc(), output);
  }

  // .vlsir.spice.TranInput tran = 3;
  if (has_tran()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_tran(), output);
  }

  // .vlsir.spice.AcInput ac = 4;
  if (has_ac()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_ac(), output);
  }

  // .vlsir.spice.NoiseInput noise = 5;
  if (has_noise()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_noise(), output);
  }

  // .vlsir.spice.SweepInput sweep = 10;
  if (has_sweep()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_sweep(), output);
  }

  // .vlsir.spice.MonteInput monte = 11;
  if (has_monte()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_monte(), output);
  }

  // .vlsir.spice.CustomAnalysisInput custom = 20;
  if (has_custom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_custom(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.Analysis)
}

::google::protobuf::uint8* Analysis::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.Analysis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vlsir.spice.OpInput op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_op(), deterministic, target);
  }

  // .vlsir.spice.DcInput dc = 2;
  if (has_dc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_dc(), deterministic, target);
  }

  // .vlsir.spice.TranInput tran = 3;
  if (has_tran()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_tran(), deterministic, target);
  }

  // .vlsir.spice.AcInput ac = 4;
  if (has_ac()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_ac(), deterministic, target);
  }

  // .vlsir.spice.NoiseInput noise = 5;
  if (has_noise()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_noise(), deterministic, target);
  }

  // .vlsir.spice.SweepInput sweep = 10;
  if (has_sweep()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_sweep(), deterministic, target);
  }

  // .vlsir.spice.MonteInput monte = 11;
  if (has_monte()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_monte(), deterministic, target);
  }

  // .vlsir.spice.CustomAnalysisInput custom = 20;
  if (has_custom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_custom(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.Analysis)
  return target;
}

size_t Analysis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.Analysis)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (an_case()) {
    // .vlsir.spice.OpInput op = 1;
    case kOp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *an_.op_);
      break;
    }
    // .vlsir.spice.DcInput dc = 2;
    case kDc: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *an_.dc_);
      break;
    }
    // .vlsir.spice.TranInput tran = 3;
    case kTran: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *an_.tran_);
      break;
    }
    // .vlsir.spice.AcInput ac = 4;
    case kAc: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *an_.ac_);
      break;
    }
    // .vlsir.spice.NoiseInput noise = 5;
    case kNoise: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *an_.noise_);
      break;
    }
    // .vlsir.spice.SweepInput sweep = 10;
    case kSweep: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *an_.sweep_);
      break;
    }
    // .vlsir.spice.MonteInput monte = 11;
    case kMonte: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *an_.monte_);
      break;
    }
    // .vlsir.spice.CustomAnalysisInput custom = 20;
    case kCustom: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *an_.custom_);
      break;
    }
    case AN_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Analysis::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.Analysis)
  GOOGLE_DCHECK_NE(&from, this);
  const Analysis* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Analysis>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.Analysis)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.Analysis)
    MergeFrom(*source);
  }
}

void Analysis::MergeFrom(const Analysis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.Analysis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.an_case()) {
    case kOp: {
      mutable_op()->::vlsir::spice::OpInput::MergeFrom(from.op());
      break;
    }
    case kDc: {
      mutable_dc()->::vlsir::spice::DcInput::MergeFrom(from.dc());
      break;
    }
    case kTran: {
      mutable_tran()->::vlsir::spice::TranInput::MergeFrom(from.tran());
      break;
    }
    case kAc: {
      mutable_ac()->::vlsir::spice::AcInput::MergeFrom(from.ac());
      break;
    }
    case kNoise: {
      mutable_noise()->::vlsir::spice::NoiseInput::MergeFrom(from.noise());
      break;
    }
    case kSweep: {
      mutable_sweep()->::vlsir::spice::SweepInput::MergeFrom(from.sweep());
      break;
    }
    case kMonte: {
      mutable_monte()->::vlsir::spice::MonteInput::MergeFrom(from.monte());
      break;
    }
    case kCustom: {
      mutable_custom()->::vlsir::spice::CustomAnalysisInput::MergeFrom(from.custom());
      break;
    }
    case AN_NOT_SET: {
      break;
    }
  }
}

void Analysis::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.Analysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Analysis::CopyFrom(const Analysis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.Analysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Analysis::IsInitialized() const {
  return true;
}

void Analysis::Swap(Analysis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Analysis::InternalSwap(Analysis* other) {
  using std::swap;
  swap(an_, other->an_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Analysis::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AnalysisResult::InitAsDefaultInstance() {
  ::vlsir::spice::_AnalysisResult_default_instance_.op_ = const_cast< ::vlsir::spice::OpResult*>(
      ::vlsir::spice::OpResult::internal_default_instance());
  ::vlsir::spice::_AnalysisResult_default_instance_.dc_ = const_cast< ::vlsir::spice::DcResult*>(
      ::vlsir::spice::DcResult::internal_default_instance());
  ::vlsir::spice::_AnalysisResult_default_instance_.tran_ = const_cast< ::vlsir::spice::TranResult*>(
      ::vlsir::spice::TranResult::internal_default_instance());
  ::vlsir::spice::_AnalysisResult_default_instance_.ac_ = const_cast< ::vlsir::spice::AcResult*>(
      ::vlsir::spice::AcResult::internal_default_instance());
  ::vlsir::spice::_AnalysisResult_default_instance_.noise_ = const_cast< ::vlsir::spice::NoiseResult*>(
      ::vlsir::spice::NoiseResult::internal_default_instance());
  ::vlsir::spice::_AnalysisResult_default_instance_.sweep_ = const_cast< ::vlsir::spice::SweepResult*>(
      ::vlsir::spice::SweepResult::internal_default_instance());
  ::vlsir::spice::_AnalysisResult_default_instance_.monte_ = const_cast< ::vlsir::spice::MonteResult*>(
      ::vlsir::spice::MonteResult::internal_default_instance());
  ::vlsir::spice::_AnalysisResult_default_instance_.custom_ = const_cast< ::vlsir::spice::CustomAnalysisResult*>(
      ::vlsir::spice::CustomAnalysisResult::internal_default_instance());
}
void AnalysisResult::set_allocated_op(::vlsir::spice::OpResult* op) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_an();
  if (op) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      op = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, op, submessage_arena);
    }
    set_has_op();
    an_.op_ = op;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.AnalysisResult.op)
}
void AnalysisResult::set_allocated_dc(::vlsir::spice::DcResult* dc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_an();
  if (dc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dc, submessage_arena);
    }
    set_has_dc();
    an_.dc_ = dc;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.AnalysisResult.dc)
}
void AnalysisResult::set_allocated_tran(::vlsir::spice::TranResult* tran) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_an();
  if (tran) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tran = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tran, submessage_arena);
    }
    set_has_tran();
    an_.tran_ = tran;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.AnalysisResult.tran)
}
void AnalysisResult::set_allocated_ac(::vlsir::spice::AcResult* ac) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_an();
  if (ac) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ac = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ac, submessage_arena);
    }
    set_has_ac();
    an_.ac_ = ac;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.AnalysisResult.ac)
}
void AnalysisResult::set_allocated_noise(::vlsir::spice::NoiseResult* noise) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_an();
  if (noise) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      noise = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, noise, submessage_arena);
    }
    set_has_noise();
    an_.noise_ = noise;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.AnalysisResult.noise)
}
void AnalysisResult::set_allocated_sweep(::vlsir::spice::SweepResult* sweep) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_an();
  if (sweep) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sweep = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sweep, submessage_arena);
    }
    set_has_sweep();
    an_.sweep_ = sweep;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.AnalysisResult.sweep)
}
void AnalysisResult::set_allocated_monte(::vlsir::spice::MonteResult* monte) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_an();
  if (monte) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      monte = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, monte, submessage_arena);
    }
    set_has_monte();
    an_.monte_ = monte;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.AnalysisResult.monte)
}
void AnalysisResult::set_allocated_custom(::vlsir::spice::CustomAnalysisResult* custom) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_an();
  if (custom) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      custom = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, custom, submessage_arena);
    }
    set_has_custom();
    an_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.AnalysisResult.custom)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalysisResult::kOpFieldNumber;
const int AnalysisResult::kDcFieldNumber;
const int AnalysisResult::kTranFieldNumber;
const int AnalysisResult::kAcFieldNumber;
const int AnalysisResult::kNoiseFieldNumber;
const int AnalysisResult::kSweepFieldNumber;
const int AnalysisResult::kMonteFieldNumber;
const int AnalysisResult::kCustomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalysisResult::AnalysisResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_AnalysisResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.AnalysisResult)
}
AnalysisResult::AnalysisResult(const AnalysisResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_an();
  switch (from.an_case()) {
    case kOp: {
      mutable_op()->::vlsir::spice::OpResult::MergeFrom(from.op());
      break;
    }
    case kDc: {
      mutable_dc()->::vlsir::spice::DcResult::MergeFrom(from.dc());
      break;
    }
    case kTran: {
      mutable_tran()->::vlsir::spice::TranResult::MergeFrom(from.tran());
      break;
    }
    case kAc: {
      mutable_ac()->::vlsir::spice::AcResult::MergeFrom(from.ac());
      break;
    }
    case kNoise: {
      mutable_noise()->::vlsir::spice::NoiseResult::MergeFrom(from.noise());
      break;
    }
    case kSweep: {
      mutable_sweep()->::vlsir::spice::SweepResult::MergeFrom(from.sweep());
      break;
    }
    case kMonte: {
      mutable_monte()->::vlsir::spice::MonteResult::MergeFrom(from.monte());
      break;
    }
    case kCustom: {
      mutable_custom()->::vlsir::spice::CustomAnalysisResult::MergeFrom(from.custom());
      break;
    }
    case AN_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.AnalysisResult)
}

void AnalysisResult::SharedCtor() {
  clear_has_an();
}

AnalysisResult::~AnalysisResult() {
  // @@protoc_insertion_point(destructor:vlsir.spice.AnalysisResult)
  SharedDtor();
}

void AnalysisResult::SharedDtor() {
  if (has_an()) {
    clear_an();
  }
}

void AnalysisResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AnalysisResult::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnalysisResult& AnalysisResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_AnalysisResult.base);
  return *internal_default_instance();
}


void AnalysisResult::clear_an() {
// @@protoc_insertion_point(one_of_clear_start:vlsir.spice.AnalysisResult)
  switch (an_case()) {
    case kOp: {
      delete an_.op_;
      break;
    }
    case kDc: {
      delete an_.dc_;
      break;
    }
    case kTran: {
      delete an_.tran_;
      break;
    }
    case kAc: {
      delete an_.ac_;
      break;
    }
    case kNoise: {
      delete an_.noise_;
      break;
    }
    case kSweep: {
      delete an_.sweep_;
      break;
    }
    case kMonte: {
      delete an_.monte_;
      break;
    }
    case kCustom: {
      delete an_.custom_;
      break;
    }
    case AN_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AN_NOT_SET;
}


void AnalysisResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.AnalysisResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_an();
  _internal_metadata_.Clear();
}

bool AnalysisResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.AnalysisResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vlsir.spice.OpResult op = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_op()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vlsir.spice.DcResult dc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vlsir.spice.TranResult tran = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tran()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vlsir.spice.AcResult ac = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vlsir.spice.NoiseResult noise = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_noise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vlsir.spice.SweepResult sweep = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sweep()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vlsir.spice.MonteResult monte = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_monte()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vlsir.spice.CustomAnalysisResult custom = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_custom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.AnalysisResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.AnalysisResult)
  return false;
#undef DO_
}

void AnalysisResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.AnalysisResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vlsir.spice.OpResult op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_op(), output);
  }

  // .vlsir.spice.DcResult dc = 2;
  if (has_dc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_dc(), output);
  }

  // .vlsir.spice.TranResult tran = 3;
  if (has_tran()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_tran(), output);
  }

  // .vlsir.spice.AcResult ac = 4;
  if (has_ac()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_ac(), output);
  }

  // .vlsir.spice.NoiseResult noise = 5;
  if (has_noise()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_noise(), output);
  }

  // .vlsir.spice.SweepResult sweep = 10;
  if (has_sweep()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_sweep(), output);
  }

  // .vlsir.spice.MonteResult monte = 11;
  if (has_monte()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_monte(), output);
  }

  // .vlsir.spice.CustomAnalysisResult custom = 20;
  if (has_custom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_custom(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.AnalysisResult)
}

::google::protobuf::uint8* AnalysisResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.AnalysisResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vlsir.spice.OpResult op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_op(), deterministic, target);
  }

  // .vlsir.spice.DcResult dc = 2;
  if (has_dc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_dc(), deterministic, target);
  }

  // .vlsir.spice.TranResult tran = 3;
  if (has_tran()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_tran(), deterministic, target);
  }

  // .vlsir.spice.AcResult ac = 4;
  if (has_ac()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_ac(), deterministic, target);
  }

  // .vlsir.spice.NoiseResult noise = 5;
  if (has_noise()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_noise(), deterministic, target);
  }

  // .vlsir.spice.SweepResult sweep = 10;
  if (has_sweep()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_sweep(), deterministic, target);
  }

  // .vlsir.spice.MonteResult monte = 11;
  if (has_monte()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_monte(), deterministic, target);
  }

  // .vlsir.spice.CustomAnalysisResult custom = 20;
  if (has_custom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_custom(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.AnalysisResult)
  return target;
}

size_t AnalysisResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.AnalysisResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (an_case()) {
    // .vlsir.spice.OpResult op = 1;
    case kOp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *an_.op_);
      break;
    }
    // .vlsir.spice.DcResult dc = 2;
    case kDc: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *an_.dc_);
      break;
    }
    // .vlsir.spice.TranResult tran = 3;
    case kTran: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *an_.tran_);
      break;
    }
    // .vlsir.spice.AcResult ac = 4;
    case kAc: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *an_.ac_);
      break;
    }
    // .vlsir.spice.NoiseResult noise = 5;
    case kNoise: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *an_.noise_);
      break;
    }
    // .vlsir.spice.SweepResult sweep = 10;
    case kSweep: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *an_.sweep_);
      break;
    }
    // .vlsir.spice.MonteResult monte = 11;
    case kMonte: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *an_.monte_);
      break;
    }
    // .vlsir.spice.CustomAnalysisResult custom = 20;
    case kCustom: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *an_.custom_);
      break;
    }
    case AN_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalysisResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.AnalysisResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalysisResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnalysisResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.AnalysisResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.AnalysisResult)
    MergeFrom(*source);
  }
}

void AnalysisResult::MergeFrom(const AnalysisResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.AnalysisResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.an_case()) {
    case kOp: {
      mutable_op()->::vlsir::spice::OpResult::MergeFrom(from.op());
      break;
    }
    case kDc: {
      mutable_dc()->::vlsir::spice::DcResult::MergeFrom(from.dc());
      break;
    }
    case kTran: {
      mutable_tran()->::vlsir::spice::TranResult::MergeFrom(from.tran());
      break;
    }
    case kAc: {
      mutable_ac()->::vlsir::spice::AcResult::MergeFrom(from.ac());
      break;
    }
    case kNoise: {
      mutable_noise()->::vlsir::spice::NoiseResult::MergeFrom(from.noise());
      break;
    }
    case kSweep: {
      mutable_sweep()->::vlsir::spice::SweepResult::MergeFrom(from.sweep());
      break;
    }
    case kMonte: {
      mutable_monte()->::vlsir::spice::MonteResult::MergeFrom(from.monte());
      break;
    }
    case kCustom: {
      mutable_custom()->::vlsir::spice::CustomAnalysisResult::MergeFrom(from.custom());
      break;
    }
    case AN_NOT_SET: {
      break;
    }
  }
}

void AnalysisResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.AnalysisResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalysisResult::CopyFrom(const AnalysisResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.AnalysisResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalysisResult::IsInitialized() const {
  return true;
}

void AnalysisResult::Swap(AnalysisResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalysisResult::InternalSwap(AnalysisResult* other) {
  using std::swap;
  swap(an_, other->an_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AnalysisResult::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OpInput::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpInput::kAnalysisNameFieldNumber;
const int OpInput::kCtrlsFieldNumber;
const int OpInput::kRawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpInput::OpInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_OpInput.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.OpInput)
}
OpInput::OpInput(const OpInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ctrls_(from.ctrls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.analysis_name().size() > 0) {
    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.raw().size() > 0) {
    raw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_);
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.OpInput)
}

void OpInput::SharedCtor() {
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OpInput::~OpInput() {
  // @@protoc_insertion_point(destructor:vlsir.spice.OpInput)
  SharedDtor();
}

void OpInput::SharedDtor() {
  analysis_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OpInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OpInput::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpInput& OpInput::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_OpInput.base);
  return *internal_default_instance();
}


void OpInput::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.OpInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ctrls_.Clear();
  analysis_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool OpInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.OpInput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string analysis_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_analysis_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.OpInput.analysis_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vlsir.spice.Control ctrls = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ctrls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string raw = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->raw().data(), static_cast<int>(this->raw().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.OpInput.raw"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.OpInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.OpInput)
  return false;
#undef DO_
}

void OpInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.OpInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.OpInput.analysis_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->analysis_name(), output);
  }

  // repeated .vlsir.spice.Control ctrls = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ctrls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->ctrls(static_cast<int>(i)),
      output);
  }

  // string raw = 6;
  if (this->raw().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->raw().data(), static_cast<int>(this->raw().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.OpInput.raw");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->raw(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.OpInput)
}

::google::protobuf::uint8* OpInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.OpInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.OpInput.analysis_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->analysis_name(), target);
  }

  // repeated .vlsir.spice.Control ctrls = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ctrls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->ctrls(static_cast<int>(i)), deterministic, target);
  }

  // string raw = 6;
  if (this->raw().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->raw().data(), static_cast<int>(this->raw().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.OpInput.raw");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->raw(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.OpInput)
  return target;
}

size_t OpInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.OpInput)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vlsir.spice.Control ctrls = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->ctrls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ctrls(static_cast<int>(i)));
    }
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->analysis_name());
  }

  // string raw = 6;
  if (this->raw().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->raw());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.OpInput)
  GOOGLE_DCHECK_NE(&from, this);
  const OpInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.OpInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.OpInput)
    MergeFrom(*source);
  }
}

void OpInput::MergeFrom(const OpInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.OpInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ctrls_.MergeFrom(from.ctrls_);
  if (from.analysis_name().size() > 0) {

    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  if (from.raw().size() > 0) {

    raw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_);
  }
}

void OpInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.OpInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpInput::CopyFrom(const OpInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.OpInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpInput::IsInitialized() const {
  return true;
}

void OpInput::Swap(OpInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpInput::InternalSwap(OpInput* other) {
  using std::swap;
  CastToBase(&ctrls_)->InternalSwap(CastToBase(&other->ctrls_));
  analysis_name_.Swap(&other->analysis_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  raw_.Swap(&other->raw_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OpInput::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OpResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpResult::kAnalysisNameFieldNumber;
const int OpResult::kSignalsFieldNumber;
const int OpResult::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpResult::OpResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_OpResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.OpResult)
}
OpResult::OpResult(const OpResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      signals_(from.signals_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.analysis_name().size() > 0) {
    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.OpResult)
}

void OpResult::SharedCtor() {
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OpResult::~OpResult() {
  // @@protoc_insertion_point(destructor:vlsir.spice.OpResult)
  SharedDtor();
}

void OpResult::SharedDtor() {
  analysis_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OpResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OpResult::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpResult& OpResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_OpResult.base);
  return *internal_default_instance();
}


void OpResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.OpResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signals_.Clear();
  data_.Clear();
  analysis_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool OpResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.OpResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string analysis_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_analysis_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.OpResult.analysis_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string signals = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_signals()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signals(this->signals_size() - 1).data(),
            static_cast<int>(this->signals(this->signals_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.OpResult.signals"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 42u, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.OpResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.OpResult)
  return false;
#undef DO_
}

void OpResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.OpResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.OpResult.analysis_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->analysis_name(), output);
  }

  // repeated string signals = 3;
  for (int i = 0, n = this->signals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signals(i).data(), static_cast<int>(this->signals(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.OpResult.signals");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->signals(i), output);
  }

  // repeated double data = 5;
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _data_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->data().data(), this->data_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.OpResult)
}

::google::protobuf::uint8* OpResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.OpResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.OpResult.analysis_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->analysis_name(), target);
  }

  // repeated string signals = 3;
  for (int i = 0, n = this->signals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signals(i).data(), static_cast<int>(this->signals(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.OpResult.signals");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->signals(i), target);
  }

  // repeated double data = 5;
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->data_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.OpResult)
  return target;
}

size_t OpResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.OpResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string signals = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->signals_size());
  for (int i = 0, n = this->signals_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->signals(i));
  }

  // repeated double data = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->analysis_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.OpResult)
  GOOGLE_DCHECK_NE(&from, this);
  const OpResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.OpResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.OpResult)
    MergeFrom(*source);
  }
}

void OpResult::MergeFrom(const OpResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.OpResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signals_.MergeFrom(from.signals_);
  data_.MergeFrom(from.data_);
  if (from.analysis_name().size() > 0) {

    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
}

void OpResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.OpResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpResult::CopyFrom(const OpResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.OpResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpResult::IsInitialized() const {
  return true;
}

void OpResult::Swap(OpResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpResult::InternalSwap(OpResult* other) {
  using std::swap;
  signals_.InternalSwap(CastToBase(&other->signals_));
  data_.InternalSwap(&other->data_);
  analysis_name_.Swap(&other->analysis_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OpResult::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DcInput::InitAsDefaultInstance() {
  ::vlsir::spice::_DcInput_default_instance_._instance.get_mutable()->sweep_ = const_cast< ::vlsir::spice::Sweep*>(
      ::vlsir::spice::Sweep::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DcInput::kAnalysisNameFieldNumber;
const int DcInput::kIndepNameFieldNumber;
const int DcInput::kSweepFieldNumber;
const int DcInput::kCtrlsFieldNumber;
const int DcInput::kRawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DcInput::DcInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_DcInput.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.DcInput)
}
DcInput::DcInput(const DcInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ctrls_(from.ctrls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.analysis_name().size() > 0) {
    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  indep_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.indep_name().size() > 0) {
    indep_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.indep_name_);
  }
  raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.raw().size() > 0) {
    raw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_);
  }
  if (from.has_sweep()) {
    sweep_ = new ::vlsir::spice::Sweep(*from.sweep_);
  } else {
    sweep_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.DcInput)
}

void DcInput::SharedCtor() {
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indep_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sweep_ = NULL;
}

DcInput::~DcInput() {
  // @@protoc_insertion_point(destructor:vlsir.spice.DcInput)
  SharedDtor();
}

void DcInput::SharedDtor() {
  analysis_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indep_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sweep_;
}

void DcInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DcInput::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DcInput& DcInput::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_DcInput.base);
  return *internal_default_instance();
}


void DcInput::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.DcInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ctrls_.Clear();
  analysis_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indep_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sweep_ != NULL) {
    delete sweep_;
  }
  sweep_ = NULL;
  _internal_metadata_.Clear();
}

bool DcInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.DcInput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string analysis_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_analysis_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.DcInput.analysis_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string indep_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_indep_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->indep_name().data(), static_cast<int>(this->indep_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.DcInput.indep_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vlsir.spice.Sweep sweep = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sweep()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vlsir.spice.Control ctrls = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ctrls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string raw = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->raw().data(), static_cast<int>(this->raw().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.DcInput.raw"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.DcInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.DcInput)
  return false;
#undef DO_
}

void DcInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.DcInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.DcInput.analysis_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->analysis_name(), output);
  }

  // string indep_name = 2;
  if (this->indep_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->indep_name().data(), static_cast<int>(this->indep_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.DcInput.indep_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->indep_name(), output);
  }

  // .vlsir.spice.Sweep sweep = 3;
  if (this->has_sweep()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_sweep(), output);
  }

  // repeated .vlsir.spice.Control ctrls = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ctrls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->ctrls(static_cast<int>(i)),
      output);
  }

  // string raw = 6;
  if (this->raw().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->raw().data(), static_cast<int>(this->raw().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.DcInput.raw");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->raw(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.DcInput)
}

::google::protobuf::uint8* DcInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.DcInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.DcInput.analysis_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->analysis_name(), target);
  }

  // string indep_name = 2;
  if (this->indep_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->indep_name().data(), static_cast<int>(this->indep_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.DcInput.indep_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->indep_name(), target);
  }

  // .vlsir.spice.Sweep sweep = 3;
  if (this->has_sweep()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_sweep(), deterministic, target);
  }

  // repeated .vlsir.spice.Control ctrls = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ctrls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->ctrls(static_cast<int>(i)), deterministic, target);
  }

  // string raw = 6;
  if (this->raw().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->raw().data(), static_cast<int>(this->raw().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.DcInput.raw");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->raw(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.DcInput)
  return target;
}

size_t DcInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.DcInput)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vlsir.spice.Control ctrls = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->ctrls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ctrls(static_cast<int>(i)));
    }
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->analysis_name());
  }

  // string indep_name = 2;
  if (this->indep_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->indep_name());
  }

  // string raw = 6;
  if (this->raw().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->raw());
  }

  // .vlsir.spice.Sweep sweep = 3;
  if (this->has_sweep()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sweep_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DcInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.DcInput)
  GOOGLE_DCHECK_NE(&from, this);
  const DcInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DcInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.DcInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.DcInput)
    MergeFrom(*source);
  }
}

void DcInput::MergeFrom(const DcInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.DcInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ctrls_.MergeFrom(from.ctrls_);
  if (from.analysis_name().size() > 0) {

    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  if (from.indep_name().size() > 0) {

    indep_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.indep_name_);
  }
  if (from.raw().size() > 0) {

    raw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_);
  }
  if (from.has_sweep()) {
    mutable_sweep()->::vlsir::spice::Sweep::MergeFrom(from.sweep());
  }
}

void DcInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.DcInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DcInput::CopyFrom(const DcInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.DcInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DcInput::IsInitialized() const {
  return true;
}

void DcInput::Swap(DcInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DcInput::InternalSwap(DcInput* other) {
  using std::swap;
  CastToBase(&ctrls_)->InternalSwap(CastToBase(&other->ctrls_));
  analysis_name_.Swap(&other->analysis_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  indep_name_.Swap(&other->indep_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  raw_.Swap(&other->raw_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sweep_, other->sweep_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DcInput::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

DcResult_MeasurementsEntry_DoNotUse::DcResult_MeasurementsEntry_DoNotUse() {}
DcResult_MeasurementsEntry_DoNotUse::DcResult_MeasurementsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void DcResult_MeasurementsEntry_DoNotUse::MergeFrom(const DcResult_MeasurementsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata DcResult_MeasurementsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[8];
}
void DcResult_MeasurementsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void DcResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DcResult::kAnalysisNameFieldNumber;
const int DcResult::kIndepNameFieldNumber;
const int DcResult::kSignalsFieldNumber;
const int DcResult::kDataFieldNumber;
const int DcResult::kMeasurementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DcResult::DcResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_DcResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.DcResult)
}
DcResult::DcResult(const DcResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      signals_(from.signals_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  measurements_.MergeFrom(from.measurements_);
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.analysis_name().size() > 0) {
    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  indep_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.indep_name().size() > 0) {
    indep_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.indep_name_);
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.DcResult)
}

void DcResult::SharedCtor() {
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indep_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DcResult::~DcResult() {
  // @@protoc_insertion_point(destructor:vlsir.spice.DcResult)
  SharedDtor();
}

void DcResult::SharedDtor() {
  analysis_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indep_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DcResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DcResult::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DcResult& DcResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_DcResult.base);
  return *internal_default_instance();
}


void DcResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.DcResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signals_.Clear();
  data_.Clear();
  measurements_.Clear();
  analysis_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indep_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DcResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.DcResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string analysis_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_analysis_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.DcResult.analysis_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string indep_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_indep_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->indep_name().data(), static_cast<int>(this->indep_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.DcResult.indep_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string signals = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_signals()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signals(this->signals_size() - 1).data(),
            static_cast<int>(this->signals(this->signals_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.DcResult.signals"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 42u, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, double> measurements = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DcResult_MeasurementsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              DcResult_MeasurementsEntry_DoNotUse,
              ::std::string, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::std::string, double > > parser(&measurements_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.DcResult.MeasurementsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.DcResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.DcResult)
  return false;
#undef DO_
}

void DcResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.DcResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.DcResult.analysis_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->analysis_name(), output);
  }

  // string indep_name = 2;
  if (this->indep_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->indep_name().data(), static_cast<int>(this->indep_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.DcResult.indep_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->indep_name(), output);
  }

  // repeated string signals = 3;
  for (int i = 0, n = this->signals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signals(i).data(), static_cast<int>(this->signals(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.DcResult.signals");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->signals(i), output);
  }

  // repeated double data = 5;
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _data_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->data().data(), this->data_size(), output);
  }

  // map<string, double> measurements = 10;
  if (!this->measurements().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "vlsir.spice.DcResult.MeasurementsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->measurements().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->measurements().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->measurements().begin();
          it != this->measurements().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<DcResult_MeasurementsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(measurements_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<DcResult_MeasurementsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->measurements().begin();
          it != this->measurements().end(); ++it) {
        entry.reset(measurements_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.DcResult)
}

::google::protobuf::uint8* DcResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.DcResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.DcResult.analysis_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->analysis_name(), target);
  }

  // string indep_name = 2;
  if (this->indep_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->indep_name().data(), static_cast<int>(this->indep_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.DcResult.indep_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->indep_name(), target);
  }

  // repeated string signals = 3;
  for (int i = 0, n = this->signals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signals(i).data(), static_cast<int>(this->signals(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.DcResult.signals");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->signals(i), target);
  }

  // repeated double data = 5;
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->data_, target);
  }

  // map<string, double> measurements = 10;
  if (!this->measurements().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "vlsir.spice.DcResult.MeasurementsEntry.key");
      }
    };

    if (deterministic &&
        this->measurements().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->measurements().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->measurements().begin();
          it != this->measurements().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<DcResult_MeasurementsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(measurements_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<DcResult_MeasurementsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->measurements().begin();
          it != this->measurements().end(); ++it) {
        entry.reset(measurements_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.DcResult)
  return target;
}

size_t DcResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.DcResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string signals = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->signals_size());
  for (int i = 0, n = this->signals_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->signals(i));
  }

  // repeated double data = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<string, double> measurements = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->measurements_size());
  {
    ::std::unique_ptr<DcResult_MeasurementsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, double >::const_iterator
        it = this->measurements().begin();
        it != this->measurements().end(); ++it) {
      entry.reset(measurements_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->analysis_name());
  }

  // string indep_name = 2;
  if (this->indep_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->indep_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DcResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.DcResult)
  GOOGLE_DCHECK_NE(&from, this);
  const DcResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DcResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.DcResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.DcResult)
    MergeFrom(*source);
  }
}

void DcResult::MergeFrom(const DcResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.DcResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signals_.MergeFrom(from.signals_);
  data_.MergeFrom(from.data_);
  measurements_.MergeFrom(from.measurements_);
  if (from.analysis_name().size() > 0) {

    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  if (from.indep_name().size() > 0) {

    indep_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.indep_name_);
  }
}

void DcResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.DcResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DcResult::CopyFrom(const DcResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.DcResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DcResult::IsInitialized() const {
  return true;
}

void DcResult::Swap(DcResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DcResult::InternalSwap(DcResult* other) {
  using std::swap;
  signals_.InternalSwap(CastToBase(&other->signals_));
  data_.InternalSwap(&other->data_);
  measurements_.Swap(&other->measurements_);
  analysis_name_.Swap(&other->analysis_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  indep_name_.Swap(&other->indep_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DcResult::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

TranInput_IcEntry_DoNotUse::TranInput_IcEntry_DoNotUse() {}
TranInput_IcEntry_DoNotUse::TranInput_IcEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TranInput_IcEntry_DoNotUse::MergeFrom(const TranInput_IcEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TranInput_IcEntry_DoNotUse::GetMetadata() const {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[10];
}
void TranInput_IcEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void TranInput::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TranInput::kAnalysisNameFieldNumber;
const int TranInput::kTstopFieldNumber;
const int TranInput::kTstepFieldNumber;
const int TranInput::kIcFieldNumber;
const int TranInput::kCtrlsFieldNumber;
const int TranInput::kRawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TranInput::TranInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_TranInput.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.TranInput)
}
TranInput::TranInput(const TranInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ctrls_(from.ctrls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ic_.MergeFrom(from.ic_);
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.analysis_name().size() > 0) {
    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.raw().size() > 0) {
    raw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_);
  }
  ::memcpy(&tstop_, &from.tstop_,
    static_cast<size_t>(reinterpret_cast<char*>(&tstep_) -
    reinterpret_cast<char*>(&tstop_)) + sizeof(tstep_));
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.TranInput)
}

void TranInput::SharedCtor() {
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tstop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tstep_) -
      reinterpret_cast<char*>(&tstop_)) + sizeof(tstep_));
}

TranInput::~TranInput() {
  // @@protoc_insertion_point(destructor:vlsir.spice.TranInput)
  SharedDtor();
}

void TranInput::SharedDtor() {
  analysis_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TranInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TranInput::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TranInput& TranInput::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_TranInput.base);
  return *internal_default_instance();
}


void TranInput::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.TranInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ic_.Clear();
  ctrls_.Clear();
  analysis_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tstop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tstep_) -
      reinterpret_cast<char*>(&tstop_)) + sizeof(tstep_));
  _internal_metadata_.Clear();
}

bool TranInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.TranInput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string analysis_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_analysis_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.TranInput.analysis_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double tstop = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tstop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double tstep = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tstep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, double> ic = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          TranInput_IcEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TranInput_IcEntry_DoNotUse,
              ::std::string, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::std::string, double > > parser(&ic_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.TranInput.IcEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vlsir.spice.Control ctrls = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ctrls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string raw = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->raw().data(), static_cast<int>(this->raw().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.TranInput.raw"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.TranInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.TranInput)
  return false;
#undef DO_
}

void TranInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.TranInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.TranInput.analysis_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->analysis_name(), output);
  }

  // double tstop = 2;
  if (this->tstop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->tstop(), output);
  }

  // double tstep = 3;
  if (this->tstep() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->tstep(), output);
  }

  // map<string, double> ic = 4;
  if (!this->ic().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "vlsir.spice.TranInput.IcEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->ic().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->ic().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->ic().begin();
          it != this->ic().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TranInput_IcEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ic_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TranInput_IcEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->ic().begin();
          it != this->ic().end(); ++it) {
        entry.reset(ic_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .vlsir.spice.Control ctrls = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ctrls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->ctrls(static_cast<int>(i)),
      output);
  }

  // string raw = 6;
  if (this->raw().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->raw().data(), static_cast<int>(this->raw().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.TranInput.raw");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->raw(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.TranInput)
}

::google::protobuf::uint8* TranInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.TranInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.TranInput.analysis_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->analysis_name(), target);
  }

  // double tstop = 2;
  if (this->tstop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->tstop(), target);
  }

  // double tstep = 3;
  if (this->tstep() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->tstep(), target);
  }

  // map<string, double> ic = 4;
  if (!this->ic().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "vlsir.spice.TranInput.IcEntry.key");
      }
    };

    if (deterministic &&
        this->ic().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->ic().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->ic().begin();
          it != this->ic().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TranInput_IcEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ic_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TranInput_IcEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->ic().begin();
          it != this->ic().end(); ++it) {
        entry.reset(ic_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .vlsir.spice.Control ctrls = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ctrls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->ctrls(static_cast<int>(i)), deterministic, target);
  }

  // string raw = 6;
  if (this->raw().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->raw().data(), static_cast<int>(this->raw().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.TranInput.raw");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->raw(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.TranInput)
  return target;
}

size_t TranInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.TranInput)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, double> ic = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ic_size());
  {
    ::std::unique_ptr<TranInput_IcEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, double >::const_iterator
        it = this->ic().begin();
        it != this->ic().end(); ++it) {
      entry.reset(ic_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .vlsir.spice.Control ctrls = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->ctrls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ctrls(static_cast<int>(i)));
    }
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->analysis_name());
  }

  // string raw = 6;
  if (this->raw().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->raw());
  }

  // double tstop = 2;
  if (this->tstop() != 0) {
    total_size += 1 + 8;
  }

  // double tstep = 3;
  if (this->tstep() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TranInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.TranInput)
  GOOGLE_DCHECK_NE(&from, this);
  const TranInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TranInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.TranInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.TranInput)
    MergeFrom(*source);
  }
}

void TranInput::MergeFrom(const TranInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.TranInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ic_.MergeFrom(from.ic_);
  ctrls_.MergeFrom(from.ctrls_);
  if (from.analysis_name().size() > 0) {

    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  if (from.raw().size() > 0) {

    raw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_);
  }
  if (from.tstop() != 0) {
    set_tstop(from.tstop());
  }
  if (from.tstep() != 0) {
    set_tstep(from.tstep());
  }
}

void TranInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.TranInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TranInput::CopyFrom(const TranInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.TranInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranInput::IsInitialized() const {
  return true;
}

void TranInput::Swap(TranInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TranInput::InternalSwap(TranInput* other) {
  using std::swap;
  ic_.Swap(&other->ic_);
  CastToBase(&ctrls_)->InternalSwap(CastToBase(&other->ctrls_));
  analysis_name_.Swap(&other->analysis_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  raw_.Swap(&other->raw_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tstop_, other->tstop_);
  swap(tstep_, other->tstep_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TranInput::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

TranResult_MeasurementsEntry_DoNotUse::TranResult_MeasurementsEntry_DoNotUse() {}
TranResult_MeasurementsEntry_DoNotUse::TranResult_MeasurementsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TranResult_MeasurementsEntry_DoNotUse::MergeFrom(const TranResult_MeasurementsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TranResult_MeasurementsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[12];
}
void TranResult_MeasurementsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void TranResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TranResult::kAnalysisNameFieldNumber;
const int TranResult::kSignalsFieldNumber;
const int TranResult::kDataFieldNumber;
const int TranResult::kMeasurementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TranResult::TranResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_TranResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.TranResult)
}
TranResult::TranResult(const TranResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      signals_(from.signals_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  measurements_.MergeFrom(from.measurements_);
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.analysis_name().size() > 0) {
    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.TranResult)
}

void TranResult::SharedCtor() {
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TranResult::~TranResult() {
  // @@protoc_insertion_point(destructor:vlsir.spice.TranResult)
  SharedDtor();
}

void TranResult::SharedDtor() {
  analysis_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TranResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TranResult::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TranResult& TranResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_TranResult.base);
  return *internal_default_instance();
}


void TranResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.TranResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signals_.Clear();
  data_.Clear();
  measurements_.Clear();
  analysis_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool TranResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.TranResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string analysis_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_analysis_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.TranResult.analysis_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string signals = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_signals()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signals(this->signals_size() - 1).data(),
            static_cast<int>(this->signals(this->signals_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.TranResult.signals"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 42u, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, double> measurements = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          TranResult_MeasurementsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TranResult_MeasurementsEntry_DoNotUse,
              ::std::string, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::std::string, double > > parser(&measurements_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.TranResult.MeasurementsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.TranResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.TranResult)
  return false;
#undef DO_
}

void TranResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.TranResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.TranResult.analysis_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->analysis_name(), output);
  }

  // repeated string signals = 3;
  for (int i = 0, n = this->signals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signals(i).data(), static_cast<int>(this->signals(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.TranResult.signals");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->signals(i), output);
  }

  // repeated double data = 5;
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _data_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->data().data(), this->data_size(), output);
  }

  // map<string, double> measurements = 10;
  if (!this->measurements().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "vlsir.spice.TranResult.MeasurementsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->measurements().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->measurements().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->measurements().begin();
          it != this->measurements().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TranResult_MeasurementsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(measurements_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TranResult_MeasurementsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->measurements().begin();
          it != this->measurements().end(); ++it) {
        entry.reset(measurements_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.TranResult)
}

::google::protobuf::uint8* TranResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.TranResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.TranResult.analysis_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->analysis_name(), target);
  }

  // repeated string signals = 3;
  for (int i = 0, n = this->signals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signals(i).data(), static_cast<int>(this->signals(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.TranResult.signals");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->signals(i), target);
  }

  // repeated double data = 5;
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->data_, target);
  }

  // map<string, double> measurements = 10;
  if (!this->measurements().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "vlsir.spice.TranResult.MeasurementsEntry.key");
      }
    };

    if (deterministic &&
        this->measurements().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->measurements().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->measurements().begin();
          it != this->measurements().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TranResult_MeasurementsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(measurements_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TranResult_MeasurementsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->measurements().begin();
          it != this->measurements().end(); ++it) {
        entry.reset(measurements_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.TranResult)
  return target;
}

size_t TranResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.TranResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string signals = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->signals_size());
  for (int i = 0, n = this->signals_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->signals(i));
  }

  // repeated double data = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<string, double> measurements = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->measurements_size());
  {
    ::std::unique_ptr<TranResult_MeasurementsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, double >::const_iterator
        it = this->measurements().begin();
        it != this->measurements().end(); ++it) {
      entry.reset(measurements_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->analysis_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TranResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.TranResult)
  GOOGLE_DCHECK_NE(&from, this);
  const TranResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TranResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.TranResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.TranResult)
    MergeFrom(*source);
  }
}

void TranResult::MergeFrom(const TranResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.TranResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signals_.MergeFrom(from.signals_);
  data_.MergeFrom(from.data_);
  measurements_.MergeFrom(from.measurements_);
  if (from.analysis_name().size() > 0) {

    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
}

void TranResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.TranResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TranResult::CopyFrom(const TranResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.TranResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranResult::IsInitialized() const {
  return true;
}

void TranResult::Swap(TranResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TranResult::InternalSwap(TranResult* other) {
  using std::swap;
  signals_.InternalSwap(CastToBase(&other->signals_));
  data_.InternalSwap(&other->data_);
  measurements_.Swap(&other->measurements_);
  analysis_name_.Swap(&other->analysis_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TranResult::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ComplexNum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComplexNum::kReFieldNumber;
const int ComplexNum::kImFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComplexNum::ComplexNum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_ComplexNum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.ComplexNum)
}
ComplexNum::ComplexNum(const ComplexNum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&re_, &from.re_,
    static_cast<size_t>(reinterpret_cast<char*>(&im_) -
    reinterpret_cast<char*>(&re_)) + sizeof(im_));
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.ComplexNum)
}

void ComplexNum::SharedCtor() {
  ::memset(&re_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&im_) -
      reinterpret_cast<char*>(&re_)) + sizeof(im_));
}

ComplexNum::~ComplexNum() {
  // @@protoc_insertion_point(destructor:vlsir.spice.ComplexNum)
  SharedDtor();
}

void ComplexNum::SharedDtor() {
}

void ComplexNum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ComplexNum::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ComplexNum& ComplexNum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_ComplexNum.base);
  return *internal_default_instance();
}


void ComplexNum::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.ComplexNum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&re_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&im_) -
      reinterpret_cast<char*>(&re_)) + sizeof(im_));
  _internal_metadata_.Clear();
}

bool ComplexNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.ComplexNum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double re = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &re_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double im = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &im_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.ComplexNum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.ComplexNum)
  return false;
#undef DO_
}

void ComplexNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.ComplexNum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double re = 1;
  if (this->re() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->re(), output);
  }

  // double im = 2;
  if (this->im() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->im(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.ComplexNum)
}

::google::protobuf::uint8* ComplexNum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.ComplexNum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double re = 1;
  if (this->re() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->re(), target);
  }

  // double im = 2;
  if (this->im() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->im(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.ComplexNum)
  return target;
}

size_t ComplexNum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.ComplexNum)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double re = 1;
  if (this->re() != 0) {
    total_size += 1 + 8;
  }

  // double im = 2;
  if (this->im() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComplexNum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.ComplexNum)
  GOOGLE_DCHECK_NE(&from, this);
  const ComplexNum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ComplexNum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.ComplexNum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.ComplexNum)
    MergeFrom(*source);
  }
}

void ComplexNum::MergeFrom(const ComplexNum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.ComplexNum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.re() != 0) {
    set_re(from.re());
  }
  if (from.im() != 0) {
    set_im(from.im());
  }
}

void ComplexNum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.ComplexNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComplexNum::CopyFrom(const ComplexNum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.ComplexNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexNum::IsInitialized() const {
  return true;
}

void ComplexNum::Swap(ComplexNum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComplexNum::InternalSwap(ComplexNum* other) {
  using std::swap;
  swap(re_, other->re_);
  swap(im_, other->im_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ComplexNum::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcInput::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcInput::kAnalysisNameFieldNumber;
const int AcInput::kFstartFieldNumber;
const int AcInput::kFstopFieldNumber;
const int AcInput::kNptsFieldNumber;
const int AcInput::kCtrlsFieldNumber;
const int AcInput::kRawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcInput::AcInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_AcInput.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.AcInput)
}
AcInput::AcInput(const AcInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ctrls_(from.ctrls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.analysis_name().size() > 0) {
    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.raw().size() > 0) {
    raw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_);
  }
  ::memcpy(&fstart_, &from.fstart_,
    static_cast<size_t>(reinterpret_cast<char*>(&npts_) -
    reinterpret_cast<char*>(&fstart_)) + sizeof(npts_));
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.AcInput)
}

void AcInput::SharedCtor() {
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fstart_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&npts_) -
      reinterpret_cast<char*>(&fstart_)) + sizeof(npts_));
}

AcInput::~AcInput() {
  // @@protoc_insertion_point(destructor:vlsir.spice.AcInput)
  SharedDtor();
}

void AcInput::SharedDtor() {
  analysis_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AcInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AcInput::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcInput& AcInput::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_AcInput.base);
  return *internal_default_instance();
}


void AcInput::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.AcInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ctrls_.Clear();
  analysis_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fstart_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&npts_) -
      reinterpret_cast<char*>(&fstart_)) + sizeof(npts_));
  _internal_metadata_.Clear();
}

bool AcInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.AcInput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string analysis_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_analysis_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.AcInput.analysis_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fstart = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fstart_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fstop = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fstop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 npts = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vlsir.spice.Control ctrls = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ctrls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string raw = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->raw().data(), static_cast<int>(this->raw().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.AcInput.raw"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.AcInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.AcInput)
  return false;
#undef DO_
}

void AcInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.AcInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.AcInput.analysis_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->analysis_name(), output);
  }

  // double fstart = 2;
  if (this->fstart() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->fstart(), output);
  }

  // double fstop = 3;
  if (this->fstop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->fstop(), output);
  }

  // uint64 npts = 4;
  if (this->npts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->npts(), output);
  }

  // repeated .vlsir.spice.Control ctrls = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ctrls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->ctrls(static_cast<int>(i)),
      output);
  }

  // string raw = 6;
  if (this->raw().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->raw().data(), static_cast<int>(this->raw().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.AcInput.raw");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->raw(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.AcInput)
}

::google::protobuf::uint8* AcInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.AcInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.AcInput.analysis_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->analysis_name(), target);
  }

  // double fstart = 2;
  if (this->fstart() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->fstart(), target);
  }

  // double fstop = 3;
  if (this->fstop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->fstop(), target);
  }

  // uint64 npts = 4;
  if (this->npts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->npts(), target);
  }

  // repeated .vlsir.spice.Control ctrls = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ctrls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->ctrls(static_cast<int>(i)), deterministic, target);
  }

  // string raw = 6;
  if (this->raw().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->raw().data(), static_cast<int>(this->raw().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.AcInput.raw");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->raw(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.AcInput)
  return target;
}

size_t AcInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.AcInput)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vlsir.spice.Control ctrls = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->ctrls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ctrls(static_cast<int>(i)));
    }
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->analysis_name());
  }

  // string raw = 6;
  if (this->raw().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->raw());
  }

  // double fstart = 2;
  if (this->fstart() != 0) {
    total_size += 1 + 8;
  }

  // double fstop = 3;
  if (this->fstop() != 0) {
    total_size += 1 + 8;
  }

  // uint64 npts = 4;
  if (this->npts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->npts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.AcInput)
  GOOGLE_DCHECK_NE(&from, this);
  const AcInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.AcInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.AcInput)
    MergeFrom(*source);
  }
}

void AcInput::MergeFrom(const AcInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.AcInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ctrls_.MergeFrom(from.ctrls_);
  if (from.analysis_name().size() > 0) {

    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  if (from.raw().size() > 0) {

    raw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_);
  }
  if (from.fstart() != 0) {
    set_fstart(from.fstart());
  }
  if (from.fstop() != 0) {
    set_fstop(from.fstop());
  }
  if (from.npts() != 0) {
    set_npts(from.npts());
  }
}

void AcInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.AcInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcInput::CopyFrom(const AcInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.AcInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcInput::IsInitialized() const {
  return true;
}

void AcInput::Swap(AcInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcInput::InternalSwap(AcInput* other) {
  using std::swap;
  CastToBase(&ctrls_)->InternalSwap(CastToBase(&other->ctrls_));
  analysis_name_.Swap(&other->analysis_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  raw_.Swap(&other->raw_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fstart_, other->fstart_);
  swap(fstop_, other->fstop_);
  swap(npts_, other->npts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AcInput::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

AcResult_MeasurementsEntry_DoNotUse::AcResult_MeasurementsEntry_DoNotUse() {}
AcResult_MeasurementsEntry_DoNotUse::AcResult_MeasurementsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void AcResult_MeasurementsEntry_DoNotUse::MergeFrom(const AcResult_MeasurementsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata AcResult_MeasurementsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[16];
}
void AcResult_MeasurementsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void AcResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcResult::kAnalysisNameFieldNumber;
const int AcResult::kFreqFieldNumber;
const int AcResult::kSignalsFieldNumber;
const int AcResult::kDataFieldNumber;
const int AcResult::kMeasurementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcResult::AcResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_AcResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.AcResult)
}
AcResult::AcResult(const AcResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      freq_(from.freq_),
      signals_(from.signals_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  measurements_.MergeFrom(from.measurements_);
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.analysis_name().size() > 0) {
    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.AcResult)
}

void AcResult::SharedCtor() {
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AcResult::~AcResult() {
  // @@protoc_insertion_point(destructor:vlsir.spice.AcResult)
  SharedDtor();
}

void AcResult::SharedDtor() {
  analysis_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AcResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AcResult::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcResult& AcResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_AcResult.base);
  return *internal_default_instance();
}


void AcResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.AcResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  freq_.Clear();
  signals_.Clear();
  data_.Clear();
  measurements_.Clear();
  analysis_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool AcResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.AcResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string analysis_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_analysis_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.AcResult.analysis_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double freq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_freq())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18u, input, this->mutable_freq())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string signals = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_signals()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signals(this->signals_size() - 1).data(),
            static_cast<int>(this->signals(this->signals_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.AcResult.signals"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vlsir.spice.ComplexNum data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, double> measurements = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          AcResult_MeasurementsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              AcResult_MeasurementsEntry_DoNotUse,
              ::std::string, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::std::string, double > > parser(&measurements_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.AcResult.MeasurementsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.AcResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.AcResult)
  return false;
#undef DO_
}

void AcResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.AcResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.AcResult.analysis_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->analysis_name(), output);
  }

  // repeated double freq = 2;
  if (this->freq_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _freq_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->freq().data(), this->freq_size(), output);
  }

  // repeated string signals = 3;
  for (int i = 0, n = this->signals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signals(i).data(), static_cast<int>(this->signals(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.AcResult.signals");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->signals(i), output);
  }

  // repeated .vlsir.spice.ComplexNum data = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->data(static_cast<int>(i)),
      output);
  }

  // map<string, double> measurements = 10;
  if (!this->measurements().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "vlsir.spice.AcResult.MeasurementsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->measurements().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->measurements().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->measurements().begin();
          it != this->measurements().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<AcResult_MeasurementsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(measurements_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<AcResult_MeasurementsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->measurements().begin();
          it != this->measurements().end(); ++it) {
        entry.reset(measurements_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.AcResult)
}

::google::protobuf::uint8* AcResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.AcResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.AcResult.analysis_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->analysis_name(), target);
  }

  // repeated double freq = 2;
  if (this->freq_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _freq_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->freq_, target);
  }

  // repeated string signals = 3;
  for (int i = 0, n = this->signals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signals(i).data(), static_cast<int>(this->signals(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.AcResult.signals");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->signals(i), target);
  }

  // repeated .vlsir.spice.ComplexNum data = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->data(static_cast<int>(i)), deterministic, target);
  }

  // map<string, double> measurements = 10;
  if (!this->measurements().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "vlsir.spice.AcResult.MeasurementsEntry.key");
      }
    };

    if (deterministic &&
        this->measurements().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->measurements().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->measurements().begin();
          it != this->measurements().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<AcResult_MeasurementsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(measurements_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<AcResult_MeasurementsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->measurements().begin();
          it != this->measurements().end(); ++it) {
        entry.reset(measurements_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.AcResult)
  return target;
}

size_t AcResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.AcResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double freq = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->freq_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _freq_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string signals = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->signals_size());
  for (int i = 0, n = this->signals_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->signals(i));
  }

  // repeated .vlsir.spice.ComplexNum data = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  // map<string, double> measurements = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->measurements_size());
  {
    ::std::unique_ptr<AcResult_MeasurementsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, double >::const_iterator
        it = this->measurements().begin();
        it != this->measurements().end(); ++it) {
      entry.reset(measurements_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->analysis_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.AcResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AcResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.AcResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.AcResult)
    MergeFrom(*source);
  }
}

void AcResult::MergeFrom(const AcResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.AcResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  freq_.MergeFrom(from.freq_);
  signals_.MergeFrom(from.signals_);
  data_.MergeFrom(from.data_);
  measurements_.MergeFrom(from.measurements_);
  if (from.analysis_name().size() > 0) {

    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
}

void AcResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.AcResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcResult::CopyFrom(const AcResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.AcResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcResult::IsInitialized() const {
  return true;
}

void AcResult::Swap(AcResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcResult::InternalSwap(AcResult* other) {
  using std::swap;
  freq_.InternalSwap(&other->freq_);
  signals_.InternalSwap(CastToBase(&other->signals_));
  CastToBase(&data_)->InternalSwap(CastToBase(&other->data_));
  measurements_.Swap(&other->measurements_);
  analysis_name_.Swap(&other->analysis_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AcResult::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NoiseInput::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NoiseInput::kAnalysisNameFieldNumber;
const int NoiseInput::kOutputPFieldNumber;
const int NoiseInput::kOutputNFieldNumber;
const int NoiseInput::kInputSourceFieldNumber;
const int NoiseInput::kFstartFieldNumber;
const int NoiseInput::kFstopFieldNumber;
const int NoiseInput::kNptsFieldNumber;
const int NoiseInput::kCtrlsFieldNumber;
const int NoiseInput::kRawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoiseInput::NoiseInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_NoiseInput.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.NoiseInput)
}
NoiseInput::NoiseInput(const NoiseInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ctrls_(from.ctrls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.analysis_name().size() > 0) {
    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  output_p_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.output_p().size() > 0) {
    output_p_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_p_);
  }
  output_n_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.output_n().size() > 0) {
    output_n_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_n_);
  }
  input_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.input_source().size() > 0) {
    input_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_source_);
  }
  raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.raw().size() > 0) {
    raw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_);
  }
  ::memcpy(&fstart_, &from.fstart_,
    static_cast<size_t>(reinterpret_cast<char*>(&npts_) -
    reinterpret_cast<char*>(&fstart_)) + sizeof(npts_));
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.NoiseInput)
}

void NoiseInput::SharedCtor() {
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_p_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_n_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fstart_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&npts_) -
      reinterpret_cast<char*>(&fstart_)) + sizeof(npts_));
}

NoiseInput::~NoiseInput() {
  // @@protoc_insertion_point(destructor:vlsir.spice.NoiseInput)
  SharedDtor();
}

void NoiseInput::SharedDtor() {
  analysis_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_p_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_n_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NoiseInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NoiseInput::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NoiseInput& NoiseInput::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_NoiseInput.base);
  return *internal_default_instance();
}


void NoiseInput::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.NoiseInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ctrls_.Clear();
  analysis_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_p_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_n_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fstart_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&npts_) -
      reinterpret_cast<char*>(&fstart_)) + sizeof(npts_));
  _internal_metadata_.Clear();
}

bool NoiseInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.NoiseInput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string analysis_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_analysis_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.NoiseInput.analysis_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string output_p = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_p()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output_p().data(), static_cast<int>(this->output_p().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.NoiseInput.output_p"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string output_n = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_n()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output_n().data(), static_cast<int>(this->output_n().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.NoiseInput.output_n"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string input_source = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_source()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_source().data(), static_cast<int>(this->input_source().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.NoiseInput.input_source"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string raw = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->raw().data(), static_cast<int>(this->raw().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.NoiseInput.raw"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fstart = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fstart_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fstop = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fstop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 npts = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vlsir.spice.Control ctrls = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ctrls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.NoiseInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.NoiseInput)
  return false;
#undef DO_
}

void NoiseInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.NoiseInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.NoiseInput.analysis_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->analysis_name(), output);
  }

  // string output_p = 2;
  if (this->output_p().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_p().data(), static_cast<int>(this->output_p().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.NoiseInput.output_p");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->output_p(), output);
  }

  // string output_n = 3;
  if (this->output_n().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_n().data(), static_cast<int>(this->output_n().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.NoiseInput.output_n");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->output_n(), output);
  }

  // string input_source = 4;
  if (this->input_source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_source().data(), static_cast<int>(this->input_source().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.NoiseInput.input_source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->input_source(), output);
  }

  // string raw = 6;
  if (this->raw().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->raw().data(), static_cast<int>(this->raw().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.NoiseInput.raw");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->raw(), output);
  }

  // double fstart = 10;
  if (this->fstart() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->fstart(), output);
  }

  // double fstop = 11;
  if (this->fstop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->fstop(), output);
  }

  // uint64 npts = 12;
  if (this->npts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->npts(), output);
  }

  // repeated .vlsir.spice.Control ctrls = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ctrls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20,
      this->ctrls(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.NoiseInput)
}

::google::protobuf::uint8* NoiseInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.NoiseInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.NoiseInput.analysis_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->analysis_name(), target);
  }

  // string output_p = 2;
  if (this->output_p().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_p().data(), static_cast<int>(this->output_p().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.NoiseInput.output_p");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->output_p(), target);
  }

  // string output_n = 3;
  if (this->output_n().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_n().data(), static_cast<int>(this->output_n().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.NoiseInput.output_n");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->output_n(), target);
  }

  // string input_source = 4;
  if (this->input_source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_source().data(), static_cast<int>(this->input_source().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.NoiseInput.input_source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->input_source(), target);
  }

  // string raw = 6;
  if (this->raw().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->raw().data(), static_cast<int>(this->raw().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.NoiseInput.raw");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->raw(), target);
  }

  // double fstart = 10;
  if (this->fstart() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->fstart(), target);
  }

  // double fstop = 11;
  if (this->fstop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->fstop(), target);
  }

  // uint64 npts = 12;
  if (this->npts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->npts(), target);
  }

  // repeated .vlsir.spice.Control ctrls = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ctrls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->ctrls(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.NoiseInput)
  return target;
}

size_t NoiseInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.NoiseInput)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vlsir.spice.Control ctrls = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->ctrls_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ctrls(static_cast<int>(i)));
    }
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->analysis_name());
  }

  // string output_p = 2;
  if (this->output_p().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output_p());
  }

  // string output_n = 3;
  if (this->output_n().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output_n());
  }

  // string input_source = 4;
  if (this->input_source().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->input_source());
  }

  // string raw = 6;
  if (this->raw().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->raw());
  }

  // double fstart = 10;
  if (this->fstart() != 0) {
    total_size += 1 + 8;
  }

  // double fstop = 11;
  if (this->fstop() != 0) {
    total_size += 1 + 8;
  }

  // uint64 npts = 12;
  if (this->npts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->npts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NoiseInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.NoiseInput)
  GOOGLE_DCHECK_NE(&from, this);
  const NoiseInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NoiseInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.NoiseInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.NoiseInput)
    MergeFrom(*source);
  }
}

void NoiseInput::MergeFrom(const NoiseInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.NoiseInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ctrls_.MergeFrom(from.ctrls_);
  if (from.analysis_name().size() > 0) {

    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  if (from.output_p().size() > 0) {

    output_p_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_p_);
  }
  if (from.output_n().size() > 0) {

    output_n_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_n_);
  }
  if (from.input_source().size() > 0) {

    input_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_source_);
  }
  if (from.raw().size() > 0) {

    raw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_);
  }
  if (from.fstart() != 0) {
    set_fstart(from.fstart());
  }
  if (from.fstop() != 0) {
    set_fstop(from.fstop());
  }
  if (from.npts() != 0) {
    set_npts(from.npts());
  }
}

void NoiseInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.NoiseInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoiseInput::CopyFrom(const NoiseInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.NoiseInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoiseInput::IsInitialized() const {
  return true;
}

void NoiseInput::Swap(NoiseInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NoiseInput::InternalSwap(NoiseInput* other) {
  using std::swap;
  CastToBase(&ctrls_)->InternalSwap(CastToBase(&other->ctrls_));
  analysis_name_.Swap(&other->analysis_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  output_p_.Swap(&other->output_p_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  output_n_.Swap(&other->output_n_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  input_source_.Swap(&other->input_source_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  raw_.Swap(&other->raw_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fstart_, other->fstart_);
  swap(fstop_, other->fstop_);
  swap(npts_, other->npts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NoiseInput::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

NoiseResult_IntegratedNoiseEntry_DoNotUse::NoiseResult_IntegratedNoiseEntry_DoNotUse() {}
NoiseResult_IntegratedNoiseEntry_DoNotUse::NoiseResult_IntegratedNoiseEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void NoiseResult_IntegratedNoiseEntry_DoNotUse::MergeFrom(const NoiseResult_IntegratedNoiseEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata NoiseResult_IntegratedNoiseEntry_DoNotUse::GetMetadata() const {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[19];
}
void NoiseResult_IntegratedNoiseEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

NoiseResult_MeasurementsEntry_DoNotUse::NoiseResult_MeasurementsEntry_DoNotUse() {}
NoiseResult_MeasurementsEntry_DoNotUse::NoiseResult_MeasurementsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void NoiseResult_MeasurementsEntry_DoNotUse::MergeFrom(const NoiseResult_MeasurementsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata NoiseResult_MeasurementsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[20];
}
void NoiseResult_MeasurementsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void NoiseResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NoiseResult::kAnalysisNameFieldNumber;
const int NoiseResult::kSignalsFieldNumber;
const int NoiseResult::kDataFieldNumber;
const int NoiseResult::kIntegratedNoiseFieldNumber;
const int NoiseResult::kMeasurementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoiseResult::NoiseResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_NoiseResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.NoiseResult)
}
NoiseResult::NoiseResult(const NoiseResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      signals_(from.signals_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  integrated_noise_.MergeFrom(from.integrated_noise_);
  measurements_.MergeFrom(from.measurements_);
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.analysis_name().size() > 0) {
    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.NoiseResult)
}

void NoiseResult::SharedCtor() {
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NoiseResult::~NoiseResult() {
  // @@protoc_insertion_point(destructor:vlsir.spice.NoiseResult)
  SharedDtor();
}

void NoiseResult::SharedDtor() {
  analysis_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NoiseResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NoiseResult::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NoiseResult& NoiseResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_NoiseResult.base);
  return *internal_default_instance();
}


void NoiseResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.NoiseResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signals_.Clear();
  data_.Clear();
  integrated_noise_.Clear();
  measurements_.Clear();
  analysis_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool NoiseResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.NoiseResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string analysis_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_analysis_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.NoiseResult.analysis_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string signals = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_signals()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signals(this->signals_size() - 1).data(),
            static_cast<int>(this->signals(this->signals_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.NoiseResult.signals"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 42u, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, double> integrated_noise = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          NoiseResult_IntegratedNoiseEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              NoiseResult_IntegratedNoiseEntry_DoNotUse,
              ::std::string, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::std::string, double > > parser(&integrated_noise_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.NoiseResult.IntegratedNoiseEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, double> measurements = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          NoiseResult_MeasurementsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              NoiseResult_MeasurementsEntry_DoNotUse,
              ::std::string, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::std::string, double > > parser(&measurements_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.NoiseResult.MeasurementsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.NoiseResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.NoiseResult)
  return false;
#undef DO_
}

void NoiseResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.NoiseResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.NoiseResult.analysis_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->analysis_name(), output);
  }

  // repeated string signals = 3;
  for (int i = 0, n = this->signals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signals(i).data(), static_cast<int>(this->signals(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.NoiseResult.signals");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->signals(i), output);
  }

  // repeated double data = 5;
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _data_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->data().data(), this->data_size(), output);
  }

  // map<string, double> integrated_noise = 10;
  if (!this->integrated_noise().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "vlsir.spice.NoiseResult.IntegratedNoiseEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->integrated_noise().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->integrated_noise().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->integrated_noise().begin();
          it != this->integrated_noise().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<NoiseResult_IntegratedNoiseEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(integrated_noise_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<NoiseResult_IntegratedNoiseEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->integrated_noise().begin();
          it != this->integrated_noise().end(); ++it) {
        entry.reset(integrated_noise_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, double> measurements = 11;
  if (!this->measurements().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "vlsir.spice.NoiseResult.MeasurementsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->measurements().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->measurements().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->measurements().begin();
          it != this->measurements().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<NoiseResult_MeasurementsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(measurements_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<NoiseResult_MeasurementsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->measurements().begin();
          it != this->measurements().end(); ++it) {
        entry.reset(measurements_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.NoiseResult)
}

::google::protobuf::uint8* NoiseResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.NoiseResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.NoiseResult.analysis_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->analysis_name(), target);
  }

  // repeated string signals = 3;
  for (int i = 0, n = this->signals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signals(i).data(), static_cast<int>(this->signals(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.NoiseResult.signals");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->signals(i), target);
  }

  // repeated double data = 5;
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->data_, target);
  }

  // map<string, double> integrated_noise = 10;
  if (!this->integrated_noise().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "vlsir.spice.NoiseResult.IntegratedNoiseEntry.key");
      }
    };

    if (deterministic &&
        this->integrated_noise().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->integrated_noise().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->integrated_noise().begin();
          it != this->integrated_noise().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<NoiseResult_IntegratedNoiseEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(integrated_noise_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<NoiseResult_IntegratedNoiseEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->integrated_noise().begin();
          it != this->integrated_noise().end(); ++it) {
        entry.reset(integrated_noise_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, double> measurements = 11;
  if (!this->measurements().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "vlsir.spice.NoiseResult.MeasurementsEntry.key");
      }
    };

    if (deterministic &&
        this->measurements().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->measurements().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->measurements().begin();
          it != this->measurements().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<NoiseResult_MeasurementsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(measurements_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<NoiseResult_MeasurementsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->measurements().begin();
          it != this->measurements().end(); ++it) {
        entry.reset(measurements_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.NoiseResult)
  return target;
}

size_t NoiseResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.NoiseResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string signals = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->signals_size());
  for (int i = 0, n = this->signals_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->signals(i));
  }

  // repeated double data = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<string, double> integrated_noise = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->integrated_noise_size());
  {
    ::std::unique_ptr<NoiseResult_IntegratedNoiseEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, double >::const_iterator
        it = this->integrated_noise().begin();
        it != this->integrated_noise().end(); ++it) {
      entry.reset(integrated_noise_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, double> measurements = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->measurements_size());
  {
    ::std::unique_ptr<NoiseResult_MeasurementsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, double >::const_iterator
        it = this->measurements().begin();
        it != this->measurements().end(); ++it) {
      entry.reset(measurements_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->analysis_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NoiseResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.NoiseResult)
  GOOGLE_DCHECK_NE(&from, this);
  const NoiseResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NoiseResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.NoiseResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.NoiseResult)
    MergeFrom(*source);
  }
}

void NoiseResult::MergeFrom(const NoiseResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.NoiseResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signals_.MergeFrom(from.signals_);
  data_.MergeFrom(from.data_);
  integrated_noise_.MergeFrom(from.integrated_noise_);
  measurements_.MergeFrom(from.measurements_);
  if (from.analysis_name().size() > 0) {

    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
}

void NoiseResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.NoiseResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoiseResult::CopyFrom(const NoiseResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.NoiseResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoiseResult::IsInitialized() const {
  return true;
}

void NoiseResult::Swap(NoiseResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NoiseResult::InternalSwap(NoiseResult* other) {
  using std::swap;
  signals_.InternalSwap(CastToBase(&other->signals_));
  data_.InternalSwap(&other->data_);
  integrated_noise_.Swap(&other->integrated_noise_);
  measurements_.Swap(&other->measurements_);
  analysis_name_.Swap(&other->analysis_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NoiseResult::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SweepInput::InitAsDefaultInstance() {
  ::vlsir::spice::_SweepInput_default_instance_._instance.get_mutable()->sweep_ = const_cast< ::vlsir::spice::Sweep*>(
      ::vlsir::spice::Sweep::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SweepInput::kAnalysisNameFieldNumber;
const int SweepInput::kVariableFieldNumber;
const int SweepInput::kSweepFieldNumber;
const int SweepInput::kAnFieldNumber;
const int SweepInput::kCtrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SweepInput::SweepInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_Analysis.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.SweepInput)
}
SweepInput::SweepInput(const SweepInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      an_(from.an_),
      ctrls_(from.ctrls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.analysis_name().size() > 0) {
    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  variable_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.variable().size() > 0) {
    variable_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variable_);
  }
  if (from.has_sweep()) {
    sweep_ = new ::vlsir::spice::Sweep(*from.sweep_);
  } else {
    sweep_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.SweepInput)
}

void SweepInput::SharedCtor() {
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  variable_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sweep_ = NULL;
}

SweepInput::~SweepInput() {
  // @@protoc_insertion_point(destructor:vlsir.spice.SweepInput)
  SharedDtor();
}

void SweepInput::SharedDtor() {
  analysis_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  variable_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sweep_;
}

void SweepInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SweepInput::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SweepInput& SweepInput::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_Analysis.base);
  return *internal_default_instance();
}


void SweepInput::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.SweepInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  an_.Clear();
  ctrls_.Clear();
  analysis_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  variable_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sweep_ != NULL) {
    delete sweep_;
  }
  sweep_ = NULL;
  _internal_metadata_.Clear();
}

bool SweepInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.SweepInput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string analysis_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_analysis_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.SweepInput.analysis_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string variable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variable()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variable().data(), static_cast<int>(this->variable().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.SweepInput.variable"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vlsir.spice.Sweep sweep = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sweep()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vlsir.spice.Analysis an = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_an()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vlsir.spice.Control ctrls = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ctrls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.SweepInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.SweepInput)
  return false;
#undef DO_
}

void SweepInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.SweepInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.SweepInput.analysis_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->analysis_name(), output);
  }

  // string variable = 2;
  if (this->variable().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variable().data(), static_cast<int>(this->variable().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.SweepInput.variable");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->variable(), output);
  }

  // .vlsir.spice.Sweep sweep = 3;
  if (this->has_sweep()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_sweep(), output);
  }

  // repeated .vlsir.spice.Analysis an = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->an_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->an(static_cast<int>(i)),
      output);
  }

  // repeated .vlsir.spice.Control ctrls = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ctrls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->ctrls(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.SweepInput)
}

::google::protobuf::uint8* SweepInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.SweepInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.SweepInput.analysis_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->analysis_name(), target);
  }

  // string variable = 2;
  if (this->variable().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variable().data(), static_cast<int>(this->variable().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.SweepInput.variable");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->variable(), target);
  }

  // .vlsir.spice.Sweep sweep = 3;
  if (this->has_sweep()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_sweep(), deterministic, target);
  }

  // repeated .vlsir.spice.Analysis an = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->an_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->an(static_cast<int>(i)), deterministic, target);
  }

  // repeated .vlsir.spice.Control ctrls = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ctrls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->ctrls(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.SweepInput)
  return target;
}

size_t SweepInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.SweepInput)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vlsir.spice.Analysis an = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->an_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->an(static_cast<int>(i)));
    }
  }

  // repeated .vlsir.spice.Control ctrls = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->ctrls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ctrls(static_cast<int>(i)));
    }
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->analysis_name());
  }

  // string variable = 2;
  if (this->variable().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variable());
  }

  // .vlsir.spice.Sweep sweep = 3;
  if (this->has_sweep()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sweep_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SweepInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.SweepInput)
  GOOGLE_DCHECK_NE(&from, this);
  const SweepInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SweepInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.SweepInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.SweepInput)
    MergeFrom(*source);
  }
}

void SweepInput::MergeFrom(const SweepInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.SweepInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  an_.MergeFrom(from.an_);
  ctrls_.MergeFrom(from.ctrls_);
  if (from.analysis_name().size() > 0) {

    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  if (from.variable().size() > 0) {

    variable_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variable_);
  }
  if (from.has_sweep()) {
    mutable_sweep()->::vlsir::spice::Sweep::MergeFrom(from.sweep());
  }
}

void SweepInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.SweepInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SweepInput::CopyFrom(const SweepInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.SweepInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SweepInput::IsInitialized() const {
  return true;
}

void SweepInput::Swap(SweepInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SweepInput::InternalSwap(SweepInput* other) {
  using std::swap;
  CastToBase(&an_)->InternalSwap(CastToBase(&other->an_));
  CastToBase(&ctrls_)->InternalSwap(CastToBase(&other->ctrls_));
  analysis_name_.Swap(&other->analysis_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  variable_.Swap(&other->variable_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sweep_, other->sweep_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SweepInput::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SweepResult::InitAsDefaultInstance() {
  ::vlsir::spice::_SweepResult_default_instance_._instance.get_mutable()->sweep_ = const_cast< ::vlsir::spice::Sweep*>(
      ::vlsir::spice::Sweep::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SweepResult::kAnalysisNameFieldNumber;
const int SweepResult::kVariableFieldNumber;
const int SweepResult::kSweepFieldNumber;
const int SweepResult::kAnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SweepResult::SweepResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_AnalysisResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.SweepResult)
}
SweepResult::SweepResult(const SweepResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      an_(from.an_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.analysis_name().size() > 0) {
    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  variable_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.variable().size() > 0) {
    variable_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variable_);
  }
  if (from.has_sweep()) {
    sweep_ = new ::vlsir::spice::Sweep(*from.sweep_);
  } else {
    sweep_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.SweepResult)
}

void SweepResult::SharedCtor() {
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  variable_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sweep_ = NULL;
}

SweepResult::~SweepResult() {
  // @@protoc_insertion_point(destructor:vlsir.spice.SweepResult)
  SharedDtor();
}

void SweepResult::SharedDtor() {
  analysis_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  variable_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sweep_;
}

void SweepResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SweepResult::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SweepResult& SweepResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_AnalysisResult.base);
  return *internal_default_instance();
}


void SweepResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.SweepResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  an_.Clear();
  analysis_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  variable_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sweep_ != NULL) {
    delete sweep_;
  }
  sweep_ = NULL;
  _internal_metadata_.Clear();
}

bool SweepResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.SweepResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string analysis_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_analysis_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.SweepResult.analysis_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string variable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variable()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variable().data(), static_cast<int>(this->variable().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.SweepResult.variable"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vlsir.spice.Sweep sweep = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sweep()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vlsir.spice.AnalysisResult an = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_an()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.SweepResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.SweepResult)
  return false;
#undef DO_
}

void SweepResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.SweepResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.SweepResult.analysis_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->analysis_name(), output);
  }

  // string variable = 2;
  if (this->variable().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variable().data(), static_cast<int>(this->variable().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.SweepResult.variable");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->variable(), output);
  }

  // .vlsir.spice.Sweep sweep = 3;
  if (this->has_sweep()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_sweep(), output);
  }

  // repeated .vlsir.spice.AnalysisResult an = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->an_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->an(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.SweepResult)
}

::google::protobuf::uint8* SweepResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.SweepResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.SweepResult.analysis_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->analysis_name(), target);
  }

  // string variable = 2;
  if (this->variable().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variable().data(), static_cast<int>(this->variable().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.SweepResult.variable");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->variable(), target);
  }

  // .vlsir.spice.Sweep sweep = 3;
  if (this->has_sweep()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_sweep(), deterministic, target);
  }

  // repeated .vlsir.spice.AnalysisResult an = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->an_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->an(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.SweepResult)
  return target;
}

size_t SweepResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.SweepResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vlsir.spice.AnalysisResult an = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->an_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->an(static_cast<int>(i)));
    }
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->analysis_name());
  }

  // string variable = 2;
  if (this->variable().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variable());
  }

  // .vlsir.spice.Sweep sweep = 3;
  if (this->has_sweep()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sweep_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SweepResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.SweepResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SweepResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SweepResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.SweepResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.SweepResult)
    MergeFrom(*source);
  }
}

void SweepResult::MergeFrom(const SweepResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.SweepResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  an_.MergeFrom(from.an_);
  if (from.analysis_name().size() > 0) {

    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  if (from.variable().size() > 0) {

    variable_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variable_);
  }
  if (from.has_sweep()) {
    mutable_sweep()->::vlsir::spice::Sweep::MergeFrom(from.sweep());
  }
}

void SweepResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.SweepResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SweepResult::CopyFrom(const SweepResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.SweepResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SweepResult::IsInitialized() const {
  return true;
}

void SweepResult::Swap(SweepResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SweepResult::InternalSwap(SweepResult* other) {
  using std::swap;
  CastToBase(&an_)->InternalSwap(CastToBase(&other->an_));
  analysis_name_.Swap(&other->analysis_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  variable_.Swap(&other->variable_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sweep_, other->sweep_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SweepResult::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MonteInput::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MonteInput::kAnalysisNameFieldNumber;
const int MonteInput::kNptsFieldNumber;
const int MonteInput::kSeedFieldNumber;
const int MonteInput::kAnFieldNumber;
const int MonteInput::kCtrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MonteInput::MonteInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_Analysis.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.MonteInput)
}
MonteInput::MonteInput(const MonteInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      an_(from.an_),
      ctrls_(from.ctrls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.analysis_name().size() > 0) {
    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  ::memcpy(&npts_, &from.npts_,
    static_cast<size_t>(reinterpret_cast<char*>(&seed_) -
    reinterpret_cast<char*>(&npts_)) + sizeof(seed_));
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.MonteInput)
}

void MonteInput::SharedCtor() {
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&npts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seed_) -
      reinterpret_cast<char*>(&npts_)) + sizeof(seed_));
}

MonteInput::~MonteInput() {
  // @@protoc_insertion_point(destructor:vlsir.spice.MonteInput)
  SharedDtor();
}

void MonteInput::SharedDtor() {
  analysis_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MonteInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MonteInput::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MonteInput& MonteInput::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_Analysis.base);
  return *internal_default_instance();
}


void MonteInput::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.MonteInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  an_.Clear();
  ctrls_.Clear();
  analysis_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&npts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seed_) -
      reinterpret_cast<char*>(&npts_)) + sizeof(seed_));
  _internal_metadata_.Clear();
}

bool MonteInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.MonteInput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string analysis_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_analysis_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.MonteInput.analysis_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 npts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &npts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 seed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vlsir.spice.Analysis an = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_an()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vlsir.spice.Control ctrls = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ctrls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.MonteInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.MonteInput)
  return false;
#undef DO_
}

void MonteInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.MonteInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.MonteInput.analysis_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->analysis_name(), output);
  }

  // int64 npts = 2;
  if (this->npts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->npts(), output);
  }

  // int64 seed = 3;
  if (this->seed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->seed(), output);
  }

  // repeated .vlsir.spice.Analysis an = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->an_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->an(static_cast<int>(i)),
      output);
  }

  // repeated .vlsir.spice.Control ctrls = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ctrls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->ctrls(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.MonteInput)
}

::google::protobuf::uint8* MonteInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.MonteInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.MonteInput.analysis_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->analysis_name(), target);
  }

  // int64 npts = 2;
  if (this->npts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->npts(), target);
  }

  // int64 seed = 3;
  if (this->seed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->seed(), target);
  }

  // repeated .vlsir.spice.Analysis an = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->an_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->an(static_cast<int>(i)), deterministic, target);
  }

  // repeated .vlsir.spice.Control ctrls = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ctrls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->ctrls(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.MonteInput)
  return target;
}

size_t MonteInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.MonteInput)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vlsir.spice.Analysis an = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->an_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->an(static_cast<int>(i)));
    }
  }

  // repeated .vlsir.spice.Control ctrls = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->ctrls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ctrls(static_cast<int>(i)));
    }
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->analysis_name());
  }

  // int64 npts = 2;
  if (this->npts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->npts());
  }

  // int64 seed = 3;
  if (this->seed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonteInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.MonteInput)
  GOOGLE_DCHECK_NE(&from, this);
  const MonteInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MonteInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.MonteInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.MonteInput)
    MergeFrom(*source);
  }
}

void MonteInput::MergeFrom(const MonteInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.MonteInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  an_.MergeFrom(from.an_);
  ctrls_.MergeFrom(from.ctrls_);
  if (from.analysis_name().size() > 0) {

    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  if (from.npts() != 0) {
    set_npts(from.npts());
  }
  if (from.seed() != 0) {
    set_seed(from.seed());
  }
}

void MonteInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.MonteInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonteInput::CopyFrom(const MonteInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.MonteInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonteInput::IsInitialized() const {
  return true;
}

void MonteInput::Swap(MonteInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MonteInput::InternalSwap(MonteInput* other) {
  using std::swap;
  CastToBase(&an_)->InternalSwap(CastToBase(&other->an_));
  CastToBase(&ctrls_)->InternalSwap(CastToBase(&other->ctrls_));
  analysis_name_.Swap(&other->analysis_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(npts_, other->npts_);
  swap(seed_, other->seed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MonteInput::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MonteResult::InitAsDefaultInstance() {
  ::vlsir::spice::_MonteResult_default_instance_._instance.get_mutable()->sweep_ = const_cast< ::vlsir::spice::Sweep*>(
      ::vlsir::spice::Sweep::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MonteResult::kAnalysisNameFieldNumber;
const int MonteResult::kVariableFieldNumber;
const int MonteResult::kSweepFieldNumber;
const int MonteResult::kAnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MonteResult::MonteResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_AnalysisResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.MonteResult)
}
MonteResult::MonteResult(const MonteResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      an_(from.an_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.analysis_name().size() > 0) {
    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  variable_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.variable().size() > 0) {
    variable_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variable_);
  }
  if (from.has_sweep()) {
    sweep_ = new ::vlsir::spice::Sweep(*from.sweep_);
  } else {
    sweep_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.MonteResult)
}

void MonteResult::SharedCtor() {
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  variable_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sweep_ = NULL;
}

MonteResult::~MonteResult() {
  // @@protoc_insertion_point(destructor:vlsir.spice.MonteResult)
  SharedDtor();
}

void MonteResult::SharedDtor() {
  analysis_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  variable_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sweep_;
}

void MonteResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MonteResult::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MonteResult& MonteResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_AnalysisResult.base);
  return *internal_default_instance();
}


void MonteResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.MonteResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  an_.Clear();
  analysis_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  variable_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sweep_ != NULL) {
    delete sweep_;
  }
  sweep_ = NULL;
  _internal_metadata_.Clear();
}

bool MonteResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.MonteResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string analysis_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_analysis_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.MonteResult.analysis_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string variable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variable()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variable().data(), static_cast<int>(this->variable().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.MonteResult.variable"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vlsir.spice.Sweep sweep = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sweep()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vlsir.spice.AnalysisResult an = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_an()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.MonteResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.MonteResult)
  return false;
#undef DO_
}

void MonteResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.MonteResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.MonteResult.analysis_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->analysis_name(), output);
  }

  // string variable = 2;
  if (this->variable().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variable().data(), static_cast<int>(this->variable().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.MonteResult.variable");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->variable(), output);
  }

  // .vlsir.spice.Sweep sweep = 3;
  if (this->has_sweep()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_sweep(), output);
  }

  // repeated .vlsir.spice.AnalysisResult an = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->an_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->an(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.MonteResult)
}

::google::protobuf::uint8* MonteResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.MonteResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.MonteResult.analysis_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->analysis_name(), target);
  }

  // string variable = 2;
  if (this->variable().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variable().data(), static_cast<int>(this->variable().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.MonteResult.variable");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->variable(), target);
  }

  // .vlsir.spice.Sweep sweep = 3;
  if (this->has_sweep()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_sweep(), deterministic, target);
  }

  // repeated .vlsir.spice.AnalysisResult an = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->an_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->an(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.MonteResult)
  return target;
}

size_t MonteResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.MonteResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vlsir.spice.AnalysisResult an = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->an_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->an(static_cast<int>(i)));
    }
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->analysis_name());
  }

  // string variable = 2;
  if (this->variable().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variable());
  }

  // .vlsir.spice.Sweep sweep = 3;
  if (this->has_sweep()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sweep_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonteResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.MonteResult)
  GOOGLE_DCHECK_NE(&from, this);
  const MonteResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MonteResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.MonteResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.MonteResult)
    MergeFrom(*source);
  }
}

void MonteResult::MergeFrom(const MonteResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.MonteResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  an_.MergeFrom(from.an_);
  if (from.analysis_name().size() > 0) {

    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  if (from.variable().size() > 0) {

    variable_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variable_);
  }
  if (from.has_sweep()) {
    mutable_sweep()->::vlsir::spice::Sweep::MergeFrom(from.sweep());
  }
}

void MonteResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.MonteResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonteResult::CopyFrom(const MonteResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.MonteResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonteResult::IsInitialized() const {
  return true;
}

void MonteResult::Swap(MonteResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MonteResult::InternalSwap(MonteResult* other) {
  using std::swap;
  CastToBase(&an_)->InternalSwap(CastToBase(&other->an_));
  analysis_name_.Swap(&other->analysis_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  variable_.Swap(&other->variable_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sweep_, other->sweep_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MonteResult::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CustomAnalysisInput::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomAnalysisInput::kAnalysisNameFieldNumber;
const int CustomAnalysisInput::kCmdFieldNumber;
const int CustomAnalysisInput::kCtrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomAnalysisInput::CustomAnalysisInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_CustomAnalysisInput.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.CustomAnalysisInput)
}
CustomAnalysisInput::CustomAnalysisInput(const CustomAnalysisInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ctrls_(from.ctrls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.analysis_name().size() > 0) {
    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cmd().size() > 0) {
    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.CustomAnalysisInput)
}

void CustomAnalysisInput::SharedCtor() {
  analysis_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CustomAnalysisInput::~CustomAnalysisInput() {
  // @@protoc_insertion_point(destructor:vlsir.spice.CustomAnalysisInput)
  SharedDtor();
}

void CustomAnalysisInput::SharedDtor() {
  analysis_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CustomAnalysisInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CustomAnalysisInput::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CustomAnalysisInput& CustomAnalysisInput::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_CustomAnalysisInput.base);
  return *internal_default_instance();
}


void CustomAnalysisInput::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.CustomAnalysisInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ctrls_.Clear();
  analysis_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool CustomAnalysisInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.CustomAnalysisInput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string analysis_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_analysis_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.CustomAnalysisInput.analysis_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cmd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cmd().data(), static_cast<int>(this->cmd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.CustomAnalysisInput.cmd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vlsir.spice.Control ctrls = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ctrls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.CustomAnalysisInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.CustomAnalysisInput)
  return false;
#undef DO_
}

void CustomAnalysisInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.CustomAnalysisInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.CustomAnalysisInput.analysis_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->analysis_name(), output);
  }

  // string cmd = 2;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), static_cast<int>(this->cmd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.CustomAnalysisInput.cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cmd(), output);
  }

  // repeated .vlsir.spice.Control ctrls = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ctrls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->ctrls(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.CustomAnalysisInput)
}

::google::protobuf::uint8* CustomAnalysisInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.CustomAnalysisInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.CustomAnalysisInput.analysis_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->analysis_name(), target);
  }

  // string cmd = 2;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), static_cast<int>(this->cmd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.CustomAnalysisInput.cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cmd(), target);
  }

  // repeated .vlsir.spice.Control ctrls = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ctrls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->ctrls(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.CustomAnalysisInput)
  return target;
}

size_t CustomAnalysisInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.CustomAnalysisInput)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vlsir.spice.Control ctrls = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->ctrls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ctrls(static_cast<int>(i)));
    }
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->analysis_name());
  }

  // string cmd = 2;
  if (this->cmd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomAnalysisInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.CustomAnalysisInput)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomAnalysisInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CustomAnalysisInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.CustomAnalysisInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.CustomAnalysisInput)
    MergeFrom(*source);
  }
}

void CustomAnalysisInput::MergeFrom(const CustomAnalysisInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.CustomAnalysisInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ctrls_.MergeFrom(from.ctrls_);
  if (from.analysis_name().size() > 0) {

    analysis_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  if (from.cmd().size() > 0) {

    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
}

void CustomAnalysisInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.CustomAnalysisInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomAnalysisInput::CopyFrom(const CustomAnalysisInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.CustomAnalysisInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomAnalysisInput::IsInitialized() const {
  return true;
}

void CustomAnalysisInput::Swap(CustomAnalysisInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomAnalysisInput::InternalSwap(CustomAnalysisInput* other) {
  using std::swap;
  CastToBase(&ctrls_)->InternalSwap(CastToBase(&other->ctrls_));
  analysis_name_.Swap(&other->analysis_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cmd_.Swap(&other->cmd_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CustomAnalysisInput::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CustomAnalysisResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomAnalysisResult::CustomAnalysisResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_CustomAnalysisResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.CustomAnalysisResult)
}
CustomAnalysisResult::CustomAnalysisResult(const CustomAnalysisResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.CustomAnalysisResult)
}

void CustomAnalysisResult::SharedCtor() {
}

CustomAnalysisResult::~CustomAnalysisResult() {
  // @@protoc_insertion_point(destructor:vlsir.spice.CustomAnalysisResult)
  SharedDtor();
}

void CustomAnalysisResult::SharedDtor() {
}

void CustomAnalysisResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CustomAnalysisResult::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CustomAnalysisResult& CustomAnalysisResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_CustomAnalysisResult.base);
  return *internal_default_instance();
}


void CustomAnalysisResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.CustomAnalysisResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool CustomAnalysisResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.CustomAnalysisResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.CustomAnalysisResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.CustomAnalysisResult)
  return false;
#undef DO_
}

void CustomAnalysisResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.CustomAnalysisResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.CustomAnalysisResult)
}

::google::protobuf::uint8* CustomAnalysisResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.CustomAnalysisResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.CustomAnalysisResult)
  return target;
}

size_t CustomAnalysisResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.CustomAnalysisResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomAnalysisResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.CustomAnalysisResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomAnalysisResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CustomAnalysisResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.CustomAnalysisResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.CustomAnalysisResult)
    MergeFrom(*source);
  }
}

void CustomAnalysisResult::MergeFrom(const CustomAnalysisResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.CustomAnalysisResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CustomAnalysisResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.CustomAnalysisResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomAnalysisResult::CopyFrom(const CustomAnalysisResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.CustomAnalysisResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomAnalysisResult::IsInitialized() const {
  return true;
}

void CustomAnalysisResult::Swap(CustomAnalysisResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomAnalysisResult::InternalSwap(CustomAnalysisResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CustomAnalysisResult::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Sweep::InitAsDefaultInstance() {
  ::vlsir::spice::_Sweep_default_instance_.linear_ = const_cast< ::vlsir::spice::LinearSweep*>(
      ::vlsir::spice::LinearSweep::internal_default_instance());
  ::vlsir::spice::_Sweep_default_instance_.log_ = const_cast< ::vlsir::spice::LogSweep*>(
      ::vlsir::spice::LogSweep::internal_default_instance());
  ::vlsir::spice::_Sweep_default_instance_.points_ = const_cast< ::vlsir::spice::PointSweep*>(
      ::vlsir::spice::PointSweep::internal_default_instance());
}
void Sweep::set_allocated_linear(::vlsir::spice::LinearSweep* linear) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_tp();
  if (linear) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      linear = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear, submessage_arena);
    }
    set_has_linear();
    tp_.linear_ = linear;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Sweep.linear)
}
void Sweep::set_allocated_log(::vlsir::spice::LogSweep* log) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_tp();
  if (log) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      log = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    set_has_log();
    tp_.log_ = log;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Sweep.log)
}
void Sweep::set_allocated_points(::vlsir::spice::PointSweep* points) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_tp();
  if (points) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      points = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, points, submessage_arena);
    }
    set_has_points();
    tp_.points_ = points;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Sweep.points)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sweep::kLinearFieldNumber;
const int Sweep::kLogFieldNumber;
const int Sweep::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sweep::Sweep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_Sweep.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.Sweep)
}
Sweep::Sweep(const Sweep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_tp();
  switch (from.tp_case()) {
    case kLinear: {
      mutable_linear()->::vlsir::spice::LinearSweep::MergeFrom(from.linear());
      break;
    }
    case kLog: {
      mutable_log()->::vlsir::spice::LogSweep::MergeFrom(from.log());
      break;
    }
    case kPoints: {
      mutable_points()->::vlsir::spice::PointSweep::MergeFrom(from.points());
      break;
    }
    case TP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.Sweep)
}

void Sweep::SharedCtor() {
  clear_has_tp();
}

Sweep::~Sweep() {
  // @@protoc_insertion_point(destructor:vlsir.spice.Sweep)
  SharedDtor();
}

void Sweep::SharedDtor() {
  if (has_tp()) {
    clear_tp();
  }
}

void Sweep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Sweep::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sweep& Sweep::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_Sweep.base);
  return *internal_default_instance();
}


void Sweep::clear_tp() {
// @@protoc_insertion_point(one_of_clear_start:vlsir.spice.Sweep)
  switch (tp_case()) {
    case kLinear: {
      delete tp_.linear_;
      break;
    }
    case kLog: {
      delete tp_.log_;
      break;
    }
    case kPoints: {
      delete tp_.points_;
      break;
    }
    case TP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TP_NOT_SET;
}


void Sweep::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.Sweep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_tp();
  _internal_metadata_.Clear();
}

bool Sweep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.Sweep)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vlsir.spice.LinearSweep linear = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vlsir.spice.LogSweep log = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vlsir.spice.PointSweep points = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.Sweep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.Sweep)
  return false;
#undef DO_
}

void Sweep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.Sweep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vlsir.spice.LinearSweep linear = 1;
  if (has_linear()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_linear(), output);
  }

  // .vlsir.spice.LogSweep log = 2;
  if (has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_log(), output);
  }

  // .vlsir.spice.PointSweep points = 3;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_points(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.Sweep)
}

::google::protobuf::uint8* Sweep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.Sweep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vlsir.spice.LinearSweep linear = 1;
  if (has_linear()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_linear(), deterministic, target);
  }

  // .vlsir.spice.LogSweep log = 2;
  if (has_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_log(), deterministic, target);
  }

  // .vlsir.spice.PointSweep points = 3;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_points(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.Sweep)
  return target;
}

size_t Sweep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.Sweep)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (tp_case()) {
    // .vlsir.spice.LinearSweep linear = 1;
    case kLinear: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tp_.linear_);
      break;
    }
    // .vlsir.spice.LogSweep log = 2;
    case kLog: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tp_.log_);
      break;
    }
    // .vlsir.spice.PointSweep points = 3;
    case kPoints: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tp_.points_);
      break;
    }
    case TP_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sweep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.Sweep)
  GOOGLE_DCHECK_NE(&from, this);
  const Sweep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sweep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.Sweep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.Sweep)
    MergeFrom(*source);
  }
}

void Sweep::MergeFrom(const Sweep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.Sweep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.tp_case()) {
    case kLinear: {
      mutable_linear()->::vlsir::spice::LinearSweep::MergeFrom(from.linear());
      break;
    }
    case kLog: {
      mutable_log()->::vlsir::spice::LogSweep::MergeFrom(from.log());
      break;
    }
    case kPoints: {
      mutable_points()->::vlsir::spice::PointSweep::MergeFrom(from.points());
      break;
    }
    case TP_NOT_SET: {
      break;
    }
  }
}

void Sweep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.Sweep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sweep::CopyFrom(const Sweep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.Sweep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sweep::IsInitialized() const {
  return true;
}

void Sweep::Swap(Sweep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sweep::InternalSwap(Sweep* other) {
  using std::swap;
  swap(tp_, other->tp_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Sweep::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LinearSweep::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinearSweep::kStartFieldNumber;
const int LinearSweep::kStopFieldNumber;
const int LinearSweep::kStepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinearSweep::LinearSweep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_LinearSweep.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.LinearSweep)
}
LinearSweep::LinearSweep(const LinearSweep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&start_)) + sizeof(step_));
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.LinearSweep)
}

void LinearSweep::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&start_)) + sizeof(step_));
}

LinearSweep::~LinearSweep() {
  // @@protoc_insertion_point(destructor:vlsir.spice.LinearSweep)
  SharedDtor();
}

void LinearSweep::SharedDtor() {
}

void LinearSweep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LinearSweep::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LinearSweep& LinearSweep::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_LinearSweep.base);
  return *internal_default_instance();
}


void LinearSweep::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.LinearSweep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&start_)) + sizeof(step_));
  _internal_metadata_.Clear();
}

bool LinearSweep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.LinearSweep)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double stop = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double step = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.LinearSweep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.LinearSweep)
  return false;
#undef DO_
}

void LinearSweep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.LinearSweep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double start = 1;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->start(), output);
  }

  // double stop = 2;
  if (this->stop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->stop(), output);
  }

  // double step = 3;
  if (this->step() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->step(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.LinearSweep)
}

::google::protobuf::uint8* LinearSweep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.LinearSweep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double start = 1;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->start(), target);
  }

  // double stop = 2;
  if (this->stop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->stop(), target);
  }

  // double step = 3;
  if (this->step() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->step(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.LinearSweep)
  return target;
}

size_t LinearSweep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.LinearSweep)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double start = 1;
  if (this->start() != 0) {
    total_size += 1 + 8;
  }

  // double stop = 2;
  if (this->stop() != 0) {
    total_size += 1 + 8;
  }

  // double step = 3;
  if (this->step() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinearSweep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.LinearSweep)
  GOOGLE_DCHECK_NE(&from, this);
  const LinearSweep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinearSweep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.LinearSweep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.LinearSweep)
    MergeFrom(*source);
  }
}

void LinearSweep::MergeFrom(const LinearSweep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.LinearSweep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.stop() != 0) {
    set_stop(from.stop());
  }
  if (from.step() != 0) {
    set_step(from.step());
  }
}

void LinearSweep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.LinearSweep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearSweep::CopyFrom(const LinearSweep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.LinearSweep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearSweep::IsInitialized() const {
  return true;
}

void LinearSweep::Swap(LinearSweep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinearSweep::InternalSwap(LinearSweep* other) {
  using std::swap;
  swap(start_, other->start_);
  swap(stop_, other->stop_);
  swap(step_, other->step_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LinearSweep::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LogSweep::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogSweep::kStartFieldNumber;
const int LogSweep::kStopFieldNumber;
const int LogSweep::kNptsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogSweep::LogSweep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_LogSweep.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.LogSweep)
}
LogSweep::LogSweep(const LogSweep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&npts_) -
    reinterpret_cast<char*>(&start_)) + sizeof(npts_));
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.LogSweep)
}

void LogSweep::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&npts_) -
      reinterpret_cast<char*>(&start_)) + sizeof(npts_));
}

LogSweep::~LogSweep() {
  // @@protoc_insertion_point(destructor:vlsir.spice.LogSweep)
  SharedDtor();
}

void LogSweep::SharedDtor() {
}

void LogSweep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LogSweep::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogSweep& LogSweep::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_LogSweep.base);
  return *internal_default_instance();
}


void LogSweep::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.LogSweep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&npts_) -
      reinterpret_cast<char*>(&start_)) + sizeof(npts_));
  _internal_metadata_.Clear();
}

bool LogSweep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.LogSweep)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double stop = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double npts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &npts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.LogSweep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.LogSweep)
  return false;
#undef DO_
}

void LogSweep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.LogSweep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double start = 1;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->start(), output);
  }

  // double stop = 2;
  if (this->stop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->stop(), output);
  }

  // double npts = 3;
  if (this->npts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->npts(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.LogSweep)
}

::google::protobuf::uint8* LogSweep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.LogSweep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double start = 1;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->start(), target);
  }

  // double stop = 2;
  if (this->stop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->stop(), target);
  }

  // double npts = 3;
  if (this->npts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->npts(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.LogSweep)
  return target;
}

size_t LogSweep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.LogSweep)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double start = 1;
  if (this->start() != 0) {
    total_size += 1 + 8;
  }

  // double stop = 2;
  if (this->stop() != 0) {
    total_size += 1 + 8;
  }

  // double npts = 3;
  if (this->npts() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogSweep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.LogSweep)
  GOOGLE_DCHECK_NE(&from, this);
  const LogSweep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogSweep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.LogSweep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.LogSweep)
    MergeFrom(*source);
  }
}

void LogSweep::MergeFrom(const LogSweep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.LogSweep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.stop() != 0) {
    set_stop(from.stop());
  }
  if (from.npts() != 0) {
    set_npts(from.npts());
  }
}

void LogSweep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.LogSweep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogSweep::CopyFrom(const LogSweep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.LogSweep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogSweep::IsInitialized() const {
  return true;
}

void LogSweep::Swap(LogSweep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogSweep::InternalSwap(LogSweep* other) {
  using std::swap;
  swap(start_, other->start_);
  swap(stop_, other->stop_);
  swap(npts_, other->npts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LogSweep::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PointSweep::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointSweep::kPointsFieldNumber;
const int PointSweep::kStopFieldNumber;
const int PointSweep::kNptsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointSweep::PointSweep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_PointSweep.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.PointSweep)
}
PointSweep::PointSweep(const PointSweep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stop_, &from.stop_,
    static_cast<size_t>(reinterpret_cast<char*>(&npts_) -
    reinterpret_cast<char*>(&stop_)) + sizeof(npts_));
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.PointSweep)
}

void PointSweep::SharedCtor() {
  ::memset(&stop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&npts_) -
      reinterpret_cast<char*>(&stop_)) + sizeof(npts_));
}

PointSweep::~PointSweep() {
  // @@protoc_insertion_point(destructor:vlsir.spice.PointSweep)
  SharedDtor();
}

void PointSweep::SharedDtor() {
}

void PointSweep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PointSweep::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PointSweep& PointSweep::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_PointSweep.base);
  return *internal_default_instance();
}


void PointSweep::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.PointSweep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  ::memset(&stop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&npts_) -
      reinterpret_cast<char*>(&stop_)) + sizeof(npts_));
  _internal_metadata_.Clear();
}

bool PointSweep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.PointSweep)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_points())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10u, input, this->mutable_points())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double stop = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double npts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &npts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.PointSweep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.PointSweep)
  return false;
#undef DO_
}

void PointSweep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.PointSweep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double points = 1;
  if (this->points_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _points_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->points().data(), this->points_size(), output);
  }

  // double stop = 2;
  if (this->stop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->stop(), output);
  }

  // double npts = 3;
  if (this->npts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->npts(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.PointSweep)
}

::google::protobuf::uint8* PointSweep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.PointSweep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double points = 1;
  if (this->points_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _points_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->points_, target);
  }

  // double stop = 2;
  if (this->stop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->stop(), target);
  }

  // double npts = 3;
  if (this->npts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->npts(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.PointSweep)
  return target;
}

size_t PointSweep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.PointSweep)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _points_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // double stop = 2;
  if (this->stop() != 0) {
    total_size += 1 + 8;
  }

  // double npts = 3;
  if (this->npts() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointSweep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.PointSweep)
  GOOGLE_DCHECK_NE(&from, this);
  const PointSweep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PointSweep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.PointSweep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.PointSweep)
    MergeFrom(*source);
  }
}

void PointSweep::MergeFrom(const PointSweep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.PointSweep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.stop() != 0) {
    set_stop(from.stop());
  }
  if (from.npts() != 0) {
    set_npts(from.npts());
  }
}

void PointSweep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.PointSweep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointSweep::CopyFrom(const PointSweep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.PointSweep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointSweep::IsInitialized() const {
  return true;
}

void PointSweep::Swap(PointSweep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointSweep::InternalSwap(PointSweep* other) {
  using std::swap;
  points_.InternalSwap(&other->points_);
  swap(stop_, other->stop_);
  swap(npts_, other->npts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PointSweep::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Control::InitAsDefaultInstance() {
  ::vlsir::spice::_Control_default_instance_.include_ = const_cast< ::vlsir::spice::Include*>(
      ::vlsir::spice::Include::internal_default_instance());
  ::vlsir::spice::_Control_default_instance_.lib_ = const_cast< ::vlsir::spice::LibInclude*>(
      ::vlsir::spice::LibInclude::internal_default_instance());
  ::vlsir::spice::_Control_default_instance_.save_ = const_cast< ::vlsir::spice::Save*>(
      ::vlsir::spice::Save::internal_default_instance());
  ::vlsir::spice::_Control_default_instance_.meas_ = const_cast< ::vlsir::spice::Meas*>(
      ::vlsir::spice::Meas::internal_default_instance());
  ::vlsir::spice::_Control_default_instance_.param_ = const_cast< ::vlsir::utils::Param*>(
      ::vlsir::utils::Param::internal_default_instance());
  ::vlsir::spice::_Control_default_instance_.literal_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Control::set_allocated_include(::vlsir::spice::Include* include) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ctrl();
  if (include) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      include = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, include, submessage_arena);
    }
    set_has_include();
    ctrl_.include_ = include;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Control.include)
}
void Control::set_allocated_lib(::vlsir::spice::LibInclude* lib) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ctrl();
  if (lib) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lib = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lib, submessage_arena);
    }
    set_has_lib();
    ctrl_.lib_ = lib;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Control.lib)
}
void Control::set_allocated_save(::vlsir::spice::Save* save) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ctrl();
  if (save) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      save = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, save, submessage_arena);
    }
    set_has_save();
    ctrl_.save_ = save;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Control.save)
}
void Control::set_allocated_meas(::vlsir::spice::Meas* meas) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ctrl();
  if (meas) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      meas = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, meas, submessage_arena);
    }
    set_has_meas();
    ctrl_.meas_ = meas;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Control.meas)
}
void Control::set_allocated_param(::vlsir::utils::Param* param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ctrl();
  if (param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    set_has_param();
    ctrl_.param_ = param;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Control.param)
}
void Control::clear_param() {
  if (has_param()) {
    delete ctrl_.param_;
    clear_has_ctrl();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Control::kIncludeFieldNumber;
const int Control::kLibFieldNumber;
const int Control::kSaveFieldNumber;
const int Control::kMeasFieldNumber;
const int Control::kParamFieldNumber;
const int Control::kLiteralFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Control::Control()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_Control.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.Control)
}
Control::Control(const Control& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_ctrl();
  switch (from.ctrl_case()) {
    case kInclude: {
      mutable_include()->::vlsir::spice::Include::MergeFrom(from.include());
      break;
    }
    case kLib: {
      mutable_lib()->::vlsir::spice::LibInclude::MergeFrom(from.lib());
      break;
    }
    case kSave: {
      mutable_save()->::vlsir::spice::Save::MergeFrom(from.save());
      break;
    }
    case kMeas: {
      mutable_meas()->::vlsir::spice::Meas::MergeFrom(from.meas());
      break;
    }
    case kParam: {
      mutable_param()->::vlsir::utils::Param::MergeFrom(from.param());
      break;
    }
    case kLiteral: {
      set_literal(from.literal());
      break;
    }
    case CTRL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.Control)
}

void Control::SharedCtor() {
  clear_has_ctrl();
}

Control::~Control() {
  // @@protoc_insertion_point(destructor:vlsir.spice.Control)
  SharedDtor();
}

void Control::SharedDtor() {
  if (has_ctrl()) {
    clear_ctrl();
  }
}

void Control::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Control::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Control& Control::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_Control.base);
  return *internal_default_instance();
}


void Control::clear_ctrl() {
// @@protoc_insertion_point(one_of_clear_start:vlsir.spice.Control)
  switch (ctrl_case()) {
    case kInclude: {
      delete ctrl_.include_;
      break;
    }
    case kLib: {
      delete ctrl_.lib_;
      break;
    }
    case kSave: {
      delete ctrl_.save_;
      break;
    }
    case kMeas: {
      delete ctrl_.meas_;
      break;
    }
    case kParam: {
      delete ctrl_.param_;
      break;
    }
    case kLiteral: {
      ctrl_.literal_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case CTRL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CTRL_NOT_SET;
}


void Control::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.Control)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ctrl();
  _internal_metadata_.Clear();
}

bool Control::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.Control)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vlsir.spice.Include include = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_include()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vlsir.spice.LibInclude lib = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lib()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vlsir.spice.Save save = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_save()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vlsir.spice.Meas meas = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_meas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vlsir.utils.Param param = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string literal = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_literal()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->literal().data(), static_cast<int>(this->literal().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.Control.literal"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.Control)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.Control)
  return false;
#undef DO_
}

void Control::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.Control)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vlsir.spice.Include include = 1;
  if (has_include()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_include(), output);
  }

  // .vlsir.spice.LibInclude lib = 2;
  if (has_lib()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_lib(), output);
  }

  // .vlsir.spice.Save save = 5;
  if (has_save()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_save(), output);
  }

  // .vlsir.spice.Meas meas = 6;
  if (has_meas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_meas(), output);
  }

  // .vlsir.utils.Param param = 7;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_param(), output);
  }

  // string literal = 10;
  if (has_literal()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->literal().data(), static_cast<int>(this->literal().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.Control.literal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->literal(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.Control)
}

::google::protobuf::uint8* Control::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.Control)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vlsir.spice.Include include = 1;
  if (has_include()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_include(), deterministic, target);
  }

  // .vlsir.spice.LibInclude lib = 2;
  if (has_lib()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_lib(), deterministic, target);
  }

  // .vlsir.spice.Save save = 5;
  if (has_save()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_save(), deterministic, target);
  }

  // .vlsir.spice.Meas meas = 6;
  if (has_meas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_meas(), deterministic, target);
  }

  // .vlsir.utils.Param param = 7;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_param(), deterministic, target);
  }

  // string literal = 10;
  if (has_literal()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->literal().data(), static_cast<int>(this->literal().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.Control.literal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->literal(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.Control)
  return target;
}

size_t Control::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.Control)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (ctrl_case()) {
    // .vlsir.spice.Include include = 1;
    case kInclude: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ctrl_.include_);
      break;
    }
    // .vlsir.spice.LibInclude lib = 2;
    case kLib: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ctrl_.lib_);
      break;
    }
    // .vlsir.spice.Save save = 5;
    case kSave: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ctrl_.save_);
      break;
    }
    // .vlsir.spice.Meas meas = 6;
    case kMeas: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ctrl_.meas_);
      break;
    }
    // .vlsir.utils.Param param = 7;
    case kParam: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ctrl_.param_);
      break;
    }
    // string literal = 10;
    case kLiteral: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->literal());
      break;
    }
    case CTRL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Control::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.Control)
  GOOGLE_DCHECK_NE(&from, this);
  const Control* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Control>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.Control)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.Control)
    MergeFrom(*source);
  }
}

void Control::MergeFrom(const Control& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.Control)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ctrl_case()) {
    case kInclude: {
      mutable_include()->::vlsir::spice::Include::MergeFrom(from.include());
      break;
    }
    case kLib: {
      mutable_lib()->::vlsir::spice::LibInclude::MergeFrom(from.lib());
      break;
    }
    case kSave: {
      mutable_save()->::vlsir::spice::Save::MergeFrom(from.save());
      break;
    }
    case kMeas: {
      mutable_meas()->::vlsir::spice::Meas::MergeFrom(from.meas());
      break;
    }
    case kParam: {
      mutable_param()->::vlsir::utils::Param::MergeFrom(from.param());
      break;
    }
    case kLiteral: {
      set_literal(from.literal());
      break;
    }
    case CTRL_NOT_SET: {
      break;
    }
  }
}

void Control::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control::CopyFrom(const Control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control::IsInitialized() const {
  return true;
}

void Control::Swap(Control* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Control::InternalSwap(Control* other) {
  using std::swap;
  swap(ctrl_, other->ctrl_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Control::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Save::InitAsDefaultInstance() {
  ::vlsir::spice::_Save_default_instance_.mode_ = 0;
  ::vlsir::spice::_Save_default_instance_.signal_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Save::kModeFieldNumber;
const int Save::kSignalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Save::Save()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_Save.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.Save)
}
Save::Save(const Save& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_save();
  switch (from.save_case()) {
    case kMode: {
      set_mode(from.mode());
      break;
    }
    case kSignal: {
      set_signal(from.signal());
      break;
    }
    case SAVE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.Save)
}

void Save::SharedCtor() {
  clear_has_save();
}

Save::~Save() {
  // @@protoc_insertion_point(destructor:vlsir.spice.Save)
  SharedDtor();
}

void Save::SharedDtor() {
  if (has_save()) {
    clear_save();
  }
}

void Save::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Save::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Save& Save::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_Save.base);
  return *internal_default_instance();
}


void Save::clear_save() {
// @@protoc_insertion_point(one_of_clear_start:vlsir.spice.Save)
  switch (save_case()) {
    case kMode: {
      // No need to clear
      break;
    }
    case kSignal: {
      save_.signal_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case SAVE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SAVE_NOT_SET;
}


void Save::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.Save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_save();
  _internal_metadata_.Clear();
}

bool Save::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.Save)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vlsir.spice.Save.SaveMode mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::vlsir::spice::Save_SaveMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string signal = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signal()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signal().data(), static_cast<int>(this->signal().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.Save.signal"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.Save)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.Save)
  return false;
#undef DO_
}

void Save::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.Save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vlsir.spice.Save.SaveMode mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // string signal = 2;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signal().data(), static_cast<int>(this->signal().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.Save.signal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->signal(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.Save)
}

::google::protobuf::uint8* Save::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.Save)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vlsir.spice.Save.SaveMode mode = 1;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // string signal = 2;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signal().data(), static_cast<int>(this->signal().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.Save.signal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signal(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.Save)
  return target;
}

size_t Save::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.Save)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (save_case()) {
    // .vlsir.spice.Save.SaveMode mode = 1;
    case kMode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
      break;
    }
    // string signal = 2;
    case kSignal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signal());
      break;
    }
    case SAVE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Save::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.Save)
  GOOGLE_DCHECK_NE(&from, this);
  const Save* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Save>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.Save)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.Save)
    MergeFrom(*source);
  }
}

void Save::MergeFrom(const Save& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.Save)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.save_case()) {
    case kMode: {
      set_mode(from.mode());
      break;
    }
    case kSignal: {
      set_signal(from.signal());
      break;
    }
    case SAVE_NOT_SET: {
      break;
    }
  }
}

void Save::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.Save)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Save::CopyFrom(const Save& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.Save)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Save::IsInitialized() const {
  return true;
}

void Save::Swap(Save* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Save::InternalSwap(Save* other) {
  using std::swap;
  swap(save_, other->save_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Save::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Include::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Include::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Include::Include()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_Include.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.Include)
}
Include::Include(const Include& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.Include)
}

void Include::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Include::~Include() {
  // @@protoc_insertion_point(destructor:vlsir.spice.Include)
  SharedDtor();
}

void Include::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Include::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Include::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Include& Include::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_Include.base);
  return *internal_default_instance();
}


void Include::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.Include)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Include::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.Include)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.Include.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.Include)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.Include)
  return false;
#undef DO_
}

void Include::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.Include)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.Include.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.Include)
}

::google::protobuf::uint8* Include::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.Include)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.Include.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.Include)
  return target;
}

size_t Include::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.Include)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Include::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.Include)
  GOOGLE_DCHECK_NE(&from, this);
  const Include* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Include>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.Include)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.Include)
    MergeFrom(*source);
  }
}

void Include::MergeFrom(const Include& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.Include)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void Include::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.Include)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Include::CopyFrom(const Include& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.Include)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Include::IsInitialized() const {
  return true;
}

void Include::Swap(Include* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Include::InternalSwap(Include* other) {
  using std::swap;
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Include::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LibInclude::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LibInclude::kPathFieldNumber;
const int LibInclude::kSectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LibInclude::LibInclude()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_LibInclude.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.LibInclude)
}
LibInclude::LibInclude(const LibInclude& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  section_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.section().size() > 0) {
    section_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.section_);
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.LibInclude)
}

void LibInclude::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  section_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LibInclude::~LibInclude() {
  // @@protoc_insertion_point(destructor:vlsir.spice.LibInclude)
  SharedDtor();
}

void LibInclude::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  section_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LibInclude::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LibInclude::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LibInclude& LibInclude::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_LibInclude.base);
  return *internal_default_instance();
}


void LibInclude::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.LibInclude)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  section_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool LibInclude::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.LibInclude)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.LibInclude.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string section = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_section()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->section().data(), static_cast<int>(this->section().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.LibInclude.section"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.LibInclude)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.LibInclude)
  return false;
#undef DO_
}

void LibInclude::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.LibInclude)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.LibInclude.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // string section = 2;
  if (this->section().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->section().data(), static_cast<int>(this->section().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.LibInclude.section");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->section(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.LibInclude)
}

::google::protobuf::uint8* LibInclude::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.LibInclude)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.LibInclude.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // string section = 2;
  if (this->section().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->section().data(), static_cast<int>(this->section().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.LibInclude.section");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->section(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.LibInclude)
  return target;
}

size_t LibInclude::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.LibInclude)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // string section = 2;
  if (this->section().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->section());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LibInclude::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.LibInclude)
  GOOGLE_DCHECK_NE(&from, this);
  const LibInclude* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LibInclude>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.LibInclude)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.LibInclude)
    MergeFrom(*source);
  }
}

void LibInclude::MergeFrom(const LibInclude& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.LibInclude)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.section().size() > 0) {

    section_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.section_);
  }
}

void LibInclude::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.LibInclude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LibInclude::CopyFrom(const LibInclude& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.LibInclude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LibInclude::IsInitialized() const {
  return true;
}

void LibInclude::Swap(LibInclude* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LibInclude::InternalSwap(LibInclude* other) {
  using std::swap;
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  section_.Swap(&other->section_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LibInclude::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Meas::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Meas::kAnalysisTypeFieldNumber;
const int Meas::kNameFieldNumber;
const int Meas::kExprFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Meas::Meas()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_Meas.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.Meas)
}
Meas::Meas(const Meas& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  analysis_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.analysis_type().size() > 0) {
    analysis_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_type_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  expr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.expr().size() > 0) {
    expr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expr_);
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.Meas)
}

void Meas::SharedCtor() {
  analysis_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Meas::~Meas() {
  // @@protoc_insertion_point(destructor:vlsir.spice.Meas)
  SharedDtor();
}

void Meas::SharedDtor() {
  analysis_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Meas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Meas::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Meas& Meas::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_Meas.base);
  return *internal_default_instance();
}


void Meas::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.Meas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  analysis_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Meas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.Meas)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string analysis_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_analysis_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->analysis_type().data(), static_cast<int>(this->analysis_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.Meas.analysis_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.Meas.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string expr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->expr().data(), static_cast<int>(this->expr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.Meas.expr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.Meas)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.Meas)
  return false;
#undef DO_
}

void Meas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.Meas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_type = 1;
  if (this->analysis_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_type().data(), static_cast<int>(this->analysis_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.Meas.analysis_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->analysis_type(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.Meas.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string expr = 3;
  if (this->expr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expr().data(), static_cast<int>(this->expr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.Meas.expr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->expr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.Meas)
}

::google::protobuf::uint8* Meas::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.Meas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_type = 1;
  if (this->analysis_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->analysis_type().data(), static_cast<int>(this->analysis_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.Meas.analysis_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->analysis_type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.Meas.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string expr = 3;
  if (this->expr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expr().data(), static_cast<int>(this->expr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.Meas.expr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->expr(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.Meas)
  return target;
}

size_t Meas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.Meas)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string analysis_type = 1;
  if (this->analysis_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->analysis_type());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string expr = 3;
  if (this->expr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->expr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Meas::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.Meas)
  GOOGLE_DCHECK_NE(&from, this);
  const Meas* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Meas>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.Meas)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.Meas)
    MergeFrom(*source);
  }
}

void Meas::MergeFrom(const Meas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.Meas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.analysis_type().size() > 0) {

    analysis_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.analysis_type_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.expr().size() > 0) {

    expr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expr_);
  }
}

void Meas::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.Meas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Meas::CopyFrom(const Meas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.Meas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Meas::IsInitialized() const {
  return true;
}

void Meas::Swap(Meas* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Meas::InternalSwap(Meas* other) {
  using std::swap;
  analysis_type_.Swap(&other->analysis_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  expr_.Swap(&other->expr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Meas::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Signal::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signal::kNameFieldNumber;
const int Signal::kQuantityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signal::Signal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spice_2eproto::scc_info_Signal.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vlsir.spice.Signal)
}
Signal::Signal(const Signal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  quantity_ = from.quantity_;
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.Signal)
}

void Signal::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quantity_ = 0;
}

Signal::~Signal() {
  // @@protoc_insertion_point(destructor:vlsir.spice.Signal)
  SharedDtor();
}

void Signal::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Signal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Signal::descriptor() {
  ::protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Signal& Signal::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spice_2eproto::scc_info_Signal.base);
  return *internal_default_instance();
}


void Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quantity_ = 0;
  _internal_metadata_.Clear();
}

bool Signal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vlsir.spice.Signal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vlsir.spice.Signal.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vlsir.spice.Signal.Quantity quantity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_quantity(static_cast< ::vlsir::spice::Signal_Quantity >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vlsir.spice.Signal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vlsir.spice.Signal)
  return false;
#undef DO_
}

void Signal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vlsir.spice.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.Signal.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .vlsir.spice.Signal.Quantity quantity = 2;
  if (this->quantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->quantity(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vlsir.spice.Signal)
}

::google::protobuf::uint8* Signal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.Signal.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .vlsir.spice.Signal.Quantity quantity = 2;
  if (this->quantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->quantity(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.Signal)
  return target;
}

size_t Signal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.Signal)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .vlsir.spice.Signal.Quantity quantity = 2;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->quantity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Signal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.Signal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.Signal)
    MergeFrom(*source);
  }
}

void Signal::MergeFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.quantity() != 0) {
    set_quantity(from.quantity());
  }
}

void Signal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal::CopyFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {
  return true;
}

void Signal::Swap(Signal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signal::InternalSwap(Signal* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(quantity_, other->quantity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Signal::GetMetadata() const {
  protobuf_spice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace spice
}  // namespace vlsir
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::SimInput* Arena::CreateMaybeMessage< ::vlsir::spice::SimInput >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::SimInput >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::SimResult* Arena::CreateMaybeMessage< ::vlsir::spice::SimResult >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::SimResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::SimOptions* Arena::CreateMaybeMessage< ::vlsir::spice::SimOptions >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::SimOptions >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::Analysis* Arena::CreateMaybeMessage< ::vlsir::spice::Analysis >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::Analysis >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::AnalysisResult* Arena::CreateMaybeMessage< ::vlsir::spice::AnalysisResult >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::AnalysisResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::OpInput* Arena::CreateMaybeMessage< ::vlsir::spice::OpInput >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::OpInput >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::OpResult* Arena::CreateMaybeMessage< ::vlsir::spice::OpResult >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::OpResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::DcInput* Arena::CreateMaybeMessage< ::vlsir::spice::DcInput >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::DcInput >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::DcResult_MeasurementsEntry_DoNotUse* Arena::CreateMaybeMessage< ::vlsir::spice::DcResult_MeasurementsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::DcResult_MeasurementsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::DcResult* Arena::CreateMaybeMessage< ::vlsir::spice::DcResult >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::DcResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::TranInput_IcEntry_DoNotUse* Arena::CreateMaybeMessage< ::vlsir::spice::TranInput_IcEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::TranInput_IcEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::TranInput* Arena::CreateMaybeMessage< ::vlsir::spice::TranInput >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::TranInput >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::TranResult_MeasurementsEntry_DoNotUse* Arena::CreateMaybeMessage< ::vlsir::spice::TranResult_MeasurementsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::TranResult_MeasurementsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::TranResult* Arena::CreateMaybeMessage< ::vlsir::spice::TranResult >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::TranResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::ComplexNum* Arena::CreateMaybeMessage< ::vlsir::spice::ComplexNum >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::ComplexNum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::AcInput* Arena::CreateMaybeMessage< ::vlsir::spice::AcInput >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::AcInput >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::AcResult_MeasurementsEntry_DoNotUse* Arena::CreateMaybeMessage< ::vlsir::spice::AcResult_MeasurementsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::AcResult_MeasurementsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::AcResult* Arena::CreateMaybeMessage< ::vlsir::spice::AcResult >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::AcResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::NoiseInput* Arena::CreateMaybeMessage< ::vlsir::spice::NoiseInput >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::NoiseInput >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::NoiseResult_IntegratedNoiseEntry_DoNotUse* Arena::CreateMaybeMessage< ::vlsir::spice::NoiseResult_IntegratedNoiseEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::NoiseResult_IntegratedNoiseEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::NoiseResult_MeasurementsEntry_DoNotUse* Arena::CreateMaybeMessage< ::vlsir::spice::NoiseResult_MeasurementsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::NoiseResult_MeasurementsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::NoiseResult* Arena::CreateMaybeMessage< ::vlsir::spice::NoiseResult >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::NoiseResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::SweepInput* Arena::CreateMaybeMessage< ::vlsir::spice::SweepInput >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::SweepInput >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::SweepResult* Arena::CreateMaybeMessage< ::vlsir::spice::SweepResult >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::SweepResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::MonteInput* Arena::CreateMaybeMessage< ::vlsir::spice::MonteInput >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::MonteInput >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::MonteResult* Arena::CreateMaybeMessage< ::vlsir::spice::MonteResult >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::MonteResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::CustomAnalysisInput* Arena::CreateMaybeMessage< ::vlsir::spice::CustomAnalysisInput >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::CustomAnalysisInput >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::CustomAnalysisResult* Arena::CreateMaybeMessage< ::vlsir::spice::CustomAnalysisResult >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::CustomAnalysisResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::Sweep* Arena::CreateMaybeMessage< ::vlsir::spice::Sweep >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::Sweep >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::LinearSweep* Arena::CreateMaybeMessage< ::vlsir::spice::LinearSweep >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::LinearSweep >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::LogSweep* Arena::CreateMaybeMessage< ::vlsir::spice::LogSweep >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::LogSweep >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::PointSweep* Arena::CreateMaybeMessage< ::vlsir::spice::PointSweep >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::PointSweep >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::Control* Arena::CreateMaybeMessage< ::vlsir::spice::Control >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::Control >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::Save* Arena::CreateMaybeMessage< ::vlsir::spice::Save >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::Save >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::Include* Arena::CreateMaybeMessage< ::vlsir::spice::Include >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::Include >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::LibInclude* Arena::CreateMaybeMessage< ::vlsir::spice::LibInclude >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::LibInclude >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::Meas* Arena::CreateMaybeMessage< ::vlsir::spice::Meas >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::Meas >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vlsir::spice::Signal* Arena::CreateMaybeMessage< ::vlsir::spice::Signal >(Arena* arena) {
  return Arena::CreateInternal< ::vlsir::spice::Signal >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
