// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spice.proto

#include "spice.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_circuit_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Package_circuit_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AcInput_spice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AcResult_spice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AcResult_MeasurementsEntry_DoNotUse_spice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Analysis_spice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_AnalysisResult_spice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ComplexNum_spice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Control_spice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CustomAnalysisInput_spice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CustomAnalysisResult_spice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DcInput_spice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DcResult_spice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DcResult_MeasurementsEntry_DoNotUse_spice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Include_spice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LibInclude_spice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinearSweep_spice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogSweep_spice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Meas_spice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpInput_spice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpResult_spice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointSweep_spice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Save_spice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimOptions_spice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Sweep_spice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TranInput_spice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TranInput_IcEntry_DoNotUse_spice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TranResult_spice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TranResult_MeasurementsEntry_DoNotUse_spice_2eproto;
namespace vlsir {
namespace spice {
class SimInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimInput> _instance;
} _SimInput_default_instance_;
class SimResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimResult> _instance;
} _SimResult_default_instance_;
class SimOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimOptions> _instance;
} _SimOptions_default_instance_;
class AnalysisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Analysis> _instance;
  const ::vlsir::spice::OpInput* op_;
  const ::vlsir::spice::DcInput* dc_;
  const ::vlsir::spice::TranInput* tran_;
  const ::vlsir::spice::AcInput* ac_;
  const ::vlsir::spice::SweepInput* sweep_;
  const ::vlsir::spice::MonteInput* monte_;
  const ::vlsir::spice::CustomAnalysisInput* custom_;
} _Analysis_default_instance_;
class AnalysisResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnalysisResult> _instance;
  const ::vlsir::spice::OpResult* op_;
  const ::vlsir::spice::DcResult* dc_;
  const ::vlsir::spice::TranResult* tran_;
  const ::vlsir::spice::AcResult* ac_;
  const ::vlsir::spice::SweepResult* sweep_;
  const ::vlsir::spice::MonteResult* monte_;
  const ::vlsir::spice::CustomAnalysisResult* custom_;
} _AnalysisResult_default_instance_;
class OpInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpInput> _instance;
} _OpInput_default_instance_;
class OpResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpResult> _instance;
} _OpResult_default_instance_;
class DcInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DcInput> _instance;
} _DcInput_default_instance_;
class DcResult_MeasurementsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DcResult_MeasurementsEntry_DoNotUse> _instance;
} _DcResult_MeasurementsEntry_DoNotUse_default_instance_;
class DcResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DcResult> _instance;
} _DcResult_default_instance_;
class TranInput_IcEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TranInput_IcEntry_DoNotUse> _instance;
} _TranInput_IcEntry_DoNotUse_default_instance_;
class TranInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TranInput> _instance;
} _TranInput_default_instance_;
class TranResult_MeasurementsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TranResult_MeasurementsEntry_DoNotUse> _instance;
} _TranResult_MeasurementsEntry_DoNotUse_default_instance_;
class TranResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TranResult> _instance;
} _TranResult_default_instance_;
class ComplexNumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ComplexNum> _instance;
} _ComplexNum_default_instance_;
class AcInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcInput> _instance;
} _AcInput_default_instance_;
class AcResult_MeasurementsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcResult_MeasurementsEntry_DoNotUse> _instance;
} _AcResult_MeasurementsEntry_DoNotUse_default_instance_;
class AcResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcResult> _instance;
} _AcResult_default_instance_;
class SweepInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SweepInput> _instance;
} _SweepInput_default_instance_;
class SweepResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SweepResult> _instance;
} _SweepResult_default_instance_;
class MonteInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonteInput> _instance;
} _MonteInput_default_instance_;
class MonteResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonteResult> _instance;
} _MonteResult_default_instance_;
class CustomAnalysisInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CustomAnalysisInput> _instance;
} _CustomAnalysisInput_default_instance_;
class CustomAnalysisResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CustomAnalysisResult> _instance;
} _CustomAnalysisResult_default_instance_;
class SweepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sweep> _instance;
  const ::vlsir::spice::LinearSweep* linear_;
  const ::vlsir::spice::LogSweep* log_;
  const ::vlsir::spice::PointSweep* points_;
} _Sweep_default_instance_;
class LinearSweepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinearSweep> _instance;
} _LinearSweep_default_instance_;
class LogSweepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogSweep> _instance;
} _LogSweep_default_instance_;
class PointSweepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PointSweep> _instance;
} _PointSweep_default_instance_;
class ControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Control> _instance;
  const ::vlsir::spice::Include* include_;
  const ::vlsir::spice::LibInclude* lib_;
  const ::vlsir::spice::Save* save_;
  const ::vlsir::spice::Meas* meas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr literal_;
} _Control_default_instance_;
class SaveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Save> _instance;
  int mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signal_;
} _Save_default_instance_;
class IncludeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Include> _instance;
} _Include_default_instance_;
class LibIncludeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LibInclude> _instance;
} _LibInclude_default_instance_;
class MeasDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Meas> _instance;
} _Meas_default_instance_;
class SignalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Signal> _instance;
} _Signal_default_instance_;
}  // namespace spice
}  // namespace vlsir
static void InitDefaultsscc_info_AcInput_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_AcInput_default_instance_;
    new (ptr) ::vlsir::spice::AcInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::AcInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AcInput_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AcInput_spice_2eproto}, {
      &scc_info_Control_spice_2eproto.base,}};

static void InitDefaultsscc_info_AcResult_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_AcResult_default_instance_;
    new (ptr) ::vlsir::spice::AcResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::AcResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AcResult_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AcResult_spice_2eproto}, {
      &scc_info_ComplexNum_spice_2eproto.base,
      &scc_info_AcResult_MeasurementsEntry_DoNotUse_spice_2eproto.base,}};

static void InitDefaultsscc_info_AcResult_MeasurementsEntry_DoNotUse_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_AcResult_MeasurementsEntry_DoNotUse_default_instance_;
    new (ptr) ::vlsir::spice::AcResult_MeasurementsEntry_DoNotUse();
  }
  ::vlsir::spice::AcResult_MeasurementsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AcResult_MeasurementsEntry_DoNotUse_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AcResult_MeasurementsEntry_DoNotUse_spice_2eproto}, {}};

static void InitDefaultsscc_info_Analysis_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_Analysis_default_instance_;
    new (ptr) ::vlsir::spice::Analysis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::vlsir::spice::_SweepInput_default_instance_;
    new (ptr) ::vlsir::spice::SweepInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::vlsir::spice::_MonteInput_default_instance_;
    new (ptr) ::vlsir::spice::MonteInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::Analysis::InitAsDefaultInstance();
  ::vlsir::spice::SweepInput::InitAsDefaultInstance();
  ::vlsir::spice::MonteInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Analysis_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_Analysis_spice_2eproto}, {
      &scc_info_OpInput_spice_2eproto.base,
      &scc_info_DcInput_spice_2eproto.base,
      &scc_info_TranInput_spice_2eproto.base,
      &scc_info_AcInput_spice_2eproto.base,
      &scc_info_CustomAnalysisInput_spice_2eproto.base,
      &scc_info_Control_spice_2eproto.base,
      &scc_info_Sweep_spice_2eproto.base,}};

static void InitDefaultsscc_info_AnalysisResult_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_AnalysisResult_default_instance_;
    new (ptr) ::vlsir::spice::AnalysisResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::vlsir::spice::_SweepResult_default_instance_;
    new (ptr) ::vlsir::spice::SweepResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::vlsir::spice::_MonteResult_default_instance_;
    new (ptr) ::vlsir::spice::MonteResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::AnalysisResult::InitAsDefaultInstance();
  ::vlsir::spice::SweepResult::InitAsDefaultInstance();
  ::vlsir::spice::MonteResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_AnalysisResult_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_AnalysisResult_spice_2eproto}, {
      &scc_info_OpResult_spice_2eproto.base,
      &scc_info_DcResult_spice_2eproto.base,
      &scc_info_TranResult_spice_2eproto.base,
      &scc_info_AcResult_spice_2eproto.base,
      &scc_info_CustomAnalysisResult_spice_2eproto.base,
      &scc_info_Sweep_spice_2eproto.base,}};

static void InitDefaultsscc_info_ComplexNum_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_ComplexNum_default_instance_;
    new (ptr) ::vlsir::spice::ComplexNum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::ComplexNum::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ComplexNum_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ComplexNum_spice_2eproto}, {}};

static void InitDefaultsscc_info_Control_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_Control_default_instance_;
    new (ptr) ::vlsir::spice::Control();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::Control::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Control_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Control_spice_2eproto}, {
      &scc_info_Include_spice_2eproto.base,
      &scc_info_LibInclude_spice_2eproto.base,
      &scc_info_Save_spice_2eproto.base,
      &scc_info_Meas_spice_2eproto.base,}};

static void InitDefaultsscc_info_CustomAnalysisInput_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_CustomAnalysisInput_default_instance_;
    new (ptr) ::vlsir::spice::CustomAnalysisInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::CustomAnalysisInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CustomAnalysisInput_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CustomAnalysisInput_spice_2eproto}, {
      &scc_info_Control_spice_2eproto.base,}};

static void InitDefaultsscc_info_CustomAnalysisResult_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_CustomAnalysisResult_default_instance_;
    new (ptr) ::vlsir::spice::CustomAnalysisResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::CustomAnalysisResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CustomAnalysisResult_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CustomAnalysisResult_spice_2eproto}, {}};

static void InitDefaultsscc_info_DcInput_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_DcInput_default_instance_;
    new (ptr) ::vlsir::spice::DcInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::DcInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DcInput_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DcInput_spice_2eproto}, {
      &scc_info_Sweep_spice_2eproto.base,
      &scc_info_Control_spice_2eproto.base,}};

static void InitDefaultsscc_info_DcResult_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_DcResult_default_instance_;
    new (ptr) ::vlsir::spice::DcResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::DcResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DcResult_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DcResult_spice_2eproto}, {
      &scc_info_DcResult_MeasurementsEntry_DoNotUse_spice_2eproto.base,}};

static void InitDefaultsscc_info_DcResult_MeasurementsEntry_DoNotUse_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_DcResult_MeasurementsEntry_DoNotUse_default_instance_;
    new (ptr) ::vlsir::spice::DcResult_MeasurementsEntry_DoNotUse();
  }
  ::vlsir::spice::DcResult_MeasurementsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DcResult_MeasurementsEntry_DoNotUse_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DcResult_MeasurementsEntry_DoNotUse_spice_2eproto}, {}};

static void InitDefaultsscc_info_Include_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_Include_default_instance_;
    new (ptr) ::vlsir::spice::Include();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::Include::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Include_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Include_spice_2eproto}, {}};

static void InitDefaultsscc_info_LibInclude_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_LibInclude_default_instance_;
    new (ptr) ::vlsir::spice::LibInclude();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::LibInclude::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LibInclude_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LibInclude_spice_2eproto}, {}};

static void InitDefaultsscc_info_LinearSweep_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_LinearSweep_default_instance_;
    new (ptr) ::vlsir::spice::LinearSweep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::LinearSweep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinearSweep_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LinearSweep_spice_2eproto}, {}};

static void InitDefaultsscc_info_LogSweep_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_LogSweep_default_instance_;
    new (ptr) ::vlsir::spice::LogSweep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::LogSweep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogSweep_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogSweep_spice_2eproto}, {}};

static void InitDefaultsscc_info_Meas_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_Meas_default_instance_;
    new (ptr) ::vlsir::spice::Meas();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::Meas::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Meas_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Meas_spice_2eproto}, {}};

static void InitDefaultsscc_info_OpInput_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_OpInput_default_instance_;
    new (ptr) ::vlsir::spice::OpInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::OpInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpInput_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OpInput_spice_2eproto}, {
      &scc_info_Control_spice_2eproto.base,}};

static void InitDefaultsscc_info_OpResult_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_OpResult_default_instance_;
    new (ptr) ::vlsir::spice::OpResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::OpResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpResult_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OpResult_spice_2eproto}, {}};

static void InitDefaultsscc_info_PointSweep_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_PointSweep_default_instance_;
    new (ptr) ::vlsir::spice::PointSweep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::PointSweep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointSweep_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PointSweep_spice_2eproto}, {}};

static void InitDefaultsscc_info_Save_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_Save_default_instance_;
    new (ptr) ::vlsir::spice::Save();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::Save::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Save_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Save_spice_2eproto}, {}};

static void InitDefaultsscc_info_Signal_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_Signal_default_instance_;
    new (ptr) ::vlsir::spice::Signal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::Signal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Signal_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Signal_spice_2eproto}, {}};

static void InitDefaultsscc_info_SimInput_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_SimInput_default_instance_;
    new (ptr) ::vlsir::spice::SimInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::SimInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SimInput_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_SimInput_spice_2eproto}, {
      &scc_info_Package_circuit_2eproto.base,
      &scc_info_SimOptions_spice_2eproto.base,
      &scc_info_Analysis_spice_2eproto.base,
      &scc_info_Control_spice_2eproto.base,}};

static void InitDefaultsscc_info_SimOptions_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_SimOptions_default_instance_;
    new (ptr) ::vlsir::spice::SimOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::SimOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimOptions_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SimOptions_spice_2eproto}, {
      &scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_SimResult_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_SimResult_default_instance_;
    new (ptr) ::vlsir::spice::SimResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::SimResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimResult_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SimResult_spice_2eproto}, {
      &scc_info_AnalysisResult_spice_2eproto.base,}};

static void InitDefaultsscc_info_Sweep_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_Sweep_default_instance_;
    new (ptr) ::vlsir::spice::Sweep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::Sweep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Sweep_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Sweep_spice_2eproto}, {
      &scc_info_LinearSweep_spice_2eproto.base,
      &scc_info_LogSweep_spice_2eproto.base,
      &scc_info_PointSweep_spice_2eproto.base,}};

static void InitDefaultsscc_info_TranInput_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_TranInput_default_instance_;
    new (ptr) ::vlsir::spice::TranInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::TranInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TranInput_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TranInput_spice_2eproto}, {
      &scc_info_TranInput_IcEntry_DoNotUse_spice_2eproto.base,
      &scc_info_Control_spice_2eproto.base,}};

static void InitDefaultsscc_info_TranInput_IcEntry_DoNotUse_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_TranInput_IcEntry_DoNotUse_default_instance_;
    new (ptr) ::vlsir::spice::TranInput_IcEntry_DoNotUse();
  }
  ::vlsir::spice::TranInput_IcEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TranInput_IcEntry_DoNotUse_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TranInput_IcEntry_DoNotUse_spice_2eproto}, {}};

static void InitDefaultsscc_info_TranResult_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_TranResult_default_instance_;
    new (ptr) ::vlsir::spice::TranResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vlsir::spice::TranResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TranResult_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TranResult_spice_2eproto}, {
      &scc_info_TranResult_MeasurementsEntry_DoNotUse_spice_2eproto.base,}};

static void InitDefaultsscc_info_TranResult_MeasurementsEntry_DoNotUse_spice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vlsir::spice::_TranResult_MeasurementsEntry_DoNotUse_default_instance_;
    new (ptr) ::vlsir::spice::TranResult_MeasurementsEntry_DoNotUse();
  }
  ::vlsir::spice::TranResult_MeasurementsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TranResult_MeasurementsEntry_DoNotUse_spice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TranResult_MeasurementsEntry_DoNotUse_spice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_spice_2eproto[34];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_spice_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_spice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_spice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::SimInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::SimInput, pkg_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::SimInput, top_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::SimInput, opts_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::SimInput, an_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::SimInput, ctrls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::SimResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::SimResult, an_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::SimOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::SimOptions, temp_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::SimOptions, tnom_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::SimOptions, gmin_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::SimOptions, iabstol_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::SimOptions, reltol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::Analysis, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::Analysis, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::vlsir::spice::AnalysisDefaultTypeInternal, op_),
  offsetof(::vlsir::spice::AnalysisDefaultTypeInternal, dc_),
  offsetof(::vlsir::spice::AnalysisDefaultTypeInternal, tran_),
  offsetof(::vlsir::spice::AnalysisDefaultTypeInternal, ac_),
  offsetof(::vlsir::spice::AnalysisDefaultTypeInternal, sweep_),
  offsetof(::vlsir::spice::AnalysisDefaultTypeInternal, monte_),
  offsetof(::vlsir::spice::AnalysisDefaultTypeInternal, custom_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::Analysis, an_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::AnalysisResult, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::AnalysisResult, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::vlsir::spice::AnalysisResultDefaultTypeInternal, op_),
  offsetof(::vlsir::spice::AnalysisResultDefaultTypeInternal, dc_),
  offsetof(::vlsir::spice::AnalysisResultDefaultTypeInternal, tran_),
  offsetof(::vlsir::spice::AnalysisResultDefaultTypeInternal, ac_),
  offsetof(::vlsir::spice::AnalysisResultDefaultTypeInternal, sweep_),
  offsetof(::vlsir::spice::AnalysisResultDefaultTypeInternal, monte_),
  offsetof(::vlsir::spice::AnalysisResultDefaultTypeInternal, custom_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::AnalysisResult, an_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::OpInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::OpInput, analysis_name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::OpInput, ctrl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::OpResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::OpResult, analysis_name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::OpResult, signals_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::OpResult, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::DcInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::DcInput, analysis_name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::DcInput, indep_name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::DcInput, sweep_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::DcInput, ctrl_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::DcResult_MeasurementsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::DcResult_MeasurementsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::DcResult_MeasurementsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::DcResult_MeasurementsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::DcResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::DcResult, analysis_name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::DcResult, indep_name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::DcResult, signals_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::DcResult, data_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::DcResult, measurements_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::TranInput_IcEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::TranInput_IcEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::TranInput_IcEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::TranInput_IcEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::TranInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::TranInput, analysis_name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::TranInput, tstop_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::TranInput, tstep_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::TranInput, ic_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::TranInput, ctrl_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::TranResult_MeasurementsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::TranResult_MeasurementsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::TranResult_MeasurementsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::TranResult_MeasurementsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::TranResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::TranResult, analysis_name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::TranResult, signals_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::TranResult, data_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::TranResult, measurements_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::ComplexNum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::ComplexNum, re_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::ComplexNum, im_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::AcInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::AcInput, analysis_name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::AcInput, fstart_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::AcInput, fstop_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::AcInput, npts_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::AcInput, ctrl_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::AcResult_MeasurementsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::AcResult_MeasurementsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::AcResult_MeasurementsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::AcResult_MeasurementsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::AcResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::AcResult, analysis_name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::AcResult, freq_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::AcResult, signals_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::AcResult, data_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::AcResult, measurements_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::SweepInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::SweepInput, analysis_name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::SweepInput, variable_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::SweepInput, sweep_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::SweepInput, an_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::SweepInput, ctrls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::SweepResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::SweepResult, analysis_name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::SweepResult, variable_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::SweepResult, sweep_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::SweepResult, an_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::MonteInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::MonteInput, analysis_name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::MonteInput, npts_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::MonteInput, seed_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::MonteInput, an_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::MonteInput, ctrls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::MonteResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::MonteResult, analysis_name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::MonteResult, variable_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::MonteResult, sweep_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::MonteResult, an_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::CustomAnalysisInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::CustomAnalysisInput, analysis_name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::CustomAnalysisInput, cmd_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::CustomAnalysisInput, ctrls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::CustomAnalysisResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::Sweep, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::Sweep, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::vlsir::spice::SweepDefaultTypeInternal, linear_),
  offsetof(::vlsir::spice::SweepDefaultTypeInternal, log_),
  offsetof(::vlsir::spice::SweepDefaultTypeInternal, points_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::Sweep, tp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::LinearSweep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::LinearSweep, start_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::LinearSweep, stop_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::LinearSweep, step_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::LogSweep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::LogSweep, start_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::LogSweep, stop_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::LogSweep, npts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::PointSweep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::PointSweep, points_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::PointSweep, stop_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::PointSweep, npts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::Control, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::Control, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::vlsir::spice::ControlDefaultTypeInternal, include_),
  offsetof(::vlsir::spice::ControlDefaultTypeInternal, lib_),
  offsetof(::vlsir::spice::ControlDefaultTypeInternal, save_),
  offsetof(::vlsir::spice::ControlDefaultTypeInternal, meas_),
  offsetof(::vlsir::spice::ControlDefaultTypeInternal, literal_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::Control, ctrl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::Save, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::Save, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::vlsir::spice::SaveDefaultTypeInternal, mode_),
  offsetof(::vlsir::spice::SaveDefaultTypeInternal, signal_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::Save, save_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::Include, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::Include, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::LibInclude, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::LibInclude, path_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::LibInclude, section_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::Meas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::Meas, name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::Meas, expr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::Signal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::Signal, name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::spice::Signal, quantity_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vlsir::spice::SimInput)},
  { 10, -1, sizeof(::vlsir::spice::SimResult)},
  { 16, -1, sizeof(::vlsir::spice::SimOptions)},
  { 26, -1, sizeof(::vlsir::spice::Analysis)},
  { 39, -1, sizeof(::vlsir::spice::AnalysisResult)},
  { 52, -1, sizeof(::vlsir::spice::OpInput)},
  { 59, -1, sizeof(::vlsir::spice::OpResult)},
  { 67, -1, sizeof(::vlsir::spice::DcInput)},
  { 76, 83, sizeof(::vlsir::spice::DcResult_MeasurementsEntry_DoNotUse)},
  { 85, -1, sizeof(::vlsir::spice::DcResult)},
  { 95, 102, sizeof(::vlsir::spice::TranInput_IcEntry_DoNotUse)},
  { 104, -1, sizeof(::vlsir::spice::TranInput)},
  { 114, 121, sizeof(::vlsir::spice::TranResult_MeasurementsEntry_DoNotUse)},
  { 123, -1, sizeof(::vlsir::spice::TranResult)},
  { 132, -1, sizeof(::vlsir::spice::ComplexNum)},
  { 139, -1, sizeof(::vlsir::spice::AcInput)},
  { 149, 156, sizeof(::vlsir::spice::AcResult_MeasurementsEntry_DoNotUse)},
  { 158, -1, sizeof(::vlsir::spice::AcResult)},
  { 168, -1, sizeof(::vlsir::spice::SweepInput)},
  { 178, -1, sizeof(::vlsir::spice::SweepResult)},
  { 187, -1, sizeof(::vlsir::spice::MonteInput)},
  { 197, -1, sizeof(::vlsir::spice::MonteResult)},
  { 206, -1, sizeof(::vlsir::spice::CustomAnalysisInput)},
  { 214, -1, sizeof(::vlsir::spice::CustomAnalysisResult)},
  { 219, -1, sizeof(::vlsir::spice::Sweep)},
  { 228, -1, sizeof(::vlsir::spice::LinearSweep)},
  { 236, -1, sizeof(::vlsir::spice::LogSweep)},
  { 244, -1, sizeof(::vlsir::spice::PointSweep)},
  { 252, -1, sizeof(::vlsir::spice::Control)},
  { 263, -1, sizeof(::vlsir::spice::Save)},
  { 271, -1, sizeof(::vlsir::spice::Include)},
  { 277, -1, sizeof(::vlsir::spice::LibInclude)},
  { 284, -1, sizeof(::vlsir::spice::Meas)},
  { 291, -1, sizeof(::vlsir::spice::Signal)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_SimInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_SimResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_SimOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_Analysis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_AnalysisResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_OpInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_OpResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_DcInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_DcResult_MeasurementsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_DcResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_TranInput_IcEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_TranInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_TranResult_MeasurementsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_TranResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_ComplexNum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_AcInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_AcResult_MeasurementsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_AcResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_SweepInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_SweepResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_MonteInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_MonteResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_CustomAnalysisInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_CustomAnalysisResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_Sweep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_LinearSweep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_LogSweep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_PointSweep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_Control_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_Save_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_Include_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_LibInclude_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_Meas_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::spice::_Signal_default_instance_),
};

const char descriptor_table_protodef_spice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013spice.proto\022\013vlsir.spice\032\036google/proto"
  "buf/wrappers.proto\032\rcircuit.proto\"\253\001\n\010Si"
  "mInput\022#\n\003pkg\030\001 \001(\0132\026.vlsir.circuit.Pack"
  "age\022\013\n\003top\030\002 \001(\t\022%\n\004opts\030\n \001(\0132\027.vlsir.s"
  "pice.SimOptions\022!\n\002an\030\013 \003(\0132\025.vlsir.spic"
  "e.Analysis\022#\n\005ctrls\030\014 \003(\0132\024.vlsir.spice."
  "Control\"4\n\tSimResult\022\'\n\002an\030\001 \003(\0132\033.vlsir"
  ".spice.AnalysisResult\"\355\001\n\nSimOptions\022*\n\004"
  "temp\030\001 \001(\0132\034.google.protobuf.DoubleValue"
  "\022*\n\004tnom\030\002 \001(\0132\034.google.protobuf.DoubleV"
  "alue\022*\n\004gmin\030\003 \001(\0132\034.google.protobuf.Dou"
  "bleValue\022-\n\007iabstol\030\004 \001(\0132\034.google.proto"
  "buf.DoubleValue\022,\n\006reltol\030\005 \001(\0132\034.google"
  ".protobuf.DoubleValue\"\254\002\n\010Analysis\022\"\n\002op"
  "\030\001 \001(\0132\024.vlsir.spice.OpInputH\000\022\"\n\002dc\030\002 \001"
  "(\0132\024.vlsir.spice.DcInputH\000\022&\n\004tran\030\003 \001(\013"
  "2\026.vlsir.spice.TranInputH\000\022\"\n\002ac\030\004 \001(\0132\024"
  ".vlsir.spice.AcInputH\000\022(\n\005sweep\030\n \001(\0132\027."
  "vlsir.spice.SweepInputH\000\022(\n\005monte\030\013 \001(\0132"
  "\027.vlsir.spice.MonteInputH\000\0222\n\006custom\030\024 \001"
  "(\0132 .vlsir.spice.CustomAnalysisInputH\000B\004"
  "\n\002an\"\271\002\n\016AnalysisResult\022#\n\002op\030\001 \001(\0132\025.vl"
  "sir.spice.OpResultH\000\022#\n\002dc\030\002 \001(\0132\025.vlsir"
  ".spice.DcResultH\000\022\'\n\004tran\030\003 \001(\0132\027.vlsir."
  "spice.TranResultH\000\022#\n\002ac\030\004 \001(\0132\025.vlsir.s"
  "pice.AcResultH\000\022)\n\005sweep\030\n \001(\0132\030.vlsir.s"
  "pice.SweepResultH\000\022)\n\005monte\030\013 \001(\0132\030.vlsi"
  "r.spice.MonteResultH\000\0223\n\006custom\030\024 \001(\0132!."
  "vlsir.spice.CustomAnalysisResultH\000B\004\n\002an"
  "\"D\n\007OpInput\022\025\n\ranalysis_name\030\001 \001(\t\022\"\n\004ct"
  "rl\030\005 \003(\0132\024.vlsir.spice.Control\"L\n\010OpResu"
  "lt\022\025\n\ranalysis_name\030\001 \001(\t\022\017\n\007signals\030\003 \003"
  "(\t\022\014\n\004data\030\005 \003(\001J\004\010\002\020\003J\004\010\004\020\005\"{\n\007DcInput\022"
  "\025\n\ranalysis_name\030\001 \001(\t\022\022\n\nindep_name\030\002 \001"
  "(\t\022!\n\005sweep\030\003 \001(\0132\022.vlsir.spice.Sweep\022\"\n"
  "\004ctrl\030\005 \003(\0132\024.vlsir.spice.Control\"\316\001\n\010Dc"
  "Result\022\025\n\ranalysis_name\030\001 \001(\t\022\022\n\nindep_n"
  "ame\030\002 \001(\t\022\017\n\007signals\030\003 \003(\t\022\014\n\004data\030\005 \003(\001"
  "\022=\n\014measurements\030\n \003(\0132\'.vlsir.spice.DcR"
  "esult.MeasurementsEntry\0323\n\021MeasurementsE"
  "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001J\004\010\004"
  "\020\005\"\273\001\n\tTranInput\022\025\n\ranalysis_name\030\001 \001(\t\022"
  "\r\n\005tstop\030\002 \001(\001\022\r\n\005tstep\030\003 \001(\001\022*\n\002ic\030\004 \003("
  "\0132\036.vlsir.spice.TranInput.IcEntry\022\"\n\004ctr"
  "l\030\005 \003(\0132\024.vlsir.spice.Control\032)\n\007IcEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\"\304\001\n\nTra"
  "nResult\022\025\n\ranalysis_name\030\001 \001(\t\022\017\n\007signal"
  "s\030\003 \003(\t\022\014\n\004data\030\005 \003(\001\022\?\n\014measurements\030\n "
  "\003(\0132).vlsir.spice.TranResult.Measurement"
  "sEntry\0323\n\021MeasurementsEntry\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\001:\0028\001J\004\010\002\020\003J\004\010\004\020\005\"$\n\nCompl"
  "exNum\022\n\n\002re\030\001 \001(\001\022\n\n\002im\030\002 \001(\001\"q\n\007AcInput"
  "\022\025\n\ranalysis_name\030\001 \001(\t\022\016\n\006fstart\030\002 \001(\001\022"
  "\r\n\005fstop\030\003 \001(\001\022\014\n\004npts\030\004 \001(\004\022\"\n\004ctrl\030\005 \003"
  "(\0132\024.vlsir.spice.Control\"\341\001\n\010AcResult\022\025\n"
  "\ranalysis_name\030\001 \001(\t\022\014\n\004freq\030\002 \003(\001\022\017\n\007si"
  "gnals\030\003 \003(\t\022%\n\004data\030\005 \003(\0132\027.vlsir.spice."
  "ComplexNum\022=\n\014measurements\030\n \003(\0132\'.vlsir"
  ".spice.AcResult.MeasurementsEntry\0323\n\021Mea"
  "surementsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001"
  "(\001:\0028\001J\004\010\004\020\005\"\240\001\n\nSweepInput\022\025\n\ranalysis_"
  "name\030\001 \001(\t\022\020\n\010variable\030\002 \001(\t\022!\n\005sweep\030\003 "
  "\001(\0132\022.vlsir.spice.Sweep\022!\n\002an\030\004 \003(\0132\025.vl"
  "sir.spice.Analysis\022#\n\005ctrls\030\005 \003(\0132\024.vlsi"
  "r.spice.Control\"\202\001\n\013SweepResult\022\025\n\ranaly"
  "sis_name\030\001 \001(\t\022\020\n\010variable\030\002 \001(\t\022!\n\005swee"
  "p\030\003 \001(\0132\022.vlsir.spice.Sweep\022\'\n\002an\030\004 \003(\0132"
  "\033.vlsir.spice.AnalysisResult\"\207\001\n\nMonteIn"
  "put\022\025\n\ranalysis_name\030\001 \001(\t\022\014\n\004npts\030\002 \001(\003"
  "\022\014\n\004seed\030\003 \001(\003\022!\n\002an\030\004 \003(\0132\025.vlsir.spice"
  ".Analysis\022#\n\005ctrls\030\005 \003(\0132\024.vlsir.spice.C"
  "ontrol\"\202\001\n\013MonteResult\022\025\n\ranalysis_name\030"
  "\001 \001(\t\022\020\n\010variable\030\002 \001(\t\022!\n\005sweep\030\003 \001(\0132\022"
  ".vlsir.spice.Sweep\022\'\n\002an\030\004 \003(\0132\033.vlsir.s"
  "pice.AnalysisResult\"^\n\023CustomAnalysisInp"
  "ut\022\025\n\ranalysis_name\030\001 \001(\t\022\013\n\003cmd\030\002 \001(\t\022#"
  "\n\005ctrls\030\005 \003(\0132\024.vlsir.spice.Control\"\026\n\024C"
  "ustomAnalysisResult\"\212\001\n\005Sweep\022*\n\006linear\030"
  "\001 \001(\0132\030.vlsir.spice.LinearSweepH\000\022$\n\003log"
  "\030\002 \001(\0132\025.vlsir.spice.LogSweepH\000\022)\n\006point"
  "s\030\003 \001(\0132\027.vlsir.spice.PointSweepH\000B\004\n\002tp"
  "\"8\n\013LinearSweep\022\r\n\005start\030\001 \001(\001\022\014\n\004stop\030\002"
  " \001(\001\022\014\n\004step\030\003 \001(\001\"5\n\010LogSweep\022\r\n\005start\030"
  "\001 \001(\001\022\014\n\004stop\030\002 \001(\001\022\014\n\004npts\030\003 \001(\001\"8\n\nPoi"
  "ntSweep\022\016\n\006points\030\001 \003(\001\022\014\n\004stop\030\002 \001(\001\022\014\n"
  "\004npts\030\003 \001(\001\"\273\001\n\007Control\022\'\n\007include\030\001 \001(\013"
  "2\024.vlsir.spice.IncludeH\000\022&\n\003lib\030\002 \001(\0132\027."
  "vlsir.spice.LibIncludeH\000\022!\n\004save\030\005 \001(\0132\021"
  ".vlsir.spice.SaveH\000\022!\n\004meas\030\006 \001(\0132\021.vlsi"
  "r.spice.MeasH\000\022\021\n\007literal\030\n \001(\tH\000B\006\n\004ctr"
  "l\"k\n\004Save\022*\n\004mode\030\001 \001(\0162\032.vlsir.spice.Sa"
  "ve.SaveModeH\000\022\020\n\006signal\030\002 \001(\tH\000\"\035\n\010SaveM"
  "ode\022\010\n\004NONE\020\000\022\007\n\003ALL\020\001B\006\n\004save\"\027\n\007Includ"
  "e\022\014\n\004path\030\001 \001(\t\"+\n\nLibInclude\022\014\n\004path\030\001 "
  "\001(\t\022\017\n\007section\030\002 \001(\t\"\"\n\004Meas\022\014\n\004name\030\001 \001"
  "(\t\022\014\n\004expr\030\002 \001(\t\"v\n\006Signal\022\014\n\004name\030\001 \001(\t"
  "\022.\n\010quantity\030\002 \001(\0162\034.vlsir.spice.Signal."
  "Quantity\".\n\010Quantity\022\013\n\007VOLTAGE\020\000\022\013\n\007CUR"
  "RENT\020\001\022\010\n\004NONE\020\0032=\n\005Spice\0224\n\003Sim\022\025.vlsir"
  ".spice.SimInput\032\026.vlsir.spice.SimResultb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_spice_2eproto_deps[2] = {
  &::descriptor_table_circuit_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_spice_2eproto_sccs[30] = {
  &scc_info_AcInput_spice_2eproto.base,
  &scc_info_AcResult_spice_2eproto.base,
  &scc_info_AcResult_MeasurementsEntry_DoNotUse_spice_2eproto.base,
  &scc_info_Analysis_spice_2eproto.base,
  &scc_info_AnalysisResult_spice_2eproto.base,
  &scc_info_ComplexNum_spice_2eproto.base,
  &scc_info_Control_spice_2eproto.base,
  &scc_info_CustomAnalysisInput_spice_2eproto.base,
  &scc_info_CustomAnalysisResult_spice_2eproto.base,
  &scc_info_DcInput_spice_2eproto.base,
  &scc_info_DcResult_spice_2eproto.base,
  &scc_info_DcResult_MeasurementsEntry_DoNotUse_spice_2eproto.base,
  &scc_info_Include_spice_2eproto.base,
  &scc_info_LibInclude_spice_2eproto.base,
  &scc_info_LinearSweep_spice_2eproto.base,
  &scc_info_LogSweep_spice_2eproto.base,
  &scc_info_Meas_spice_2eproto.base,
  &scc_info_OpInput_spice_2eproto.base,
  &scc_info_OpResult_spice_2eproto.base,
  &scc_info_PointSweep_spice_2eproto.base,
  &scc_info_Save_spice_2eproto.base,
  &scc_info_Signal_spice_2eproto.base,
  &scc_info_SimInput_spice_2eproto.base,
  &scc_info_SimOptions_spice_2eproto.base,
  &scc_info_SimResult_spice_2eproto.base,
  &scc_info_Sweep_spice_2eproto.base,
  &scc_info_TranInput_spice_2eproto.base,
  &scc_info_TranInput_IcEntry_DoNotUse_spice_2eproto.base,
  &scc_info_TranResult_spice_2eproto.base,
  &scc_info_TranResult_MeasurementsEntry_DoNotUse_spice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_spice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_spice_2eproto = {
  false, false, descriptor_table_protodef_spice_2eproto, "spice.proto", 4007,
  &descriptor_table_spice_2eproto_once, descriptor_table_spice_2eproto_sccs, descriptor_table_spice_2eproto_deps, 30, 2,
  schemas, file_default_instances, TableStruct_spice_2eproto::offsets,
  file_level_metadata_spice_2eproto, 34, file_level_enum_descriptors_spice_2eproto, file_level_service_descriptors_spice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_spice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_spice_2eproto)), true);
namespace vlsir {
namespace spice {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Save_SaveMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_spice_2eproto);
  return file_level_enum_descriptors_spice_2eproto[0];
}
bool Save_SaveMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Save_SaveMode Save::NONE;
constexpr Save_SaveMode Save::ALL;
constexpr Save_SaveMode Save::SaveMode_MIN;
constexpr Save_SaveMode Save::SaveMode_MAX;
constexpr int Save::SaveMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Signal_Quantity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_spice_2eproto);
  return file_level_enum_descriptors_spice_2eproto[1];
}
bool Signal_Quantity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Signal_Quantity Signal::VOLTAGE;
constexpr Signal_Quantity Signal::CURRENT;
constexpr Signal_Quantity Signal::NONE;
constexpr Signal_Quantity Signal::Quantity_MIN;
constexpr Signal_Quantity Signal::Quantity_MAX;
constexpr int Signal::Quantity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SimInput::InitAsDefaultInstance() {
  ::vlsir::spice::_SimInput_default_instance_._instance.get_mutable()->pkg_ = const_cast< ::vlsir::circuit::Package*>(
      ::vlsir::circuit::Package::internal_default_instance());
  ::vlsir::spice::_SimInput_default_instance_._instance.get_mutable()->opts_ = const_cast< ::vlsir::spice::SimOptions*>(
      ::vlsir::spice::SimOptions::internal_default_instance());
}
class SimInput::_Internal {
 public:
  static const ::vlsir::circuit::Package& pkg(const SimInput* msg);
  static const ::vlsir::spice::SimOptions& opts(const SimInput* msg);
};

const ::vlsir::circuit::Package&
SimInput::_Internal::pkg(const SimInput* msg) {
  return *msg->pkg_;
}
const ::vlsir::spice::SimOptions&
SimInput::_Internal::opts(const SimInput* msg) {
  return *msg->opts_;
}
void SimInput::clear_pkg() {
  if (GetArena() == nullptr && pkg_ != nullptr) {
    delete pkg_;
  }
  pkg_ = nullptr;
}
SimInput::SimInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  an_(arena),
  ctrls_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.SimInput)
}
SimInput::SimInput(const SimInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      an_(from.an_),
      ctrls_(from.ctrls_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  top_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_top().empty()) {
    top_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_top(),
      GetArena());
  }
  if (from._internal_has_pkg()) {
    pkg_ = new ::vlsir::circuit::Package(*from.pkg_);
  } else {
    pkg_ = nullptr;
  }
  if (from._internal_has_opts()) {
    opts_ = new ::vlsir::spice::SimOptions(*from.opts_);
  } else {
    opts_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.SimInput)
}

void SimInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimInput_spice_2eproto.base);
  top_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pkg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opts_) -
      reinterpret_cast<char*>(&pkg_)) + sizeof(opts_));
}

SimInput::~SimInput() {
  // @@protoc_insertion_point(destructor:vlsir.spice.SimInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  top_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pkg_;
  if (this != internal_default_instance()) delete opts_;
}

void SimInput::ArenaDtor(void* object) {
  SimInput* _this = reinterpret_cast< SimInput* >(object);
  (void)_this;
}
void SimInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimInput& SimInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimInput_spice_2eproto.base);
  return *internal_default_instance();
}


void SimInput::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.SimInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  an_.Clear();
  ctrls_.Clear();
  top_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && pkg_ != nullptr) {
    delete pkg_;
  }
  pkg_ = nullptr;
  if (GetArena() == nullptr && opts_ != nullptr) {
    delete opts_;
  }
  opts_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vlsir.circuit.Package pkg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pkg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string top = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_top();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.SimInput.top"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vlsir.spice.SimOptions opts = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_opts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vlsir.spice.Analysis an = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_an(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vlsir.spice.Control ctrls = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ctrls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.SimInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vlsir.circuit.Package pkg = 1;
  if (this->has_pkg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pkg(this), target, stream);
  }

  // string top = 2;
  if (this->top().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_top().data(), static_cast<int>(this->_internal_top().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.SimInput.top");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_top(), target);
  }

  // .vlsir.spice.SimOptions opts = 10;
  if (this->has_opts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::opts(this), target, stream);
  }

  // repeated .vlsir.spice.Analysis an = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_an_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_an(i), target, stream);
  }

  // repeated .vlsir.spice.Control ctrls = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ctrls_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_ctrls(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.SimInput)
  return target;
}

size_t SimInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.SimInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.spice.Analysis an = 11;
  total_size += 1UL * this->_internal_an_size();
  for (const auto& msg : this->an_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vlsir.spice.Control ctrls = 12;
  total_size += 1UL * this->_internal_ctrls_size();
  for (const auto& msg : this->ctrls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string top = 2;
  if (this->top().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_top());
  }

  // .vlsir.circuit.Package pkg = 1;
  if (this->has_pkg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pkg_);
  }

  // .vlsir.spice.SimOptions opts = 10;
  if (this->has_opts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opts_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.SimInput)
  GOOGLE_DCHECK_NE(&from, this);
  const SimInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.SimInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.SimInput)
    MergeFrom(*source);
  }
}

void SimInput::MergeFrom(const SimInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.SimInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  an_.MergeFrom(from.an_);
  ctrls_.MergeFrom(from.ctrls_);
  if (from.top().size() > 0) {
    _internal_set_top(from._internal_top());
  }
  if (from.has_pkg()) {
    _internal_mutable_pkg()->::vlsir::circuit::Package::MergeFrom(from._internal_pkg());
  }
  if (from.has_opts()) {
    _internal_mutable_opts()->::vlsir::spice::SimOptions::MergeFrom(from._internal_opts());
  }
}

void SimInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.SimInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimInput::CopyFrom(const SimInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.SimInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimInput::IsInitialized() const {
  return true;
}

void SimInput::InternalSwap(SimInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  an_.InternalSwap(&other->an_);
  ctrls_.InternalSwap(&other->ctrls_);
  top_.Swap(&other->top_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimInput, opts_)
      + sizeof(SimInput::opts_)
      - PROTOBUF_FIELD_OFFSET(SimInput, pkg_)>(
          reinterpret_cast<char*>(&pkg_),
          reinterpret_cast<char*>(&other->pkg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimResult::InitAsDefaultInstance() {
}
class SimResult::_Internal {
 public:
};

SimResult::SimResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  an_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.SimResult)
}
SimResult::SimResult(const SimResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      an_(from.an_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.SimResult)
}

void SimResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimResult_spice_2eproto.base);
}

SimResult::~SimResult() {
  // @@protoc_insertion_point(destructor:vlsir.spice.SimResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SimResult::ArenaDtor(void* object) {
  SimResult* _this = reinterpret_cast< SimResult* >(object);
  (void)_this;
}
void SimResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimResult& SimResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimResult_spice_2eproto.base);
  return *internal_default_instance();
}


void SimResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.SimResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  an_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vlsir.spice.AnalysisResult an = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_an(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.SimResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vlsir.spice.AnalysisResult an = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_an_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_an(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.SimResult)
  return target;
}

size_t SimResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.SimResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.spice.AnalysisResult an = 1;
  total_size += 1UL * this->_internal_an_size();
  for (const auto& msg : this->an_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.SimResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SimResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.SimResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.SimResult)
    MergeFrom(*source);
  }
}

void SimResult::MergeFrom(const SimResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.SimResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  an_.MergeFrom(from.an_);
}

void SimResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.SimResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimResult::CopyFrom(const SimResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.SimResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimResult::IsInitialized() const {
  return true;
}

void SimResult::InternalSwap(SimResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  an_.InternalSwap(&other->an_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimOptions::InitAsDefaultInstance() {
  ::vlsir::spice::_SimOptions_default_instance_._instance.get_mutable()->temp_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
  ::vlsir::spice::_SimOptions_default_instance_._instance.get_mutable()->tnom_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
  ::vlsir::spice::_SimOptions_default_instance_._instance.get_mutable()->gmin_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
  ::vlsir::spice::_SimOptions_default_instance_._instance.get_mutable()->iabstol_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
  ::vlsir::spice::_SimOptions_default_instance_._instance.get_mutable()->reltol_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
}
class SimOptions::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& temp(const SimOptions* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& tnom(const SimOptions* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& gmin(const SimOptions* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& iabstol(const SimOptions* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& reltol(const SimOptions* msg);
};

const PROTOBUF_NAMESPACE_ID::DoubleValue&
SimOptions::_Internal::temp(const SimOptions* msg) {
  return *msg->temp_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
SimOptions::_Internal::tnom(const SimOptions* msg) {
  return *msg->tnom_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
SimOptions::_Internal::gmin(const SimOptions* msg) {
  return *msg->gmin_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
SimOptions::_Internal::iabstol(const SimOptions* msg) {
  return *msg->iabstol_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
SimOptions::_Internal::reltol(const SimOptions* msg) {
  return *msg->reltol_;
}
void SimOptions::clear_temp() {
  if (GetArena() == nullptr && temp_ != nullptr) {
    delete temp_;
  }
  temp_ = nullptr;
}
void SimOptions::clear_tnom() {
  if (GetArena() == nullptr && tnom_ != nullptr) {
    delete tnom_;
  }
  tnom_ = nullptr;
}
void SimOptions::clear_gmin() {
  if (GetArena() == nullptr && gmin_ != nullptr) {
    delete gmin_;
  }
  gmin_ = nullptr;
}
void SimOptions::clear_iabstol() {
  if (GetArena() == nullptr && iabstol_ != nullptr) {
    delete iabstol_;
  }
  iabstol_ = nullptr;
}
void SimOptions::clear_reltol() {
  if (GetArena() == nullptr && reltol_ != nullptr) {
    delete reltol_;
  }
  reltol_ = nullptr;
}
SimOptions::SimOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.SimOptions)
}
SimOptions::SimOptions(const SimOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_temp()) {
    temp_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.temp_);
  } else {
    temp_ = nullptr;
  }
  if (from._internal_has_tnom()) {
    tnom_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.tnom_);
  } else {
    tnom_ = nullptr;
  }
  if (from._internal_has_gmin()) {
    gmin_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.gmin_);
  } else {
    gmin_ = nullptr;
  }
  if (from._internal_has_iabstol()) {
    iabstol_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.iabstol_);
  } else {
    iabstol_ = nullptr;
  }
  if (from._internal_has_reltol()) {
    reltol_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.reltol_);
  } else {
    reltol_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.SimOptions)
}

void SimOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimOptions_spice_2eproto.base);
  ::memset(&temp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reltol_) -
      reinterpret_cast<char*>(&temp_)) + sizeof(reltol_));
}

SimOptions::~SimOptions() {
  // @@protoc_insertion_point(destructor:vlsir.spice.SimOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete temp_;
  if (this != internal_default_instance()) delete tnom_;
  if (this != internal_default_instance()) delete gmin_;
  if (this != internal_default_instance()) delete iabstol_;
  if (this != internal_default_instance()) delete reltol_;
}

void SimOptions::ArenaDtor(void* object) {
  SimOptions* _this = reinterpret_cast< SimOptions* >(object);
  (void)_this;
}
void SimOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimOptions& SimOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimOptions_spice_2eproto.base);
  return *internal_default_instance();
}


void SimOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.SimOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && temp_ != nullptr) {
    delete temp_;
  }
  temp_ = nullptr;
  if (GetArena() == nullptr && tnom_ != nullptr) {
    delete tnom_;
  }
  tnom_ = nullptr;
  if (GetArena() == nullptr && gmin_ != nullptr) {
    delete gmin_;
  }
  gmin_ = nullptr;
  if (GetArena() == nullptr && iabstol_ != nullptr) {
    delete iabstol_;
  }
  iabstol_ = nullptr;
  if (GetArena() == nullptr && reltol_ != nullptr) {
    delete reltol_;
  }
  reltol_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.DoubleValue temp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_temp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue tnom = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tnom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue gmin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gmin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue iabstol = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_iabstol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue reltol = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reltol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.SimOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue temp = 1;
  if (this->has_temp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::temp(this), target, stream);
  }

  // .google.protobuf.DoubleValue tnom = 2;
  if (this->has_tnom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tnom(this), target, stream);
  }

  // .google.protobuf.DoubleValue gmin = 3;
  if (this->has_gmin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::gmin(this), target, stream);
  }

  // .google.protobuf.DoubleValue iabstol = 4;
  if (this->has_iabstol()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::iabstol(this), target, stream);
  }

  // .google.protobuf.DoubleValue reltol = 5;
  if (this->has_reltol()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::reltol(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.SimOptions)
  return target;
}

size_t SimOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.SimOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue temp = 1;
  if (this->has_temp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *temp_);
  }

  // .google.protobuf.DoubleValue tnom = 2;
  if (this->has_tnom()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tnom_);
  }

  // .google.protobuf.DoubleValue gmin = 3;
  if (this->has_gmin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gmin_);
  }

  // .google.protobuf.DoubleValue iabstol = 4;
  if (this->has_iabstol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *iabstol_);
  }

  // .google.protobuf.DoubleValue reltol = 5;
  if (this->has_reltol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reltol_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.SimOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const SimOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.SimOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.SimOptions)
    MergeFrom(*source);
  }
}

void SimOptions::MergeFrom(const SimOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.SimOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_temp()) {
    _internal_mutable_temp()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_temp());
  }
  if (from.has_tnom()) {
    _internal_mutable_tnom()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_tnom());
  }
  if (from.has_gmin()) {
    _internal_mutable_gmin()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_gmin());
  }
  if (from.has_iabstol()) {
    _internal_mutable_iabstol()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_iabstol());
  }
  if (from.has_reltol()) {
    _internal_mutable_reltol()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_reltol());
  }
}

void SimOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.SimOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimOptions::CopyFrom(const SimOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.SimOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimOptions::IsInitialized() const {
  return true;
}

void SimOptions::InternalSwap(SimOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimOptions, reltol_)
      + sizeof(SimOptions::reltol_)
      - PROTOBUF_FIELD_OFFSET(SimOptions, temp_)>(
          reinterpret_cast<char*>(&temp_),
          reinterpret_cast<char*>(&other->temp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Analysis::InitAsDefaultInstance() {
  ::vlsir::spice::_Analysis_default_instance_.op_ = const_cast< ::vlsir::spice::OpInput*>(
      ::vlsir::spice::OpInput::internal_default_instance());
  ::vlsir::spice::_Analysis_default_instance_.dc_ = const_cast< ::vlsir::spice::DcInput*>(
      ::vlsir::spice::DcInput::internal_default_instance());
  ::vlsir::spice::_Analysis_default_instance_.tran_ = const_cast< ::vlsir::spice::TranInput*>(
      ::vlsir::spice::TranInput::internal_default_instance());
  ::vlsir::spice::_Analysis_default_instance_.ac_ = const_cast< ::vlsir::spice::AcInput*>(
      ::vlsir::spice::AcInput::internal_default_instance());
  ::vlsir::spice::_Analysis_default_instance_.sweep_ = const_cast< ::vlsir::spice::SweepInput*>(
      ::vlsir::spice::SweepInput::internal_default_instance());
  ::vlsir::spice::_Analysis_default_instance_.monte_ = const_cast< ::vlsir::spice::MonteInput*>(
      ::vlsir::spice::MonteInput::internal_default_instance());
  ::vlsir::spice::_Analysis_default_instance_.custom_ = const_cast< ::vlsir::spice::CustomAnalysisInput*>(
      ::vlsir::spice::CustomAnalysisInput::internal_default_instance());
}
class Analysis::_Internal {
 public:
  static const ::vlsir::spice::OpInput& op(const Analysis* msg);
  static const ::vlsir::spice::DcInput& dc(const Analysis* msg);
  static const ::vlsir::spice::TranInput& tran(const Analysis* msg);
  static const ::vlsir::spice::AcInput& ac(const Analysis* msg);
  static const ::vlsir::spice::SweepInput& sweep(const Analysis* msg);
  static const ::vlsir::spice::MonteInput& monte(const Analysis* msg);
  static const ::vlsir::spice::CustomAnalysisInput& custom(const Analysis* msg);
};

const ::vlsir::spice::OpInput&
Analysis::_Internal::op(const Analysis* msg) {
  return *msg->an_.op_;
}
const ::vlsir::spice::DcInput&
Analysis::_Internal::dc(const Analysis* msg) {
  return *msg->an_.dc_;
}
const ::vlsir::spice::TranInput&
Analysis::_Internal::tran(const Analysis* msg) {
  return *msg->an_.tran_;
}
const ::vlsir::spice::AcInput&
Analysis::_Internal::ac(const Analysis* msg) {
  return *msg->an_.ac_;
}
const ::vlsir::spice::SweepInput&
Analysis::_Internal::sweep(const Analysis* msg) {
  return *msg->an_.sweep_;
}
const ::vlsir::spice::MonteInput&
Analysis::_Internal::monte(const Analysis* msg) {
  return *msg->an_.monte_;
}
const ::vlsir::spice::CustomAnalysisInput&
Analysis::_Internal::custom(const Analysis* msg) {
  return *msg->an_.custom_;
}
void Analysis::set_allocated_op(::vlsir::spice::OpInput* op) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_an();
  if (op) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(op);
    if (message_arena != submessage_arena) {
      op = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op, submessage_arena);
    }
    set_has_op();
    an_.op_ = op;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Analysis.op)
}
void Analysis::set_allocated_dc(::vlsir::spice::DcInput* dc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_an();
  if (dc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dc);
    if (message_arena != submessage_arena) {
      dc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dc, submessage_arena);
    }
    set_has_dc();
    an_.dc_ = dc;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Analysis.dc)
}
void Analysis::set_allocated_tran(::vlsir::spice::TranInput* tran) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_an();
  if (tran) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tran);
    if (message_arena != submessage_arena) {
      tran = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tran, submessage_arena);
    }
    set_has_tran();
    an_.tran_ = tran;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Analysis.tran)
}
void Analysis::set_allocated_ac(::vlsir::spice::AcInput* ac) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_an();
  if (ac) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ac);
    if (message_arena != submessage_arena) {
      ac = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ac, submessage_arena);
    }
    set_has_ac();
    an_.ac_ = ac;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Analysis.ac)
}
void Analysis::set_allocated_sweep(::vlsir::spice::SweepInput* sweep) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_an();
  if (sweep) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sweep);
    if (message_arena != submessage_arena) {
      sweep = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sweep, submessage_arena);
    }
    set_has_sweep();
    an_.sweep_ = sweep;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Analysis.sweep)
}
void Analysis::set_allocated_monte(::vlsir::spice::MonteInput* monte) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_an();
  if (monte) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(monte);
    if (message_arena != submessage_arena) {
      monte = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, monte, submessage_arena);
    }
    set_has_monte();
    an_.monte_ = monte;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Analysis.monte)
}
void Analysis::set_allocated_custom(::vlsir::spice::CustomAnalysisInput* custom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_an();
  if (custom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(custom);
    if (message_arena != submessage_arena) {
      custom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom, submessage_arena);
    }
    set_has_custom();
    an_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Analysis.custom)
}
Analysis::Analysis(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.Analysis)
}
Analysis::Analysis(const Analysis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_an();
  switch (from.an_case()) {
    case kOp: {
      _internal_mutable_op()->::vlsir::spice::OpInput::MergeFrom(from._internal_op());
      break;
    }
    case kDc: {
      _internal_mutable_dc()->::vlsir::spice::DcInput::MergeFrom(from._internal_dc());
      break;
    }
    case kTran: {
      _internal_mutable_tran()->::vlsir::spice::TranInput::MergeFrom(from._internal_tran());
      break;
    }
    case kAc: {
      _internal_mutable_ac()->::vlsir::spice::AcInput::MergeFrom(from._internal_ac());
      break;
    }
    case kSweep: {
      _internal_mutable_sweep()->::vlsir::spice::SweepInput::MergeFrom(from._internal_sweep());
      break;
    }
    case kMonte: {
      _internal_mutable_monte()->::vlsir::spice::MonteInput::MergeFrom(from._internal_monte());
      break;
    }
    case kCustom: {
      _internal_mutable_custom()->::vlsir::spice::CustomAnalysisInput::MergeFrom(from._internal_custom());
      break;
    }
    case AN_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.Analysis)
}

void Analysis::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Analysis_spice_2eproto.base);
  clear_has_an();
}

Analysis::~Analysis() {
  // @@protoc_insertion_point(destructor:vlsir.spice.Analysis)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Analysis::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_an()) {
    clear_an();
  }
}

void Analysis::ArenaDtor(void* object) {
  Analysis* _this = reinterpret_cast< Analysis* >(object);
  (void)_this;
}
void Analysis::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Analysis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Analysis& Analysis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Analysis_spice_2eproto.base);
  return *internal_default_instance();
}


void Analysis::clear_an() {
// @@protoc_insertion_point(one_of_clear_start:vlsir.spice.Analysis)
  switch (an_case()) {
    case kOp: {
      if (GetArena() == nullptr) {
        delete an_.op_;
      }
      break;
    }
    case kDc: {
      if (GetArena() == nullptr) {
        delete an_.dc_;
      }
      break;
    }
    case kTran: {
      if (GetArena() == nullptr) {
        delete an_.tran_;
      }
      break;
    }
    case kAc: {
      if (GetArena() == nullptr) {
        delete an_.ac_;
      }
      break;
    }
    case kSweep: {
      if (GetArena() == nullptr) {
        delete an_.sweep_;
      }
      break;
    }
    case kMonte: {
      if (GetArena() == nullptr) {
        delete an_.monte_;
      }
      break;
    }
    case kCustom: {
      if (GetArena() == nullptr) {
        delete an_.custom_;
      }
      break;
    }
    case AN_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AN_NOT_SET;
}


void Analysis::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.Analysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_an();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Analysis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vlsir.spice.OpInput op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_op(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vlsir.spice.DcInput dc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vlsir.spice.TranInput tran = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tran(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vlsir.spice.AcInput ac = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ac(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vlsir.spice.SweepInput sweep = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_sweep(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vlsir.spice.MonteInput monte = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_monte(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vlsir.spice.CustomAnalysisInput custom = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Analysis::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.Analysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vlsir.spice.OpInput op = 1;
  if (_internal_has_op()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::op(this), target, stream);
  }

  // .vlsir.spice.DcInput dc = 2;
  if (_internal_has_dc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dc(this), target, stream);
  }

  // .vlsir.spice.TranInput tran = 3;
  if (_internal_has_tran()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tran(this), target, stream);
  }

  // .vlsir.spice.AcInput ac = 4;
  if (_internal_has_ac()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ac(this), target, stream);
  }

  // .vlsir.spice.SweepInput sweep = 10;
  if (_internal_has_sweep()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::sweep(this), target, stream);
  }

  // .vlsir.spice.MonteInput monte = 11;
  if (_internal_has_monte()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::monte(this), target, stream);
  }

  // .vlsir.spice.CustomAnalysisInput custom = 20;
  if (_internal_has_custom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::custom(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.Analysis)
  return target;
}

size_t Analysis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.Analysis)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (an_case()) {
    // .vlsir.spice.OpInput op = 1;
    case kOp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *an_.op_);
      break;
    }
    // .vlsir.spice.DcInput dc = 2;
    case kDc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *an_.dc_);
      break;
    }
    // .vlsir.spice.TranInput tran = 3;
    case kTran: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *an_.tran_);
      break;
    }
    // .vlsir.spice.AcInput ac = 4;
    case kAc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *an_.ac_);
      break;
    }
    // .vlsir.spice.SweepInput sweep = 10;
    case kSweep: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *an_.sweep_);
      break;
    }
    // .vlsir.spice.MonteInput monte = 11;
    case kMonte: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *an_.monte_);
      break;
    }
    // .vlsir.spice.CustomAnalysisInput custom = 20;
    case kCustom: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *an_.custom_);
      break;
    }
    case AN_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Analysis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.Analysis)
  GOOGLE_DCHECK_NE(&from, this);
  const Analysis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Analysis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.Analysis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.Analysis)
    MergeFrom(*source);
  }
}

void Analysis::MergeFrom(const Analysis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.Analysis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.an_case()) {
    case kOp: {
      _internal_mutable_op()->::vlsir::spice::OpInput::MergeFrom(from._internal_op());
      break;
    }
    case kDc: {
      _internal_mutable_dc()->::vlsir::spice::DcInput::MergeFrom(from._internal_dc());
      break;
    }
    case kTran: {
      _internal_mutable_tran()->::vlsir::spice::TranInput::MergeFrom(from._internal_tran());
      break;
    }
    case kAc: {
      _internal_mutable_ac()->::vlsir::spice::AcInput::MergeFrom(from._internal_ac());
      break;
    }
    case kSweep: {
      _internal_mutable_sweep()->::vlsir::spice::SweepInput::MergeFrom(from._internal_sweep());
      break;
    }
    case kMonte: {
      _internal_mutable_monte()->::vlsir::spice::MonteInput::MergeFrom(from._internal_monte());
      break;
    }
    case kCustom: {
      _internal_mutable_custom()->::vlsir::spice::CustomAnalysisInput::MergeFrom(from._internal_custom());
      break;
    }
    case AN_NOT_SET: {
      break;
    }
  }
}

void Analysis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.Analysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Analysis::CopyFrom(const Analysis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.Analysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Analysis::IsInitialized() const {
  return true;
}

void Analysis::InternalSwap(Analysis* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(an_, other->an_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Analysis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnalysisResult::InitAsDefaultInstance() {
  ::vlsir::spice::_AnalysisResult_default_instance_.op_ = const_cast< ::vlsir::spice::OpResult*>(
      ::vlsir::spice::OpResult::internal_default_instance());
  ::vlsir::spice::_AnalysisResult_default_instance_.dc_ = const_cast< ::vlsir::spice::DcResult*>(
      ::vlsir::spice::DcResult::internal_default_instance());
  ::vlsir::spice::_AnalysisResult_default_instance_.tran_ = const_cast< ::vlsir::spice::TranResult*>(
      ::vlsir::spice::TranResult::internal_default_instance());
  ::vlsir::spice::_AnalysisResult_default_instance_.ac_ = const_cast< ::vlsir::spice::AcResult*>(
      ::vlsir::spice::AcResult::internal_default_instance());
  ::vlsir::spice::_AnalysisResult_default_instance_.sweep_ = const_cast< ::vlsir::spice::SweepResult*>(
      ::vlsir::spice::SweepResult::internal_default_instance());
  ::vlsir::spice::_AnalysisResult_default_instance_.monte_ = const_cast< ::vlsir::spice::MonteResult*>(
      ::vlsir::spice::MonteResult::internal_default_instance());
  ::vlsir::spice::_AnalysisResult_default_instance_.custom_ = const_cast< ::vlsir::spice::CustomAnalysisResult*>(
      ::vlsir::spice::CustomAnalysisResult::internal_default_instance());
}
class AnalysisResult::_Internal {
 public:
  static const ::vlsir::spice::OpResult& op(const AnalysisResult* msg);
  static const ::vlsir::spice::DcResult& dc(const AnalysisResult* msg);
  static const ::vlsir::spice::TranResult& tran(const AnalysisResult* msg);
  static const ::vlsir::spice::AcResult& ac(const AnalysisResult* msg);
  static const ::vlsir::spice::SweepResult& sweep(const AnalysisResult* msg);
  static const ::vlsir::spice::MonteResult& monte(const AnalysisResult* msg);
  static const ::vlsir::spice::CustomAnalysisResult& custom(const AnalysisResult* msg);
};

const ::vlsir::spice::OpResult&
AnalysisResult::_Internal::op(const AnalysisResult* msg) {
  return *msg->an_.op_;
}
const ::vlsir::spice::DcResult&
AnalysisResult::_Internal::dc(const AnalysisResult* msg) {
  return *msg->an_.dc_;
}
const ::vlsir::spice::TranResult&
AnalysisResult::_Internal::tran(const AnalysisResult* msg) {
  return *msg->an_.tran_;
}
const ::vlsir::spice::AcResult&
AnalysisResult::_Internal::ac(const AnalysisResult* msg) {
  return *msg->an_.ac_;
}
const ::vlsir::spice::SweepResult&
AnalysisResult::_Internal::sweep(const AnalysisResult* msg) {
  return *msg->an_.sweep_;
}
const ::vlsir::spice::MonteResult&
AnalysisResult::_Internal::monte(const AnalysisResult* msg) {
  return *msg->an_.monte_;
}
const ::vlsir::spice::CustomAnalysisResult&
AnalysisResult::_Internal::custom(const AnalysisResult* msg) {
  return *msg->an_.custom_;
}
void AnalysisResult::set_allocated_op(::vlsir::spice::OpResult* op) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_an();
  if (op) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(op);
    if (message_arena != submessage_arena) {
      op = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op, submessage_arena);
    }
    set_has_op();
    an_.op_ = op;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.AnalysisResult.op)
}
void AnalysisResult::set_allocated_dc(::vlsir::spice::DcResult* dc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_an();
  if (dc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dc);
    if (message_arena != submessage_arena) {
      dc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dc, submessage_arena);
    }
    set_has_dc();
    an_.dc_ = dc;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.AnalysisResult.dc)
}
void AnalysisResult::set_allocated_tran(::vlsir::spice::TranResult* tran) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_an();
  if (tran) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tran);
    if (message_arena != submessage_arena) {
      tran = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tran, submessage_arena);
    }
    set_has_tran();
    an_.tran_ = tran;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.AnalysisResult.tran)
}
void AnalysisResult::set_allocated_ac(::vlsir::spice::AcResult* ac) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_an();
  if (ac) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ac);
    if (message_arena != submessage_arena) {
      ac = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ac, submessage_arena);
    }
    set_has_ac();
    an_.ac_ = ac;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.AnalysisResult.ac)
}
void AnalysisResult::set_allocated_sweep(::vlsir::spice::SweepResult* sweep) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_an();
  if (sweep) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sweep);
    if (message_arena != submessage_arena) {
      sweep = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sweep, submessage_arena);
    }
    set_has_sweep();
    an_.sweep_ = sweep;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.AnalysisResult.sweep)
}
void AnalysisResult::set_allocated_monte(::vlsir::spice::MonteResult* monte) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_an();
  if (monte) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(monte);
    if (message_arena != submessage_arena) {
      monte = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, monte, submessage_arena);
    }
    set_has_monte();
    an_.monte_ = monte;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.AnalysisResult.monte)
}
void AnalysisResult::set_allocated_custom(::vlsir::spice::CustomAnalysisResult* custom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_an();
  if (custom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(custom);
    if (message_arena != submessage_arena) {
      custom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom, submessage_arena);
    }
    set_has_custom();
    an_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.AnalysisResult.custom)
}
AnalysisResult::AnalysisResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.AnalysisResult)
}
AnalysisResult::AnalysisResult(const AnalysisResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_an();
  switch (from.an_case()) {
    case kOp: {
      _internal_mutable_op()->::vlsir::spice::OpResult::MergeFrom(from._internal_op());
      break;
    }
    case kDc: {
      _internal_mutable_dc()->::vlsir::spice::DcResult::MergeFrom(from._internal_dc());
      break;
    }
    case kTran: {
      _internal_mutable_tran()->::vlsir::spice::TranResult::MergeFrom(from._internal_tran());
      break;
    }
    case kAc: {
      _internal_mutable_ac()->::vlsir::spice::AcResult::MergeFrom(from._internal_ac());
      break;
    }
    case kSweep: {
      _internal_mutable_sweep()->::vlsir::spice::SweepResult::MergeFrom(from._internal_sweep());
      break;
    }
    case kMonte: {
      _internal_mutable_monte()->::vlsir::spice::MonteResult::MergeFrom(from._internal_monte());
      break;
    }
    case kCustom: {
      _internal_mutable_custom()->::vlsir::spice::CustomAnalysisResult::MergeFrom(from._internal_custom());
      break;
    }
    case AN_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.AnalysisResult)
}

void AnalysisResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnalysisResult_spice_2eproto.base);
  clear_has_an();
}

AnalysisResult::~AnalysisResult() {
  // @@protoc_insertion_point(destructor:vlsir.spice.AnalysisResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnalysisResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_an()) {
    clear_an();
  }
}

void AnalysisResult::ArenaDtor(void* object) {
  AnalysisResult* _this = reinterpret_cast< AnalysisResult* >(object);
  (void)_this;
}
void AnalysisResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnalysisResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalysisResult& AnalysisResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnalysisResult_spice_2eproto.base);
  return *internal_default_instance();
}


void AnalysisResult::clear_an() {
// @@protoc_insertion_point(one_of_clear_start:vlsir.spice.AnalysisResult)
  switch (an_case()) {
    case kOp: {
      if (GetArena() == nullptr) {
        delete an_.op_;
      }
      break;
    }
    case kDc: {
      if (GetArena() == nullptr) {
        delete an_.dc_;
      }
      break;
    }
    case kTran: {
      if (GetArena() == nullptr) {
        delete an_.tran_;
      }
      break;
    }
    case kAc: {
      if (GetArena() == nullptr) {
        delete an_.ac_;
      }
      break;
    }
    case kSweep: {
      if (GetArena() == nullptr) {
        delete an_.sweep_;
      }
      break;
    }
    case kMonte: {
      if (GetArena() == nullptr) {
        delete an_.monte_;
      }
      break;
    }
    case kCustom: {
      if (GetArena() == nullptr) {
        delete an_.custom_;
      }
      break;
    }
    case AN_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AN_NOT_SET;
}


void AnalysisResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.AnalysisResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_an();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnalysisResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vlsir.spice.OpResult op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_op(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vlsir.spice.DcResult dc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vlsir.spice.TranResult tran = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tran(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vlsir.spice.AcResult ac = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ac(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vlsir.spice.SweepResult sweep = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_sweep(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vlsir.spice.MonteResult monte = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_monte(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vlsir.spice.CustomAnalysisResult custom = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnalysisResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.AnalysisResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vlsir.spice.OpResult op = 1;
  if (_internal_has_op()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::op(this), target, stream);
  }

  // .vlsir.spice.DcResult dc = 2;
  if (_internal_has_dc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dc(this), target, stream);
  }

  // .vlsir.spice.TranResult tran = 3;
  if (_internal_has_tran()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tran(this), target, stream);
  }

  // .vlsir.spice.AcResult ac = 4;
  if (_internal_has_ac()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ac(this), target, stream);
  }

  // .vlsir.spice.SweepResult sweep = 10;
  if (_internal_has_sweep()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::sweep(this), target, stream);
  }

  // .vlsir.spice.MonteResult monte = 11;
  if (_internal_has_monte()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::monte(this), target, stream);
  }

  // .vlsir.spice.CustomAnalysisResult custom = 20;
  if (_internal_has_custom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::custom(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.AnalysisResult)
  return target;
}

size_t AnalysisResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.AnalysisResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (an_case()) {
    // .vlsir.spice.OpResult op = 1;
    case kOp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *an_.op_);
      break;
    }
    // .vlsir.spice.DcResult dc = 2;
    case kDc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *an_.dc_);
      break;
    }
    // .vlsir.spice.TranResult tran = 3;
    case kTran: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *an_.tran_);
      break;
    }
    // .vlsir.spice.AcResult ac = 4;
    case kAc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *an_.ac_);
      break;
    }
    // .vlsir.spice.SweepResult sweep = 10;
    case kSweep: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *an_.sweep_);
      break;
    }
    // .vlsir.spice.MonteResult monte = 11;
    case kMonte: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *an_.monte_);
      break;
    }
    // .vlsir.spice.CustomAnalysisResult custom = 20;
    case kCustom: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *an_.custom_);
      break;
    }
    case AN_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalysisResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.AnalysisResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalysisResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnalysisResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.AnalysisResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.AnalysisResult)
    MergeFrom(*source);
  }
}

void AnalysisResult::MergeFrom(const AnalysisResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.AnalysisResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.an_case()) {
    case kOp: {
      _internal_mutable_op()->::vlsir::spice::OpResult::MergeFrom(from._internal_op());
      break;
    }
    case kDc: {
      _internal_mutable_dc()->::vlsir::spice::DcResult::MergeFrom(from._internal_dc());
      break;
    }
    case kTran: {
      _internal_mutable_tran()->::vlsir::spice::TranResult::MergeFrom(from._internal_tran());
      break;
    }
    case kAc: {
      _internal_mutable_ac()->::vlsir::spice::AcResult::MergeFrom(from._internal_ac());
      break;
    }
    case kSweep: {
      _internal_mutable_sweep()->::vlsir::spice::SweepResult::MergeFrom(from._internal_sweep());
      break;
    }
    case kMonte: {
      _internal_mutable_monte()->::vlsir::spice::MonteResult::MergeFrom(from._internal_monte());
      break;
    }
    case kCustom: {
      _internal_mutable_custom()->::vlsir::spice::CustomAnalysisResult::MergeFrom(from._internal_custom());
      break;
    }
    case AN_NOT_SET: {
      break;
    }
  }
}

void AnalysisResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.AnalysisResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalysisResult::CopyFrom(const AnalysisResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.AnalysisResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalysisResult::IsInitialized() const {
  return true;
}

void AnalysisResult::InternalSwap(AnalysisResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(an_, other->an_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnalysisResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpInput::InitAsDefaultInstance() {
}
class OpInput::_Internal {
 public:
};

OpInput::OpInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ctrl_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.OpInput)
}
OpInput::OpInput(const OpInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ctrl_(from.ctrl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_analysis_name().empty()) {
    analysis_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_analysis_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.OpInput)
}

void OpInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpInput_spice_2eproto.base);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OpInput::~OpInput() {
  // @@protoc_insertion_point(destructor:vlsir.spice.OpInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  analysis_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpInput::ArenaDtor(void* object) {
  OpInput* _this = reinterpret_cast< OpInput* >(object);
  (void)_this;
}
void OpInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpInput& OpInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpInput_spice_2eproto.base);
  return *internal_default_instance();
}


void OpInput::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.OpInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ctrl_.Clear();
  analysis_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string analysis_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_analysis_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.OpInput.analysis_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vlsir.spice.Control ctrl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ctrl(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.OpInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_analysis_name().data(), static_cast<int>(this->_internal_analysis_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.OpInput.analysis_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_analysis_name(), target);
  }

  // repeated .vlsir.spice.Control ctrl = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ctrl_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_ctrl(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.OpInput)
  return target;
}

size_t OpInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.OpInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.spice.Control ctrl = 5;
  total_size += 1UL * this->_internal_ctrl_size();
  for (const auto& msg : this->ctrl_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_analysis_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.OpInput)
  GOOGLE_DCHECK_NE(&from, this);
  const OpInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.OpInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.OpInput)
    MergeFrom(*source);
  }
}

void OpInput::MergeFrom(const OpInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.OpInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ctrl_.MergeFrom(from.ctrl_);
  if (from.analysis_name().size() > 0) {
    _internal_set_analysis_name(from._internal_analysis_name());
  }
}

void OpInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.OpInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpInput::CopyFrom(const OpInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.OpInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpInput::IsInitialized() const {
  return true;
}

void OpInput::InternalSwap(OpInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ctrl_.InternalSwap(&other->ctrl_);
  analysis_name_.Swap(&other->analysis_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OpInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpResult::InitAsDefaultInstance() {
}
class OpResult::_Internal {
 public:
};

OpResult::OpResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signals_(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.OpResult)
}
OpResult::OpResult(const OpResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signals_(from.signals_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_analysis_name().empty()) {
    analysis_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_analysis_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.OpResult)
}

void OpResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpResult_spice_2eproto.base);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OpResult::~OpResult() {
  // @@protoc_insertion_point(destructor:vlsir.spice.OpResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  analysis_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpResult::ArenaDtor(void* object) {
  OpResult* _this = reinterpret_cast< OpResult* >(object);
  (void)_this;
}
void OpResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpResult& OpResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpResult_spice_2eproto.base);
  return *internal_default_instance();
}


void OpResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.OpResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signals_.Clear();
  data_.Clear();
  analysis_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string analysis_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_analysis_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.OpResult.analysis_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string signals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signals();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.OpResult.signals"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated double data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.OpResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_analysis_name().data(), static_cast<int>(this->_internal_analysis_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.OpResult.analysis_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_analysis_name(), target);
  }

  // repeated string signals = 3;
  for (int i = 0, n = this->_internal_signals_size(); i < n; i++) {
    const auto& s = this->_internal_signals(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.OpResult.signals");
    target = stream->WriteString(3, s, target);
  }

  // repeated double data = 5;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.OpResult)
  return target;
}

size_t OpResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.OpResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string signals = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(signals_.size());
  for (int i = 0, n = signals_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      signals_.Get(i));
  }

  // repeated double data = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_analysis_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.OpResult)
  GOOGLE_DCHECK_NE(&from, this);
  const OpResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.OpResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.OpResult)
    MergeFrom(*source);
  }
}

void OpResult::MergeFrom(const OpResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.OpResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signals_.MergeFrom(from.signals_);
  data_.MergeFrom(from.data_);
  if (from.analysis_name().size() > 0) {
    _internal_set_analysis_name(from._internal_analysis_name());
  }
}

void OpResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.OpResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpResult::CopyFrom(const OpResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.OpResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpResult::IsInitialized() const {
  return true;
}

void OpResult::InternalSwap(OpResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signals_.InternalSwap(&other->signals_);
  data_.InternalSwap(&other->data_);
  analysis_name_.Swap(&other->analysis_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OpResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DcInput::InitAsDefaultInstance() {
  ::vlsir::spice::_DcInput_default_instance_._instance.get_mutable()->sweep_ = const_cast< ::vlsir::spice::Sweep*>(
      ::vlsir::spice::Sweep::internal_default_instance());
}
class DcInput::_Internal {
 public:
  static const ::vlsir::spice::Sweep& sweep(const DcInput* msg);
};

const ::vlsir::spice::Sweep&
DcInput::_Internal::sweep(const DcInput* msg) {
  return *msg->sweep_;
}
DcInput::DcInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ctrl_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.DcInput)
}
DcInput::DcInput(const DcInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ctrl_(from.ctrl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_analysis_name().empty()) {
    analysis_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_analysis_name(),
      GetArena());
  }
  indep_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_indep_name().empty()) {
    indep_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_indep_name(),
      GetArena());
  }
  if (from._internal_has_sweep()) {
    sweep_ = new ::vlsir::spice::Sweep(*from.sweep_);
  } else {
    sweep_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.DcInput)
}

void DcInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DcInput_spice_2eproto.base);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  indep_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sweep_ = nullptr;
}

DcInput::~DcInput() {
  // @@protoc_insertion_point(destructor:vlsir.spice.DcInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DcInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  analysis_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  indep_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sweep_;
}

void DcInput::ArenaDtor(void* object) {
  DcInput* _this = reinterpret_cast< DcInput* >(object);
  (void)_this;
}
void DcInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DcInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DcInput& DcInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DcInput_spice_2eproto.base);
  return *internal_default_instance();
}


void DcInput::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.DcInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ctrl_.Clear();
  analysis_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  indep_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && sweep_ != nullptr) {
    delete sweep_;
  }
  sweep_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DcInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string analysis_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_analysis_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.DcInput.analysis_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string indep_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_indep_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.DcInput.indep_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vlsir.spice.Sweep sweep = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sweep(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vlsir.spice.Control ctrl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ctrl(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DcInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.DcInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_analysis_name().data(), static_cast<int>(this->_internal_analysis_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.DcInput.analysis_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_analysis_name(), target);
  }

  // string indep_name = 2;
  if (this->indep_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_indep_name().data(), static_cast<int>(this->_internal_indep_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.DcInput.indep_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_indep_name(), target);
  }

  // .vlsir.spice.Sweep sweep = 3;
  if (this->has_sweep()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sweep(this), target, stream);
  }

  // repeated .vlsir.spice.Control ctrl = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ctrl_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_ctrl(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.DcInput)
  return target;
}

size_t DcInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.DcInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.spice.Control ctrl = 5;
  total_size += 1UL * this->_internal_ctrl_size();
  for (const auto& msg : this->ctrl_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_analysis_name());
  }

  // string indep_name = 2;
  if (this->indep_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_indep_name());
  }

  // .vlsir.spice.Sweep sweep = 3;
  if (this->has_sweep()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sweep_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DcInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.DcInput)
  GOOGLE_DCHECK_NE(&from, this);
  const DcInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DcInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.DcInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.DcInput)
    MergeFrom(*source);
  }
}

void DcInput::MergeFrom(const DcInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.DcInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ctrl_.MergeFrom(from.ctrl_);
  if (from.analysis_name().size() > 0) {
    _internal_set_analysis_name(from._internal_analysis_name());
  }
  if (from.indep_name().size() > 0) {
    _internal_set_indep_name(from._internal_indep_name());
  }
  if (from.has_sweep()) {
    _internal_mutable_sweep()->::vlsir::spice::Sweep::MergeFrom(from._internal_sweep());
  }
}

void DcInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.DcInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DcInput::CopyFrom(const DcInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.DcInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DcInput::IsInitialized() const {
  return true;
}

void DcInput::InternalSwap(DcInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ctrl_.InternalSwap(&other->ctrl_);
  analysis_name_.Swap(&other->analysis_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  indep_name_.Swap(&other->indep_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sweep_, other->sweep_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DcInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

DcResult_MeasurementsEntry_DoNotUse::DcResult_MeasurementsEntry_DoNotUse() {}
DcResult_MeasurementsEntry_DoNotUse::DcResult_MeasurementsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DcResult_MeasurementsEntry_DoNotUse::MergeFrom(const DcResult_MeasurementsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DcResult_MeasurementsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void DcResult_MeasurementsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void DcResult::InitAsDefaultInstance() {
}
class DcResult::_Internal {
 public:
};

DcResult::DcResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signals_(arena),
  data_(arena),
  measurements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.DcResult)
}
DcResult::DcResult(const DcResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signals_(from.signals_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  measurements_.MergeFrom(from.measurements_);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_analysis_name().empty()) {
    analysis_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_analysis_name(),
      GetArena());
  }
  indep_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_indep_name().empty()) {
    indep_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_indep_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.DcResult)
}

void DcResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DcResult_spice_2eproto.base);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  indep_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DcResult::~DcResult() {
  // @@protoc_insertion_point(destructor:vlsir.spice.DcResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DcResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  analysis_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  indep_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DcResult::ArenaDtor(void* object) {
  DcResult* _this = reinterpret_cast< DcResult* >(object);
  (void)_this;
}
void DcResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DcResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DcResult& DcResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DcResult_spice_2eproto.base);
  return *internal_default_instance();
}


void DcResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.DcResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signals_.Clear();
  data_.Clear();
  measurements_.Clear();
  analysis_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  indep_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DcResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string analysis_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_analysis_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.DcResult.analysis_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string indep_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_indep_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.DcResult.indep_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string signals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signals();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.DcResult.signals"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated double data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // map<string, double> measurements = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&measurements_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DcResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.DcResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_analysis_name().data(), static_cast<int>(this->_internal_analysis_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.DcResult.analysis_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_analysis_name(), target);
  }

  // string indep_name = 2;
  if (this->indep_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_indep_name().data(), static_cast<int>(this->_internal_indep_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.DcResult.indep_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_indep_name(), target);
  }

  // repeated string signals = 3;
  for (int i = 0, n = this->_internal_signals_size(); i < n; i++) {
    const auto& s = this->_internal_signals(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.DcResult.signals");
    target = stream->WriteString(3, s, target);
  }

  // repeated double data = 5;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_data(), target);
  }

  // map<string, double> measurements = 10;
  if (!this->_internal_measurements().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "vlsir.spice.DcResult.MeasurementsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_measurements().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_measurements().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_measurements().begin();
          it != this->_internal_measurements().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DcResult_MeasurementsEntry_DoNotUse::Funcs::InternalSerialize(10, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_measurements().begin();
          it != this->_internal_measurements().end(); ++it) {
        target = DcResult_MeasurementsEntry_DoNotUse::Funcs::InternalSerialize(10, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.DcResult)
  return target;
}

size_t DcResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.DcResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string signals = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(signals_.size());
  for (int i = 0, n = signals_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      signals_.Get(i));
  }

  // repeated double data = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, double> measurements = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_measurements_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_measurements().begin();
      it != this->_internal_measurements().end(); ++it) {
    total_size += DcResult_MeasurementsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_analysis_name());
  }

  // string indep_name = 2;
  if (this->indep_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_indep_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DcResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.DcResult)
  GOOGLE_DCHECK_NE(&from, this);
  const DcResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DcResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.DcResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.DcResult)
    MergeFrom(*source);
  }
}

void DcResult::MergeFrom(const DcResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.DcResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signals_.MergeFrom(from.signals_);
  data_.MergeFrom(from.data_);
  measurements_.MergeFrom(from.measurements_);
  if (from.analysis_name().size() > 0) {
    _internal_set_analysis_name(from._internal_analysis_name());
  }
  if (from.indep_name().size() > 0) {
    _internal_set_indep_name(from._internal_indep_name());
  }
}

void DcResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.DcResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DcResult::CopyFrom(const DcResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.DcResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DcResult::IsInitialized() const {
  return true;
}

void DcResult::InternalSwap(DcResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signals_.InternalSwap(&other->signals_);
  data_.InternalSwap(&other->data_);
  measurements_.Swap(&other->measurements_);
  analysis_name_.Swap(&other->analysis_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  indep_name_.Swap(&other->indep_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DcResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

TranInput_IcEntry_DoNotUse::TranInput_IcEntry_DoNotUse() {}
TranInput_IcEntry_DoNotUse::TranInput_IcEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TranInput_IcEntry_DoNotUse::MergeFrom(const TranInput_IcEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TranInput_IcEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TranInput_IcEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void TranInput::InitAsDefaultInstance() {
}
class TranInput::_Internal {
 public:
};

TranInput::TranInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ic_(arena),
  ctrl_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.TranInput)
}
TranInput::TranInput(const TranInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ctrl_(from.ctrl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ic_.MergeFrom(from.ic_);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_analysis_name().empty()) {
    analysis_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_analysis_name(),
      GetArena());
  }
  ::memcpy(&tstop_, &from.tstop_,
    static_cast<size_t>(reinterpret_cast<char*>(&tstep_) -
    reinterpret_cast<char*>(&tstop_)) + sizeof(tstep_));
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.TranInput)
}

void TranInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TranInput_spice_2eproto.base);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tstop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tstep_) -
      reinterpret_cast<char*>(&tstop_)) + sizeof(tstep_));
}

TranInput::~TranInput() {
  // @@protoc_insertion_point(destructor:vlsir.spice.TranInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TranInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  analysis_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TranInput::ArenaDtor(void* object) {
  TranInput* _this = reinterpret_cast< TranInput* >(object);
  (void)_this;
}
void TranInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TranInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TranInput& TranInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TranInput_spice_2eproto.base);
  return *internal_default_instance();
}


void TranInput::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.TranInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ic_.Clear();
  ctrl_.Clear();
  analysis_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&tstop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tstep_) -
      reinterpret_cast<char*>(&tstop_)) + sizeof(tstep_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TranInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string analysis_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_analysis_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.TranInput.analysis_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double tstop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          tstop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double tstep = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          tstep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // map<string, double> ic = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&ic_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vlsir.spice.Control ctrl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ctrl(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TranInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.TranInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_analysis_name().data(), static_cast<int>(this->_internal_analysis_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.TranInput.analysis_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_analysis_name(), target);
  }

  // double tstop = 2;
  if (!(this->tstop() <= 0 && this->tstop() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_tstop(), target);
  }

  // double tstep = 3;
  if (!(this->tstep() <= 0 && this->tstep() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_tstep(), target);
  }

  // map<string, double> ic = 4;
  if (!this->_internal_ic().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "vlsir.spice.TranInput.IcEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_ic().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_ic().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_ic().begin();
          it != this->_internal_ic().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TranInput_IcEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_ic().begin();
          it != this->_internal_ic().end(); ++it) {
        target = TranInput_IcEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .vlsir.spice.Control ctrl = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ctrl_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_ctrl(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.TranInput)
  return target;
}

size_t TranInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.TranInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, double> ic = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ic_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_ic().begin();
      it != this->_internal_ic().end(); ++it) {
    total_size += TranInput_IcEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .vlsir.spice.Control ctrl = 5;
  total_size += 1UL * this->_internal_ctrl_size();
  for (const auto& msg : this->ctrl_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_analysis_name());
  }

  // double tstop = 2;
  if (!(this->tstop() <= 0 && this->tstop() >= 0)) {
    total_size += 1 + 8;
  }

  // double tstep = 3;
  if (!(this->tstep() <= 0 && this->tstep() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TranInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.TranInput)
  GOOGLE_DCHECK_NE(&from, this);
  const TranInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TranInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.TranInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.TranInput)
    MergeFrom(*source);
  }
}

void TranInput::MergeFrom(const TranInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.TranInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ic_.MergeFrom(from.ic_);
  ctrl_.MergeFrom(from.ctrl_);
  if (from.analysis_name().size() > 0) {
    _internal_set_analysis_name(from._internal_analysis_name());
  }
  if (!(from.tstop() <= 0 && from.tstop() >= 0)) {
    _internal_set_tstop(from._internal_tstop());
  }
  if (!(from.tstep() <= 0 && from.tstep() >= 0)) {
    _internal_set_tstep(from._internal_tstep());
  }
}

void TranInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.TranInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TranInput::CopyFrom(const TranInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.TranInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranInput::IsInitialized() const {
  return true;
}

void TranInput::InternalSwap(TranInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ic_.Swap(&other->ic_);
  ctrl_.InternalSwap(&other->ctrl_);
  analysis_name_.Swap(&other->analysis_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TranInput, tstep_)
      + sizeof(TranInput::tstep_)
      - PROTOBUF_FIELD_OFFSET(TranInput, tstop_)>(
          reinterpret_cast<char*>(&tstop_),
          reinterpret_cast<char*>(&other->tstop_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TranInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

TranResult_MeasurementsEntry_DoNotUse::TranResult_MeasurementsEntry_DoNotUse() {}
TranResult_MeasurementsEntry_DoNotUse::TranResult_MeasurementsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TranResult_MeasurementsEntry_DoNotUse::MergeFrom(const TranResult_MeasurementsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TranResult_MeasurementsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TranResult_MeasurementsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void TranResult::InitAsDefaultInstance() {
}
class TranResult::_Internal {
 public:
};

TranResult::TranResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signals_(arena),
  data_(arena),
  measurements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.TranResult)
}
TranResult::TranResult(const TranResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signals_(from.signals_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  measurements_.MergeFrom(from.measurements_);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_analysis_name().empty()) {
    analysis_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_analysis_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.TranResult)
}

void TranResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TranResult_spice_2eproto.base);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TranResult::~TranResult() {
  // @@protoc_insertion_point(destructor:vlsir.spice.TranResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TranResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  analysis_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TranResult::ArenaDtor(void* object) {
  TranResult* _this = reinterpret_cast< TranResult* >(object);
  (void)_this;
}
void TranResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TranResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TranResult& TranResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TranResult_spice_2eproto.base);
  return *internal_default_instance();
}


void TranResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.TranResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signals_.Clear();
  data_.Clear();
  measurements_.Clear();
  analysis_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TranResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string analysis_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_analysis_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.TranResult.analysis_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string signals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signals();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.TranResult.signals"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated double data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // map<string, double> measurements = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&measurements_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TranResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.TranResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_analysis_name().data(), static_cast<int>(this->_internal_analysis_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.TranResult.analysis_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_analysis_name(), target);
  }

  // repeated string signals = 3;
  for (int i = 0, n = this->_internal_signals_size(); i < n; i++) {
    const auto& s = this->_internal_signals(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.TranResult.signals");
    target = stream->WriteString(3, s, target);
  }

  // repeated double data = 5;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_data(), target);
  }

  // map<string, double> measurements = 10;
  if (!this->_internal_measurements().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "vlsir.spice.TranResult.MeasurementsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_measurements().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_measurements().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_measurements().begin();
          it != this->_internal_measurements().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TranResult_MeasurementsEntry_DoNotUse::Funcs::InternalSerialize(10, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_measurements().begin();
          it != this->_internal_measurements().end(); ++it) {
        target = TranResult_MeasurementsEntry_DoNotUse::Funcs::InternalSerialize(10, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.TranResult)
  return target;
}

size_t TranResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.TranResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string signals = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(signals_.size());
  for (int i = 0, n = signals_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      signals_.Get(i));
  }

  // repeated double data = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, double> measurements = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_measurements_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_measurements().begin();
      it != this->_internal_measurements().end(); ++it) {
    total_size += TranResult_MeasurementsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_analysis_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TranResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.TranResult)
  GOOGLE_DCHECK_NE(&from, this);
  const TranResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TranResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.TranResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.TranResult)
    MergeFrom(*source);
  }
}

void TranResult::MergeFrom(const TranResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.TranResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signals_.MergeFrom(from.signals_);
  data_.MergeFrom(from.data_);
  measurements_.MergeFrom(from.measurements_);
  if (from.analysis_name().size() > 0) {
    _internal_set_analysis_name(from._internal_analysis_name());
  }
}

void TranResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.TranResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TranResult::CopyFrom(const TranResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.TranResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranResult::IsInitialized() const {
  return true;
}

void TranResult::InternalSwap(TranResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signals_.InternalSwap(&other->signals_);
  data_.InternalSwap(&other->data_);
  measurements_.Swap(&other->measurements_);
  analysis_name_.Swap(&other->analysis_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TranResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ComplexNum::InitAsDefaultInstance() {
}
class ComplexNum::_Internal {
 public:
};

ComplexNum::ComplexNum(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.ComplexNum)
}
ComplexNum::ComplexNum(const ComplexNum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&re_, &from.re_,
    static_cast<size_t>(reinterpret_cast<char*>(&im_) -
    reinterpret_cast<char*>(&re_)) + sizeof(im_));
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.ComplexNum)
}

void ComplexNum::SharedCtor() {
  ::memset(&re_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&im_) -
      reinterpret_cast<char*>(&re_)) + sizeof(im_));
}

ComplexNum::~ComplexNum() {
  // @@protoc_insertion_point(destructor:vlsir.spice.ComplexNum)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComplexNum::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ComplexNum::ArenaDtor(void* object) {
  ComplexNum* _this = reinterpret_cast< ComplexNum* >(object);
  (void)_this;
}
void ComplexNum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComplexNum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComplexNum& ComplexNum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ComplexNum_spice_2eproto.base);
  return *internal_default_instance();
}


void ComplexNum::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.ComplexNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&re_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&im_) -
      reinterpret_cast<char*>(&re_)) + sizeof(im_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexNum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double re = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          re_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double im = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          im_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComplexNum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.ComplexNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double re = 1;
  if (!(this->re() <= 0 && this->re() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_re(), target);
  }

  // double im = 2;
  if (!(this->im() <= 0 && this->im() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_im(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.ComplexNum)
  return target;
}

size_t ComplexNum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.ComplexNum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double re = 1;
  if (!(this->re() <= 0 && this->re() >= 0)) {
    total_size += 1 + 8;
  }

  // double im = 2;
  if (!(this->im() <= 0 && this->im() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComplexNum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.ComplexNum)
  GOOGLE_DCHECK_NE(&from, this);
  const ComplexNum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComplexNum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.ComplexNum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.ComplexNum)
    MergeFrom(*source);
  }
}

void ComplexNum::MergeFrom(const ComplexNum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.ComplexNum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.re() <= 0 && from.re() >= 0)) {
    _internal_set_re(from._internal_re());
  }
  if (!(from.im() <= 0 && from.im() >= 0)) {
    _internal_set_im(from._internal_im());
  }
}

void ComplexNum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.ComplexNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComplexNum::CopyFrom(const ComplexNum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.ComplexNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexNum::IsInitialized() const {
  return true;
}

void ComplexNum::InternalSwap(ComplexNum* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplexNum, im_)
      + sizeof(ComplexNum::im_)
      - PROTOBUF_FIELD_OFFSET(ComplexNum, re_)>(
          reinterpret_cast<char*>(&re_),
          reinterpret_cast<char*>(&other->re_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexNum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AcInput::InitAsDefaultInstance() {
}
class AcInput::_Internal {
 public:
};

AcInput::AcInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ctrl_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.AcInput)
}
AcInput::AcInput(const AcInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ctrl_(from.ctrl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_analysis_name().empty()) {
    analysis_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_analysis_name(),
      GetArena());
  }
  ::memcpy(&fstart_, &from.fstart_,
    static_cast<size_t>(reinterpret_cast<char*>(&npts_) -
    reinterpret_cast<char*>(&fstart_)) + sizeof(npts_));
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.AcInput)
}

void AcInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AcInput_spice_2eproto.base);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&fstart_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&npts_) -
      reinterpret_cast<char*>(&fstart_)) + sizeof(npts_));
}

AcInput::~AcInput() {
  // @@protoc_insertion_point(destructor:vlsir.spice.AcInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AcInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  analysis_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AcInput::ArenaDtor(void* object) {
  AcInput* _this = reinterpret_cast< AcInput* >(object);
  (void)_this;
}
void AcInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AcInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcInput& AcInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcInput_spice_2eproto.base);
  return *internal_default_instance();
}


void AcInput::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.AcInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ctrl_.Clear();
  analysis_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&fstart_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&npts_) -
      reinterpret_cast<char*>(&fstart_)) + sizeof(npts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string analysis_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_analysis_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.AcInput.analysis_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double fstart = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          fstart_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double fstop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          fstop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 npts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          npts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vlsir.spice.Control ctrl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ctrl(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.AcInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_analysis_name().data(), static_cast<int>(this->_internal_analysis_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.AcInput.analysis_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_analysis_name(), target);
  }

  // double fstart = 2;
  if (!(this->fstart() <= 0 && this->fstart() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_fstart(), target);
  }

  // double fstop = 3;
  if (!(this->fstop() <= 0 && this->fstop() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_fstop(), target);
  }

  // uint64 npts = 4;
  if (this->npts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_npts(), target);
  }

  // repeated .vlsir.spice.Control ctrl = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ctrl_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_ctrl(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.AcInput)
  return target;
}

size_t AcInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.AcInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.spice.Control ctrl = 5;
  total_size += 1UL * this->_internal_ctrl_size();
  for (const auto& msg : this->ctrl_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_analysis_name());
  }

  // double fstart = 2;
  if (!(this->fstart() <= 0 && this->fstart() >= 0)) {
    total_size += 1 + 8;
  }

  // double fstop = 3;
  if (!(this->fstop() <= 0 && this->fstop() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 npts = 4;
  if (this->npts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_npts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.AcInput)
  GOOGLE_DCHECK_NE(&from, this);
  const AcInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AcInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.AcInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.AcInput)
    MergeFrom(*source);
  }
}

void AcInput::MergeFrom(const AcInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.AcInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ctrl_.MergeFrom(from.ctrl_);
  if (from.analysis_name().size() > 0) {
    _internal_set_analysis_name(from._internal_analysis_name());
  }
  if (!(from.fstart() <= 0 && from.fstart() >= 0)) {
    _internal_set_fstart(from._internal_fstart());
  }
  if (!(from.fstop() <= 0 && from.fstop() >= 0)) {
    _internal_set_fstop(from._internal_fstop());
  }
  if (from.npts() != 0) {
    _internal_set_npts(from._internal_npts());
  }
}

void AcInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.AcInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcInput::CopyFrom(const AcInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.AcInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcInput::IsInitialized() const {
  return true;
}

void AcInput::InternalSwap(AcInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ctrl_.InternalSwap(&other->ctrl_);
  analysis_name_.Swap(&other->analysis_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AcInput, npts_)
      + sizeof(AcInput::npts_)
      - PROTOBUF_FIELD_OFFSET(AcInput, fstart_)>(
          reinterpret_cast<char*>(&fstart_),
          reinterpret_cast<char*>(&other->fstart_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AcInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AcResult_MeasurementsEntry_DoNotUse::AcResult_MeasurementsEntry_DoNotUse() {}
AcResult_MeasurementsEntry_DoNotUse::AcResult_MeasurementsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AcResult_MeasurementsEntry_DoNotUse::MergeFrom(const AcResult_MeasurementsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AcResult_MeasurementsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AcResult_MeasurementsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void AcResult::InitAsDefaultInstance() {
}
class AcResult::_Internal {
 public:
};

AcResult::AcResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  freq_(arena),
  signals_(arena),
  data_(arena),
  measurements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.AcResult)
}
AcResult::AcResult(const AcResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      freq_(from.freq_),
      signals_(from.signals_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  measurements_.MergeFrom(from.measurements_);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_analysis_name().empty()) {
    analysis_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_analysis_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.AcResult)
}

void AcResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AcResult_spice_2eproto.base);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AcResult::~AcResult() {
  // @@protoc_insertion_point(destructor:vlsir.spice.AcResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AcResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  analysis_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AcResult::ArenaDtor(void* object) {
  AcResult* _this = reinterpret_cast< AcResult* >(object);
  (void)_this;
}
void AcResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AcResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcResult& AcResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcResult_spice_2eproto.base);
  return *internal_default_instance();
}


void AcResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.AcResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  freq_.Clear();
  signals_.Clear();
  data_.Clear();
  measurements_.Clear();
  analysis_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string analysis_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_analysis_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.AcResult.analysis_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double freq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_freq(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_freq(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated string signals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signals();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.AcResult.signals"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vlsir.spice.ComplexNum data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, double> measurements = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&measurements_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.AcResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_analysis_name().data(), static_cast<int>(this->_internal_analysis_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.AcResult.analysis_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_analysis_name(), target);
  }

  // repeated double freq = 2;
  if (this->_internal_freq_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_freq(), target);
  }

  // repeated string signals = 3;
  for (int i = 0, n = this->_internal_signals_size(); i < n; i++) {
    const auto& s = this->_internal_signals(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.AcResult.signals");
    target = stream->WriteString(3, s, target);
  }

  // repeated .vlsir.spice.ComplexNum data = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_data(i), target, stream);
  }

  // map<string, double> measurements = 10;
  if (!this->_internal_measurements().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "vlsir.spice.AcResult.MeasurementsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_measurements().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_measurements().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_measurements().begin();
          it != this->_internal_measurements().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AcResult_MeasurementsEntry_DoNotUse::Funcs::InternalSerialize(10, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_measurements().begin();
          it != this->_internal_measurements().end(); ++it) {
        target = AcResult_MeasurementsEntry_DoNotUse::Funcs::InternalSerialize(10, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.AcResult)
  return target;
}

size_t AcResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.AcResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double freq = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_freq_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _freq_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string signals = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(signals_.size());
  for (int i = 0, n = signals_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      signals_.Get(i));
  }

  // repeated .vlsir.spice.ComplexNum data = 5;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, double> measurements = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_measurements_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_measurements().begin();
      it != this->_internal_measurements().end(); ++it) {
    total_size += AcResult_MeasurementsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_analysis_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.AcResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AcResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AcResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.AcResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.AcResult)
    MergeFrom(*source);
  }
}

void AcResult::MergeFrom(const AcResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.AcResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  freq_.MergeFrom(from.freq_);
  signals_.MergeFrom(from.signals_);
  data_.MergeFrom(from.data_);
  measurements_.MergeFrom(from.measurements_);
  if (from.analysis_name().size() > 0) {
    _internal_set_analysis_name(from._internal_analysis_name());
  }
}

void AcResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.AcResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcResult::CopyFrom(const AcResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.AcResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcResult::IsInitialized() const {
  return true;
}

void AcResult::InternalSwap(AcResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  freq_.InternalSwap(&other->freq_);
  signals_.InternalSwap(&other->signals_);
  data_.InternalSwap(&other->data_);
  measurements_.Swap(&other->measurements_);
  analysis_name_.Swap(&other->analysis_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AcResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SweepInput::InitAsDefaultInstance() {
  ::vlsir::spice::_SweepInput_default_instance_._instance.get_mutable()->sweep_ = const_cast< ::vlsir::spice::Sweep*>(
      ::vlsir::spice::Sweep::internal_default_instance());
}
class SweepInput::_Internal {
 public:
  static const ::vlsir::spice::Sweep& sweep(const SweepInput* msg);
};

const ::vlsir::spice::Sweep&
SweepInput::_Internal::sweep(const SweepInput* msg) {
  return *msg->sweep_;
}
SweepInput::SweepInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  an_(arena),
  ctrls_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.SweepInput)
}
SweepInput::SweepInput(const SweepInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      an_(from.an_),
      ctrls_(from.ctrls_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_analysis_name().empty()) {
    analysis_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_analysis_name(),
      GetArena());
  }
  variable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_variable().empty()) {
    variable_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_variable(),
      GetArena());
  }
  if (from._internal_has_sweep()) {
    sweep_ = new ::vlsir::spice::Sweep(*from.sweep_);
  } else {
    sweep_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.SweepInput)
}

void SweepInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Analysis_spice_2eproto.base);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  variable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sweep_ = nullptr;
}

SweepInput::~SweepInput() {
  // @@protoc_insertion_point(destructor:vlsir.spice.SweepInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SweepInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  analysis_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  variable_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sweep_;
}

void SweepInput::ArenaDtor(void* object) {
  SweepInput* _this = reinterpret_cast< SweepInput* >(object);
  (void)_this;
}
void SweepInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SweepInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SweepInput& SweepInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Analysis_spice_2eproto.base);
  return *internal_default_instance();
}


void SweepInput::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.SweepInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  an_.Clear();
  ctrls_.Clear();
  analysis_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  variable_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && sweep_ != nullptr) {
    delete sweep_;
  }
  sweep_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SweepInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string analysis_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_analysis_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.SweepInput.analysis_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string variable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_variable();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.SweepInput.variable"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vlsir.spice.Sweep sweep = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sweep(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vlsir.spice.Analysis an = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_an(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vlsir.spice.Control ctrls = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ctrls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SweepInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.SweepInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_analysis_name().data(), static_cast<int>(this->_internal_analysis_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.SweepInput.analysis_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_analysis_name(), target);
  }

  // string variable = 2;
  if (this->variable().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_variable().data(), static_cast<int>(this->_internal_variable().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.SweepInput.variable");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_variable(), target);
  }

  // .vlsir.spice.Sweep sweep = 3;
  if (this->has_sweep()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sweep(this), target, stream);
  }

  // repeated .vlsir.spice.Analysis an = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_an_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_an(i), target, stream);
  }

  // repeated .vlsir.spice.Control ctrls = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ctrls_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_ctrls(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.SweepInput)
  return target;
}

size_t SweepInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.SweepInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.spice.Analysis an = 4;
  total_size += 1UL * this->_internal_an_size();
  for (const auto& msg : this->an_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vlsir.spice.Control ctrls = 5;
  total_size += 1UL * this->_internal_ctrls_size();
  for (const auto& msg : this->ctrls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_analysis_name());
  }

  // string variable = 2;
  if (this->variable().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_variable());
  }

  // .vlsir.spice.Sweep sweep = 3;
  if (this->has_sweep()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sweep_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SweepInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.SweepInput)
  GOOGLE_DCHECK_NE(&from, this);
  const SweepInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SweepInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.SweepInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.SweepInput)
    MergeFrom(*source);
  }
}

void SweepInput::MergeFrom(const SweepInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.SweepInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  an_.MergeFrom(from.an_);
  ctrls_.MergeFrom(from.ctrls_);
  if (from.analysis_name().size() > 0) {
    _internal_set_analysis_name(from._internal_analysis_name());
  }
  if (from.variable().size() > 0) {
    _internal_set_variable(from._internal_variable());
  }
  if (from.has_sweep()) {
    _internal_mutable_sweep()->::vlsir::spice::Sweep::MergeFrom(from._internal_sweep());
  }
}

void SweepInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.SweepInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SweepInput::CopyFrom(const SweepInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.SweepInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SweepInput::IsInitialized() const {
  return true;
}

void SweepInput::InternalSwap(SweepInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  an_.InternalSwap(&other->an_);
  ctrls_.InternalSwap(&other->ctrls_);
  analysis_name_.Swap(&other->analysis_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  variable_.Swap(&other->variable_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sweep_, other->sweep_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SweepInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SweepResult::InitAsDefaultInstance() {
  ::vlsir::spice::_SweepResult_default_instance_._instance.get_mutable()->sweep_ = const_cast< ::vlsir::spice::Sweep*>(
      ::vlsir::spice::Sweep::internal_default_instance());
}
class SweepResult::_Internal {
 public:
  static const ::vlsir::spice::Sweep& sweep(const SweepResult* msg);
};

const ::vlsir::spice::Sweep&
SweepResult::_Internal::sweep(const SweepResult* msg) {
  return *msg->sweep_;
}
SweepResult::SweepResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  an_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.SweepResult)
}
SweepResult::SweepResult(const SweepResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      an_(from.an_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_analysis_name().empty()) {
    analysis_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_analysis_name(),
      GetArena());
  }
  variable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_variable().empty()) {
    variable_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_variable(),
      GetArena());
  }
  if (from._internal_has_sweep()) {
    sweep_ = new ::vlsir::spice::Sweep(*from.sweep_);
  } else {
    sweep_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.SweepResult)
}

void SweepResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnalysisResult_spice_2eproto.base);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  variable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sweep_ = nullptr;
}

SweepResult::~SweepResult() {
  // @@protoc_insertion_point(destructor:vlsir.spice.SweepResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SweepResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  analysis_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  variable_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sweep_;
}

void SweepResult::ArenaDtor(void* object) {
  SweepResult* _this = reinterpret_cast< SweepResult* >(object);
  (void)_this;
}
void SweepResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SweepResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SweepResult& SweepResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnalysisResult_spice_2eproto.base);
  return *internal_default_instance();
}


void SweepResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.SweepResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  an_.Clear();
  analysis_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  variable_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && sweep_ != nullptr) {
    delete sweep_;
  }
  sweep_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SweepResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string analysis_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_analysis_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.SweepResult.analysis_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string variable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_variable();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.SweepResult.variable"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vlsir.spice.Sweep sweep = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sweep(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vlsir.spice.AnalysisResult an = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_an(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SweepResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.SweepResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_analysis_name().data(), static_cast<int>(this->_internal_analysis_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.SweepResult.analysis_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_analysis_name(), target);
  }

  // string variable = 2;
  if (this->variable().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_variable().data(), static_cast<int>(this->_internal_variable().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.SweepResult.variable");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_variable(), target);
  }

  // .vlsir.spice.Sweep sweep = 3;
  if (this->has_sweep()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sweep(this), target, stream);
  }

  // repeated .vlsir.spice.AnalysisResult an = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_an_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_an(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.SweepResult)
  return target;
}

size_t SweepResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.SweepResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.spice.AnalysisResult an = 4;
  total_size += 1UL * this->_internal_an_size();
  for (const auto& msg : this->an_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_analysis_name());
  }

  // string variable = 2;
  if (this->variable().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_variable());
  }

  // .vlsir.spice.Sweep sweep = 3;
  if (this->has_sweep()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sweep_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SweepResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.SweepResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SweepResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SweepResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.SweepResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.SweepResult)
    MergeFrom(*source);
  }
}

void SweepResult::MergeFrom(const SweepResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.SweepResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  an_.MergeFrom(from.an_);
  if (from.analysis_name().size() > 0) {
    _internal_set_analysis_name(from._internal_analysis_name());
  }
  if (from.variable().size() > 0) {
    _internal_set_variable(from._internal_variable());
  }
  if (from.has_sweep()) {
    _internal_mutable_sweep()->::vlsir::spice::Sweep::MergeFrom(from._internal_sweep());
  }
}

void SweepResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.SweepResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SweepResult::CopyFrom(const SweepResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.SweepResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SweepResult::IsInitialized() const {
  return true;
}

void SweepResult::InternalSwap(SweepResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  an_.InternalSwap(&other->an_);
  analysis_name_.Swap(&other->analysis_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  variable_.Swap(&other->variable_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sweep_, other->sweep_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SweepResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MonteInput::InitAsDefaultInstance() {
}
class MonteInput::_Internal {
 public:
};

MonteInput::MonteInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  an_(arena),
  ctrls_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.MonteInput)
}
MonteInput::MonteInput(const MonteInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      an_(from.an_),
      ctrls_(from.ctrls_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_analysis_name().empty()) {
    analysis_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_analysis_name(),
      GetArena());
  }
  ::memcpy(&npts_, &from.npts_,
    static_cast<size_t>(reinterpret_cast<char*>(&seed_) -
    reinterpret_cast<char*>(&npts_)) + sizeof(seed_));
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.MonteInput)
}

void MonteInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Analysis_spice_2eproto.base);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&npts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seed_) -
      reinterpret_cast<char*>(&npts_)) + sizeof(seed_));
}

MonteInput::~MonteInput() {
  // @@protoc_insertion_point(destructor:vlsir.spice.MonteInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MonteInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  analysis_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MonteInput::ArenaDtor(void* object) {
  MonteInput* _this = reinterpret_cast< MonteInput* >(object);
  (void)_this;
}
void MonteInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MonteInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonteInput& MonteInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Analysis_spice_2eproto.base);
  return *internal_default_instance();
}


void MonteInput::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.MonteInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  an_.Clear();
  ctrls_.Clear();
  analysis_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&npts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seed_) -
      reinterpret_cast<char*>(&npts_)) + sizeof(seed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonteInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string analysis_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_analysis_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.MonteInput.analysis_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 npts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          npts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 seed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vlsir.spice.Analysis an = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_an(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vlsir.spice.Control ctrls = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ctrls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MonteInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.MonteInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_analysis_name().data(), static_cast<int>(this->_internal_analysis_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.MonteInput.analysis_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_analysis_name(), target);
  }

  // int64 npts = 2;
  if (this->npts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_npts(), target);
  }

  // int64 seed = 3;
  if (this->seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_seed(), target);
  }

  // repeated .vlsir.spice.Analysis an = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_an_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_an(i), target, stream);
  }

  // repeated .vlsir.spice.Control ctrls = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ctrls_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_ctrls(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.MonteInput)
  return target;
}

size_t MonteInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.MonteInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.spice.Analysis an = 4;
  total_size += 1UL * this->_internal_an_size();
  for (const auto& msg : this->an_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vlsir.spice.Control ctrls = 5;
  total_size += 1UL * this->_internal_ctrls_size();
  for (const auto& msg : this->ctrls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_analysis_name());
  }

  // int64 npts = 2;
  if (this->npts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_npts());
  }

  // int64 seed = 3;
  if (this->seed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonteInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.MonteInput)
  GOOGLE_DCHECK_NE(&from, this);
  const MonteInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MonteInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.MonteInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.MonteInput)
    MergeFrom(*source);
  }
}

void MonteInput::MergeFrom(const MonteInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.MonteInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  an_.MergeFrom(from.an_);
  ctrls_.MergeFrom(from.ctrls_);
  if (from.analysis_name().size() > 0) {
    _internal_set_analysis_name(from._internal_analysis_name());
  }
  if (from.npts() != 0) {
    _internal_set_npts(from._internal_npts());
  }
  if (from.seed() != 0) {
    _internal_set_seed(from._internal_seed());
  }
}

void MonteInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.MonteInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonteInput::CopyFrom(const MonteInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.MonteInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonteInput::IsInitialized() const {
  return true;
}

void MonteInput::InternalSwap(MonteInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  an_.InternalSwap(&other->an_);
  ctrls_.InternalSwap(&other->ctrls_);
  analysis_name_.Swap(&other->analysis_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonteInput, seed_)
      + sizeof(MonteInput::seed_)
      - PROTOBUF_FIELD_OFFSET(MonteInput, npts_)>(
          reinterpret_cast<char*>(&npts_),
          reinterpret_cast<char*>(&other->npts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MonteInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MonteResult::InitAsDefaultInstance() {
  ::vlsir::spice::_MonteResult_default_instance_._instance.get_mutable()->sweep_ = const_cast< ::vlsir::spice::Sweep*>(
      ::vlsir::spice::Sweep::internal_default_instance());
}
class MonteResult::_Internal {
 public:
  static const ::vlsir::spice::Sweep& sweep(const MonteResult* msg);
};

const ::vlsir::spice::Sweep&
MonteResult::_Internal::sweep(const MonteResult* msg) {
  return *msg->sweep_;
}
MonteResult::MonteResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  an_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.MonteResult)
}
MonteResult::MonteResult(const MonteResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      an_(from.an_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_analysis_name().empty()) {
    analysis_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_analysis_name(),
      GetArena());
  }
  variable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_variable().empty()) {
    variable_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_variable(),
      GetArena());
  }
  if (from._internal_has_sweep()) {
    sweep_ = new ::vlsir::spice::Sweep(*from.sweep_);
  } else {
    sweep_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.MonteResult)
}

void MonteResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnalysisResult_spice_2eproto.base);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  variable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sweep_ = nullptr;
}

MonteResult::~MonteResult() {
  // @@protoc_insertion_point(destructor:vlsir.spice.MonteResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MonteResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  analysis_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  variable_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sweep_;
}

void MonteResult::ArenaDtor(void* object) {
  MonteResult* _this = reinterpret_cast< MonteResult* >(object);
  (void)_this;
}
void MonteResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MonteResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonteResult& MonteResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnalysisResult_spice_2eproto.base);
  return *internal_default_instance();
}


void MonteResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.MonteResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  an_.Clear();
  analysis_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  variable_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && sweep_ != nullptr) {
    delete sweep_;
  }
  sweep_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonteResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string analysis_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_analysis_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.MonteResult.analysis_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string variable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_variable();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.MonteResult.variable"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vlsir.spice.Sweep sweep = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sweep(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vlsir.spice.AnalysisResult an = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_an(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MonteResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.MonteResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_analysis_name().data(), static_cast<int>(this->_internal_analysis_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.MonteResult.analysis_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_analysis_name(), target);
  }

  // string variable = 2;
  if (this->variable().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_variable().data(), static_cast<int>(this->_internal_variable().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.MonteResult.variable");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_variable(), target);
  }

  // .vlsir.spice.Sweep sweep = 3;
  if (this->has_sweep()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sweep(this), target, stream);
  }

  // repeated .vlsir.spice.AnalysisResult an = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_an_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_an(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.MonteResult)
  return target;
}

size_t MonteResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.MonteResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.spice.AnalysisResult an = 4;
  total_size += 1UL * this->_internal_an_size();
  for (const auto& msg : this->an_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_analysis_name());
  }

  // string variable = 2;
  if (this->variable().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_variable());
  }

  // .vlsir.spice.Sweep sweep = 3;
  if (this->has_sweep()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sweep_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonteResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.MonteResult)
  GOOGLE_DCHECK_NE(&from, this);
  const MonteResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MonteResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.MonteResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.MonteResult)
    MergeFrom(*source);
  }
}

void MonteResult::MergeFrom(const MonteResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.MonteResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  an_.MergeFrom(from.an_);
  if (from.analysis_name().size() > 0) {
    _internal_set_analysis_name(from._internal_analysis_name());
  }
  if (from.variable().size() > 0) {
    _internal_set_variable(from._internal_variable());
  }
  if (from.has_sweep()) {
    _internal_mutable_sweep()->::vlsir::spice::Sweep::MergeFrom(from._internal_sweep());
  }
}

void MonteResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.MonteResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonteResult::CopyFrom(const MonteResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.MonteResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonteResult::IsInitialized() const {
  return true;
}

void MonteResult::InternalSwap(MonteResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  an_.InternalSwap(&other->an_);
  analysis_name_.Swap(&other->analysis_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  variable_.Swap(&other->variable_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sweep_, other->sweep_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MonteResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CustomAnalysisInput::InitAsDefaultInstance() {
}
class CustomAnalysisInput::_Internal {
 public:
};

CustomAnalysisInput::CustomAnalysisInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ctrls_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.CustomAnalysisInput)
}
CustomAnalysisInput::CustomAnalysisInput(const CustomAnalysisInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ctrls_(from.ctrls_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_analysis_name().empty()) {
    analysis_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_analysis_name(),
      GetArena());
  }
  cmd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cmd().empty()) {
    cmd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cmd(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.CustomAnalysisInput)
}

void CustomAnalysisInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CustomAnalysisInput_spice_2eproto.base);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cmd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CustomAnalysisInput::~CustomAnalysisInput() {
  // @@protoc_insertion_point(destructor:vlsir.spice.CustomAnalysisInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CustomAnalysisInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  analysis_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cmd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CustomAnalysisInput::ArenaDtor(void* object) {
  CustomAnalysisInput* _this = reinterpret_cast< CustomAnalysisInput* >(object);
  (void)_this;
}
void CustomAnalysisInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CustomAnalysisInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomAnalysisInput& CustomAnalysisInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CustomAnalysisInput_spice_2eproto.base);
  return *internal_default_instance();
}


void CustomAnalysisInput::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.CustomAnalysisInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ctrls_.Clear();
  analysis_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cmd_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomAnalysisInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string analysis_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_analysis_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.CustomAnalysisInput.analysis_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cmd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cmd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.CustomAnalysisInput.cmd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vlsir.spice.Control ctrls = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ctrls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CustomAnalysisInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.CustomAnalysisInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_analysis_name().data(), static_cast<int>(this->_internal_analysis_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.CustomAnalysisInput.analysis_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_analysis_name(), target);
  }

  // string cmd = 2;
  if (this->cmd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cmd().data(), static_cast<int>(this->_internal_cmd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.CustomAnalysisInput.cmd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cmd(), target);
  }

  // repeated .vlsir.spice.Control ctrls = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ctrls_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_ctrls(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.CustomAnalysisInput)
  return target;
}

size_t CustomAnalysisInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.CustomAnalysisInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.spice.Control ctrls = 5;
  total_size += 1UL * this->_internal_ctrls_size();
  for (const auto& msg : this->ctrls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string analysis_name = 1;
  if (this->analysis_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_analysis_name());
  }

  // string cmd = 2;
  if (this->cmd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomAnalysisInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.CustomAnalysisInput)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomAnalysisInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CustomAnalysisInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.CustomAnalysisInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.CustomAnalysisInput)
    MergeFrom(*source);
  }
}

void CustomAnalysisInput::MergeFrom(const CustomAnalysisInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.CustomAnalysisInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ctrls_.MergeFrom(from.ctrls_);
  if (from.analysis_name().size() > 0) {
    _internal_set_analysis_name(from._internal_analysis_name());
  }
  if (from.cmd().size() > 0) {
    _internal_set_cmd(from._internal_cmd());
  }
}

void CustomAnalysisInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.CustomAnalysisInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomAnalysisInput::CopyFrom(const CustomAnalysisInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.CustomAnalysisInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomAnalysisInput::IsInitialized() const {
  return true;
}

void CustomAnalysisInput::InternalSwap(CustomAnalysisInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ctrls_.InternalSwap(&other->ctrls_);
  analysis_name_.Swap(&other->analysis_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cmd_.Swap(&other->cmd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomAnalysisInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CustomAnalysisResult::InitAsDefaultInstance() {
}
class CustomAnalysisResult::_Internal {
 public:
};

CustomAnalysisResult::CustomAnalysisResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.CustomAnalysisResult)
}
CustomAnalysisResult::CustomAnalysisResult(const CustomAnalysisResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.CustomAnalysisResult)
}

void CustomAnalysisResult::SharedCtor() {
}

CustomAnalysisResult::~CustomAnalysisResult() {
  // @@protoc_insertion_point(destructor:vlsir.spice.CustomAnalysisResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CustomAnalysisResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CustomAnalysisResult::ArenaDtor(void* object) {
  CustomAnalysisResult* _this = reinterpret_cast< CustomAnalysisResult* >(object);
  (void)_this;
}
void CustomAnalysisResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CustomAnalysisResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomAnalysisResult& CustomAnalysisResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CustomAnalysisResult_spice_2eproto.base);
  return *internal_default_instance();
}


void CustomAnalysisResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.CustomAnalysisResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomAnalysisResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CustomAnalysisResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.CustomAnalysisResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.CustomAnalysisResult)
  return target;
}

size_t CustomAnalysisResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.CustomAnalysisResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomAnalysisResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.CustomAnalysisResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomAnalysisResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CustomAnalysisResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.CustomAnalysisResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.CustomAnalysisResult)
    MergeFrom(*source);
  }
}

void CustomAnalysisResult::MergeFrom(const CustomAnalysisResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.CustomAnalysisResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CustomAnalysisResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.CustomAnalysisResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomAnalysisResult::CopyFrom(const CustomAnalysisResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.CustomAnalysisResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomAnalysisResult::IsInitialized() const {
  return true;
}

void CustomAnalysisResult::InternalSwap(CustomAnalysisResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomAnalysisResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Sweep::InitAsDefaultInstance() {
  ::vlsir::spice::_Sweep_default_instance_.linear_ = const_cast< ::vlsir::spice::LinearSweep*>(
      ::vlsir::spice::LinearSweep::internal_default_instance());
  ::vlsir::spice::_Sweep_default_instance_.log_ = const_cast< ::vlsir::spice::LogSweep*>(
      ::vlsir::spice::LogSweep::internal_default_instance());
  ::vlsir::spice::_Sweep_default_instance_.points_ = const_cast< ::vlsir::spice::PointSweep*>(
      ::vlsir::spice::PointSweep::internal_default_instance());
}
class Sweep::_Internal {
 public:
  static const ::vlsir::spice::LinearSweep& linear(const Sweep* msg);
  static const ::vlsir::spice::LogSweep& log(const Sweep* msg);
  static const ::vlsir::spice::PointSweep& points(const Sweep* msg);
};

const ::vlsir::spice::LinearSweep&
Sweep::_Internal::linear(const Sweep* msg) {
  return *msg->tp_.linear_;
}
const ::vlsir::spice::LogSweep&
Sweep::_Internal::log(const Sweep* msg) {
  return *msg->tp_.log_;
}
const ::vlsir::spice::PointSweep&
Sweep::_Internal::points(const Sweep* msg) {
  return *msg->tp_.points_;
}
void Sweep::set_allocated_linear(::vlsir::spice::LinearSweep* linear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_tp();
  if (linear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(linear);
    if (message_arena != submessage_arena) {
      linear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear, submessage_arena);
    }
    set_has_linear();
    tp_.linear_ = linear;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Sweep.linear)
}
void Sweep::set_allocated_log(::vlsir::spice::LogSweep* log) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_tp();
  if (log) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(log);
    if (message_arena != submessage_arena) {
      log = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    set_has_log();
    tp_.log_ = log;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Sweep.log)
}
void Sweep::set_allocated_points(::vlsir::spice::PointSweep* points) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_tp();
  if (points) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(points);
    if (message_arena != submessage_arena) {
      points = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, points, submessage_arena);
    }
    set_has_points();
    tp_.points_ = points;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Sweep.points)
}
Sweep::Sweep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.Sweep)
}
Sweep::Sweep(const Sweep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_tp();
  switch (from.tp_case()) {
    case kLinear: {
      _internal_mutable_linear()->::vlsir::spice::LinearSweep::MergeFrom(from._internal_linear());
      break;
    }
    case kLog: {
      _internal_mutable_log()->::vlsir::spice::LogSweep::MergeFrom(from._internal_log());
      break;
    }
    case kPoints: {
      _internal_mutable_points()->::vlsir::spice::PointSweep::MergeFrom(from._internal_points());
      break;
    }
    case TP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.Sweep)
}

void Sweep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Sweep_spice_2eproto.base);
  clear_has_tp();
}

Sweep::~Sweep() {
  // @@protoc_insertion_point(destructor:vlsir.spice.Sweep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Sweep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_tp()) {
    clear_tp();
  }
}

void Sweep::ArenaDtor(void* object) {
  Sweep* _this = reinterpret_cast< Sweep* >(object);
  (void)_this;
}
void Sweep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Sweep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sweep& Sweep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sweep_spice_2eproto.base);
  return *internal_default_instance();
}


void Sweep::clear_tp() {
// @@protoc_insertion_point(one_of_clear_start:vlsir.spice.Sweep)
  switch (tp_case()) {
    case kLinear: {
      if (GetArena() == nullptr) {
        delete tp_.linear_;
      }
      break;
    }
    case kLog: {
      if (GetArena() == nullptr) {
        delete tp_.log_;
      }
      break;
    }
    case kPoints: {
      if (GetArena() == nullptr) {
        delete tp_.points_;
      }
      break;
    }
    case TP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TP_NOT_SET;
}


void Sweep::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.Sweep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_tp();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sweep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vlsir.spice.LinearSweep linear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vlsir.spice.LogSweep log = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_log(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vlsir.spice.PointSweep points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_points(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sweep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.Sweep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vlsir.spice.LinearSweep linear = 1;
  if (_internal_has_linear()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linear(this), target, stream);
  }

  // .vlsir.spice.LogSweep log = 2;
  if (_internal_has_log()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::log(this), target, stream);
  }

  // .vlsir.spice.PointSweep points = 3;
  if (_internal_has_points()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::points(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.Sweep)
  return target;
}

size_t Sweep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.Sweep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (tp_case()) {
    // .vlsir.spice.LinearSweep linear = 1;
    case kLinear: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tp_.linear_);
      break;
    }
    // .vlsir.spice.LogSweep log = 2;
    case kLog: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tp_.log_);
      break;
    }
    // .vlsir.spice.PointSweep points = 3;
    case kPoints: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tp_.points_);
      break;
    }
    case TP_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sweep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.Sweep)
  GOOGLE_DCHECK_NE(&from, this);
  const Sweep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sweep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.Sweep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.Sweep)
    MergeFrom(*source);
  }
}

void Sweep::MergeFrom(const Sweep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.Sweep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.tp_case()) {
    case kLinear: {
      _internal_mutable_linear()->::vlsir::spice::LinearSweep::MergeFrom(from._internal_linear());
      break;
    }
    case kLog: {
      _internal_mutable_log()->::vlsir::spice::LogSweep::MergeFrom(from._internal_log());
      break;
    }
    case kPoints: {
      _internal_mutable_points()->::vlsir::spice::PointSweep::MergeFrom(from._internal_points());
      break;
    }
    case TP_NOT_SET: {
      break;
    }
  }
}

void Sweep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.Sweep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sweep::CopyFrom(const Sweep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.Sweep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sweep::IsInitialized() const {
  return true;
}

void Sweep::InternalSwap(Sweep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(tp_, other->tp_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sweep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LinearSweep::InitAsDefaultInstance() {
}
class LinearSweep::_Internal {
 public:
};

LinearSweep::LinearSweep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.LinearSweep)
}
LinearSweep::LinearSweep(const LinearSweep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&start_)) + sizeof(step_));
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.LinearSweep)
}

void LinearSweep::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&start_)) + sizeof(step_));
}

LinearSweep::~LinearSweep() {
  // @@protoc_insertion_point(destructor:vlsir.spice.LinearSweep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinearSweep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LinearSweep::ArenaDtor(void* object) {
  LinearSweep* _this = reinterpret_cast< LinearSweep* >(object);
  (void)_this;
}
void LinearSweep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinearSweep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinearSweep& LinearSweep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinearSweep_spice_2eproto.base);
  return *internal_default_instance();
}


void LinearSweep::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.LinearSweep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&start_)) + sizeof(step_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinearSweep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double stop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          stop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double step = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinearSweep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.LinearSweep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double start = 1;
  if (!(this->start() <= 0 && this->start() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_start(), target);
  }

  // double stop = 2;
  if (!(this->stop() <= 0 && this->stop() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_stop(), target);
  }

  // double step = 3;
  if (!(this->step() <= 0 && this->step() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_step(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.LinearSweep)
  return target;
}

size_t LinearSweep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.LinearSweep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double start = 1;
  if (!(this->start() <= 0 && this->start() >= 0)) {
    total_size += 1 + 8;
  }

  // double stop = 2;
  if (!(this->stop() <= 0 && this->stop() >= 0)) {
    total_size += 1 + 8;
  }

  // double step = 3;
  if (!(this->step() <= 0 && this->step() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinearSweep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.LinearSweep)
  GOOGLE_DCHECK_NE(&from, this);
  const LinearSweep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinearSweep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.LinearSweep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.LinearSweep)
    MergeFrom(*source);
  }
}

void LinearSweep::MergeFrom(const LinearSweep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.LinearSweep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.start() <= 0 && from.start() >= 0)) {
    _internal_set_start(from._internal_start());
  }
  if (!(from.stop() <= 0 && from.stop() >= 0)) {
    _internal_set_stop(from._internal_stop());
  }
  if (!(from.step() <= 0 && from.step() >= 0)) {
    _internal_set_step(from._internal_step());
  }
}

void LinearSweep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.LinearSweep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearSweep::CopyFrom(const LinearSweep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.LinearSweep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearSweep::IsInitialized() const {
  return true;
}

void LinearSweep::InternalSwap(LinearSweep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinearSweep, step_)
      + sizeof(LinearSweep::step_)
      - PROTOBUF_FIELD_OFFSET(LinearSweep, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinearSweep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogSweep::InitAsDefaultInstance() {
}
class LogSweep::_Internal {
 public:
};

LogSweep::LogSweep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.LogSweep)
}
LogSweep::LogSweep(const LogSweep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&npts_) -
    reinterpret_cast<char*>(&start_)) + sizeof(npts_));
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.LogSweep)
}

void LogSweep::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&npts_) -
      reinterpret_cast<char*>(&start_)) + sizeof(npts_));
}

LogSweep::~LogSweep() {
  // @@protoc_insertion_point(destructor:vlsir.spice.LogSweep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogSweep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LogSweep::ArenaDtor(void* object) {
  LogSweep* _this = reinterpret_cast< LogSweep* >(object);
  (void)_this;
}
void LogSweep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogSweep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogSweep& LogSweep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogSweep_spice_2eproto.base);
  return *internal_default_instance();
}


void LogSweep::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.LogSweep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&npts_) -
      reinterpret_cast<char*>(&start_)) + sizeof(npts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogSweep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double stop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          stop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double npts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          npts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogSweep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.LogSweep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double start = 1;
  if (!(this->start() <= 0 && this->start() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_start(), target);
  }

  // double stop = 2;
  if (!(this->stop() <= 0 && this->stop() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_stop(), target);
  }

  // double npts = 3;
  if (!(this->npts() <= 0 && this->npts() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_npts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.LogSweep)
  return target;
}

size_t LogSweep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.LogSweep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double start = 1;
  if (!(this->start() <= 0 && this->start() >= 0)) {
    total_size += 1 + 8;
  }

  // double stop = 2;
  if (!(this->stop() <= 0 && this->stop() >= 0)) {
    total_size += 1 + 8;
  }

  // double npts = 3;
  if (!(this->npts() <= 0 && this->npts() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogSweep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.LogSweep)
  GOOGLE_DCHECK_NE(&from, this);
  const LogSweep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogSweep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.LogSweep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.LogSweep)
    MergeFrom(*source);
  }
}

void LogSweep::MergeFrom(const LogSweep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.LogSweep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.start() <= 0 && from.start() >= 0)) {
    _internal_set_start(from._internal_start());
  }
  if (!(from.stop() <= 0 && from.stop() >= 0)) {
    _internal_set_stop(from._internal_stop());
  }
  if (!(from.npts() <= 0 && from.npts() >= 0)) {
    _internal_set_npts(from._internal_npts());
  }
}

void LogSweep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.LogSweep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogSweep::CopyFrom(const LogSweep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.LogSweep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogSweep::IsInitialized() const {
  return true;
}

void LogSweep::InternalSwap(LogSweep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogSweep, npts_)
      + sizeof(LogSweep::npts_)
      - PROTOBUF_FIELD_OFFSET(LogSweep, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogSweep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PointSweep::InitAsDefaultInstance() {
}
class PointSweep::_Internal {
 public:
};

PointSweep::PointSweep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.PointSweep)
}
PointSweep::PointSweep(const PointSweep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&stop_, &from.stop_,
    static_cast<size_t>(reinterpret_cast<char*>(&npts_) -
    reinterpret_cast<char*>(&stop_)) + sizeof(npts_));
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.PointSweep)
}

void PointSweep::SharedCtor() {
  ::memset(&stop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&npts_) -
      reinterpret_cast<char*>(&stop_)) + sizeof(npts_));
}

PointSweep::~PointSweep() {
  // @@protoc_insertion_point(destructor:vlsir.spice.PointSweep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PointSweep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PointSweep::ArenaDtor(void* object) {
  PointSweep* _this = reinterpret_cast< PointSweep* >(object);
  (void)_this;
}
void PointSweep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PointSweep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointSweep& PointSweep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PointSweep_spice_2eproto.base);
  return *internal_default_instance();
}


void PointSweep::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.PointSweep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  ::memset(&stop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&npts_) -
      reinterpret_cast<char*>(&stop_)) + sizeof(npts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointSweep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_points(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_points(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double stop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          stop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double npts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          npts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointSweep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.PointSweep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double points = 1;
  if (this->_internal_points_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_points(), target);
  }

  // double stop = 2;
  if (!(this->stop() <= 0 && this->stop() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_stop(), target);
  }

  // double npts = 3;
  if (!(this->npts() <= 0 && this->npts() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_npts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.PointSweep)
  return target;
}

size_t PointSweep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.PointSweep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_points_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _points_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // double stop = 2;
  if (!(this->stop() <= 0 && this->stop() >= 0)) {
    total_size += 1 + 8;
  }

  // double npts = 3;
  if (!(this->npts() <= 0 && this->npts() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointSweep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.PointSweep)
  GOOGLE_DCHECK_NE(&from, this);
  const PointSweep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointSweep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.PointSweep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.PointSweep)
    MergeFrom(*source);
  }
}

void PointSweep::MergeFrom(const PointSweep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.PointSweep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (!(from.stop() <= 0 && from.stop() >= 0)) {
    _internal_set_stop(from._internal_stop());
  }
  if (!(from.npts() <= 0 && from.npts() >= 0)) {
    _internal_set_npts(from._internal_npts());
  }
}

void PointSweep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.PointSweep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointSweep::CopyFrom(const PointSweep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.PointSweep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointSweep::IsInitialized() const {
  return true;
}

void PointSweep::InternalSwap(PointSweep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PointSweep, npts_)
      + sizeof(PointSweep::npts_)
      - PROTOBUF_FIELD_OFFSET(PointSweep, stop_)>(
          reinterpret_cast<char*>(&stop_),
          reinterpret_cast<char*>(&other->stop_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PointSweep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Control::InitAsDefaultInstance() {
  ::vlsir::spice::_Control_default_instance_.include_ = const_cast< ::vlsir::spice::Include*>(
      ::vlsir::spice::Include::internal_default_instance());
  ::vlsir::spice::_Control_default_instance_.lib_ = const_cast< ::vlsir::spice::LibInclude*>(
      ::vlsir::spice::LibInclude::internal_default_instance());
  ::vlsir::spice::_Control_default_instance_.save_ = const_cast< ::vlsir::spice::Save*>(
      ::vlsir::spice::Save::internal_default_instance());
  ::vlsir::spice::_Control_default_instance_.meas_ = const_cast< ::vlsir::spice::Meas*>(
      ::vlsir::spice::Meas::internal_default_instance());
  ::vlsir::spice::_Control_default_instance_.literal_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class Control::_Internal {
 public:
  static const ::vlsir::spice::Include& include(const Control* msg);
  static const ::vlsir::spice::LibInclude& lib(const Control* msg);
  static const ::vlsir::spice::Save& save(const Control* msg);
  static const ::vlsir::spice::Meas& meas(const Control* msg);
};

const ::vlsir::spice::Include&
Control::_Internal::include(const Control* msg) {
  return *msg->ctrl_.include_;
}
const ::vlsir::spice::LibInclude&
Control::_Internal::lib(const Control* msg) {
  return *msg->ctrl_.lib_;
}
const ::vlsir::spice::Save&
Control::_Internal::save(const Control* msg) {
  return *msg->ctrl_.save_;
}
const ::vlsir::spice::Meas&
Control::_Internal::meas(const Control* msg) {
  return *msg->ctrl_.meas_;
}
void Control::set_allocated_include(::vlsir::spice::Include* include) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ctrl();
  if (include) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(include);
    if (message_arena != submessage_arena) {
      include = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, include, submessage_arena);
    }
    set_has_include();
    ctrl_.include_ = include;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Control.include)
}
void Control::set_allocated_lib(::vlsir::spice::LibInclude* lib) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ctrl();
  if (lib) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lib);
    if (message_arena != submessage_arena) {
      lib = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lib, submessage_arena);
    }
    set_has_lib();
    ctrl_.lib_ = lib;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Control.lib)
}
void Control::set_allocated_save(::vlsir::spice::Save* save) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ctrl();
  if (save) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(save);
    if (message_arena != submessage_arena) {
      save = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, save, submessage_arena);
    }
    set_has_save();
    ctrl_.save_ = save;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Control.save)
}
void Control::set_allocated_meas(::vlsir::spice::Meas* meas) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ctrl();
  if (meas) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(meas);
    if (message_arena != submessage_arena) {
      meas = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meas, submessage_arena);
    }
    set_has_meas();
    ctrl_.meas_ = meas;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.spice.Control.meas)
}
Control::Control(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.Control)
}
Control::Control(const Control& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_ctrl();
  switch (from.ctrl_case()) {
    case kInclude: {
      _internal_mutable_include()->::vlsir::spice::Include::MergeFrom(from._internal_include());
      break;
    }
    case kLib: {
      _internal_mutable_lib()->::vlsir::spice::LibInclude::MergeFrom(from._internal_lib());
      break;
    }
    case kSave: {
      _internal_mutable_save()->::vlsir::spice::Save::MergeFrom(from._internal_save());
      break;
    }
    case kMeas: {
      _internal_mutable_meas()->::vlsir::spice::Meas::MergeFrom(from._internal_meas());
      break;
    }
    case kLiteral: {
      _internal_set_literal(from._internal_literal());
      break;
    }
    case CTRL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.Control)
}

void Control::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Control_spice_2eproto.base);
  clear_has_ctrl();
}

Control::~Control() {
  // @@protoc_insertion_point(destructor:vlsir.spice.Control)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Control::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_ctrl()) {
    clear_ctrl();
  }
}

void Control::ArenaDtor(void* object) {
  Control* _this = reinterpret_cast< Control* >(object);
  (void)_this;
}
void Control::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Control::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Control& Control::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Control_spice_2eproto.base);
  return *internal_default_instance();
}


void Control::clear_ctrl() {
// @@protoc_insertion_point(one_of_clear_start:vlsir.spice.Control)
  switch (ctrl_case()) {
    case kInclude: {
      if (GetArena() == nullptr) {
        delete ctrl_.include_;
      }
      break;
    }
    case kLib: {
      if (GetArena() == nullptr) {
        delete ctrl_.lib_;
      }
      break;
    }
    case kSave: {
      if (GetArena() == nullptr) {
        delete ctrl_.save_;
      }
      break;
    }
    case kMeas: {
      if (GetArena() == nullptr) {
        delete ctrl_.meas_;
      }
      break;
    }
    case kLiteral: {
      ctrl_.literal_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case CTRL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CTRL_NOT_SET;
}


void Control::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.Control)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ctrl();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Control::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vlsir.spice.Include include = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_include(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vlsir.spice.LibInclude lib = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lib(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vlsir.spice.Save save = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_save(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vlsir.spice.Meas meas = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_meas(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string literal = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_literal();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.Control.literal"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Control::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.Control)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vlsir.spice.Include include = 1;
  if (_internal_has_include()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::include(this), target, stream);
  }

  // .vlsir.spice.LibInclude lib = 2;
  if (_internal_has_lib()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lib(this), target, stream);
  }

  // .vlsir.spice.Save save = 5;
  if (_internal_has_save()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::save(this), target, stream);
  }

  // .vlsir.spice.Meas meas = 6;
  if (_internal_has_meas()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::meas(this), target, stream);
  }

  // string literal = 10;
  if (_internal_has_literal()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_literal().data(), static_cast<int>(this->_internal_literal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.Control.literal");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_literal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.Control)
  return target;
}

size_t Control::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.Control)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (ctrl_case()) {
    // .vlsir.spice.Include include = 1;
    case kInclude: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ctrl_.include_);
      break;
    }
    // .vlsir.spice.LibInclude lib = 2;
    case kLib: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ctrl_.lib_);
      break;
    }
    // .vlsir.spice.Save save = 5;
    case kSave: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ctrl_.save_);
      break;
    }
    // .vlsir.spice.Meas meas = 6;
    case kMeas: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ctrl_.meas_);
      break;
    }
    // string literal = 10;
    case kLiteral: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_literal());
      break;
    }
    case CTRL_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Control::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.Control)
  GOOGLE_DCHECK_NE(&from, this);
  const Control* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Control>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.Control)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.Control)
    MergeFrom(*source);
  }
}

void Control::MergeFrom(const Control& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.Control)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ctrl_case()) {
    case kInclude: {
      _internal_mutable_include()->::vlsir::spice::Include::MergeFrom(from._internal_include());
      break;
    }
    case kLib: {
      _internal_mutable_lib()->::vlsir::spice::LibInclude::MergeFrom(from._internal_lib());
      break;
    }
    case kSave: {
      _internal_mutable_save()->::vlsir::spice::Save::MergeFrom(from._internal_save());
      break;
    }
    case kMeas: {
      _internal_mutable_meas()->::vlsir::spice::Meas::MergeFrom(from._internal_meas());
      break;
    }
    case kLiteral: {
      _internal_set_literal(from._internal_literal());
      break;
    }
    case CTRL_NOT_SET: {
      break;
    }
  }
}

void Control::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control::CopyFrom(const Control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control::IsInitialized() const {
  return true;
}

void Control::InternalSwap(Control* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ctrl_, other->ctrl_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Control::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Save::InitAsDefaultInstance() {
  ::vlsir::spice::_Save_default_instance_.mode_ = 0;
  ::vlsir::spice::_Save_default_instance_.signal_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class Save::_Internal {
 public:
};

Save::Save(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.Save)
}
Save::Save(const Save& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_save();
  switch (from.save_case()) {
    case kMode: {
      _internal_set_mode(from._internal_mode());
      break;
    }
    case kSignal: {
      _internal_set_signal(from._internal_signal());
      break;
    }
    case SAVE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.Save)
}

void Save::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Save_spice_2eproto.base);
  clear_has_save();
}

Save::~Save() {
  // @@protoc_insertion_point(destructor:vlsir.spice.Save)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Save::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_save()) {
    clear_save();
  }
}

void Save::ArenaDtor(void* object) {
  Save* _this = reinterpret_cast< Save* >(object);
  (void)_this;
}
void Save::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Save::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Save& Save::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Save_spice_2eproto.base);
  return *internal_default_instance();
}


void Save::clear_save() {
// @@protoc_insertion_point(one_of_clear_start:vlsir.spice.Save)
  switch (save_case()) {
    case kMode: {
      // No need to clear
      break;
    }
    case kSignal: {
      save_.signal_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case SAVE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SAVE_NOT_SET;
}


void Save::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.Save)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_save();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Save::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vlsir.spice.Save.SaveMode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::vlsir::spice::Save_SaveMode>(val));
        } else goto handle_unusual;
        continue;
      // string signal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signal();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.Save.signal"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Save::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.Save)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vlsir.spice.Save.SaveMode mode = 1;
  if (_internal_has_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // string signal = 2;
  if (_internal_has_signal()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signal().data(), static_cast<int>(this->_internal_signal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.Save.signal");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_signal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.Save)
  return target;
}

size_t Save::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.Save)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (save_case()) {
    // .vlsir.spice.Save.SaveMode mode = 1;
    case kMode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
      break;
    }
    // string signal = 2;
    case kSignal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_signal());
      break;
    }
    case SAVE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Save::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.Save)
  GOOGLE_DCHECK_NE(&from, this);
  const Save* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Save>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.Save)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.Save)
    MergeFrom(*source);
  }
}

void Save::MergeFrom(const Save& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.Save)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.save_case()) {
    case kMode: {
      _internal_set_mode(from._internal_mode());
      break;
    }
    case kSignal: {
      _internal_set_signal(from._internal_signal());
      break;
    }
    case SAVE_NOT_SET: {
      break;
    }
  }
}

void Save::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.Save)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Save::CopyFrom(const Save& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.Save)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Save::IsInitialized() const {
  return true;
}

void Save::InternalSwap(Save* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(save_, other->save_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Save::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Include::InitAsDefaultInstance() {
}
class Include::_Internal {
 public:
};

Include::Include(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.Include)
}
Include::Include(const Include& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.Include)
}

void Include::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Include_spice_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Include::~Include() {
  // @@protoc_insertion_point(destructor:vlsir.spice.Include)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Include::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Include::ArenaDtor(void* object) {
  Include* _this = reinterpret_cast< Include* >(object);
  (void)_this;
}
void Include::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Include::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Include& Include::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Include_spice_2eproto.base);
  return *internal_default_instance();
}


void Include::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.Include)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Include::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.Include.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Include::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.Include)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.Include.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.Include)
  return target;
}

size_t Include::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.Include)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Include::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.Include)
  GOOGLE_DCHECK_NE(&from, this);
  const Include* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Include>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.Include)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.Include)
    MergeFrom(*source);
  }
}

void Include::MergeFrom(const Include& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.Include)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
}

void Include::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.Include)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Include::CopyFrom(const Include& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.Include)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Include::IsInitialized() const {
  return true;
}

void Include::InternalSwap(Include* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Include::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LibInclude::InitAsDefaultInstance() {
}
class LibInclude::_Internal {
 public:
};

LibInclude::LibInclude(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.LibInclude)
}
LibInclude::LibInclude(const LibInclude& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  section_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_section().empty()) {
    section_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_section(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.LibInclude)
}

void LibInclude::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LibInclude_spice_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  section_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LibInclude::~LibInclude() {
  // @@protoc_insertion_point(destructor:vlsir.spice.LibInclude)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LibInclude::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  section_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LibInclude::ArenaDtor(void* object) {
  LibInclude* _this = reinterpret_cast< LibInclude* >(object);
  (void)_this;
}
void LibInclude::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LibInclude::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LibInclude& LibInclude::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LibInclude_spice_2eproto.base);
  return *internal_default_instance();
}


void LibInclude::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.LibInclude)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  section_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LibInclude::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.LibInclude.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string section = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_section();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.LibInclude.section"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LibInclude::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.LibInclude)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.LibInclude.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // string section = 2;
  if (this->section().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_section().data(), static_cast<int>(this->_internal_section().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.LibInclude.section");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_section(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.LibInclude)
  return target;
}

size_t LibInclude::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.LibInclude)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string section = 2;
  if (this->section().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_section());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LibInclude::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.LibInclude)
  GOOGLE_DCHECK_NE(&from, this);
  const LibInclude* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LibInclude>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.LibInclude)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.LibInclude)
    MergeFrom(*source);
  }
}

void LibInclude::MergeFrom(const LibInclude& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.LibInclude)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.section().size() > 0) {
    _internal_set_section(from._internal_section());
  }
}

void LibInclude::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.LibInclude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LibInclude::CopyFrom(const LibInclude& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.LibInclude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LibInclude::IsInitialized() const {
  return true;
}

void LibInclude::InternalSwap(LibInclude* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  section_.Swap(&other->section_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LibInclude::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Meas::InitAsDefaultInstance() {
}
class Meas::_Internal {
 public:
};

Meas::Meas(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.Meas)
}
Meas::Meas(const Meas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  expr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_expr().empty()) {
    expr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_expr(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.Meas)
}

void Meas::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Meas_spice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Meas::~Meas() {
  // @@protoc_insertion_point(destructor:vlsir.spice.Meas)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Meas::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Meas::ArenaDtor(void* object) {
  Meas* _this = reinterpret_cast< Meas* >(object);
  (void)_this;
}
void Meas::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Meas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Meas& Meas::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Meas_spice_2eproto.base);
  return *internal_default_instance();
}


void Meas::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.Meas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  expr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Meas::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.Meas.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string expr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_expr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.Meas.expr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Meas::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.Meas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.Meas.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string expr = 2;
  if (this->expr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expr().data(), static_cast<int>(this->_internal_expr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.Meas.expr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_expr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.Meas)
  return target;
}

size_t Meas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.Meas)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string expr = 2;
  if (this->expr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Meas::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.Meas)
  GOOGLE_DCHECK_NE(&from, this);
  const Meas* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Meas>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.Meas)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.Meas)
    MergeFrom(*source);
  }
}

void Meas::MergeFrom(const Meas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.Meas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.expr().size() > 0) {
    _internal_set_expr(from._internal_expr());
  }
}

void Meas::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.Meas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Meas::CopyFrom(const Meas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.Meas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Meas::IsInitialized() const {
  return true;
}

void Meas::InternalSwap(Meas* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  expr_.Swap(&other->expr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Meas::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Signal::InitAsDefaultInstance() {
}
class Signal::_Internal {
 public:
};

Signal::Signal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlsir.spice.Signal)
}
Signal::Signal(const Signal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  quantity_ = from.quantity_;
  // @@protoc_insertion_point(copy_constructor:vlsir.spice.Signal)
}

void Signal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Signal_spice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quantity_ = 0;
}

Signal::~Signal() {
  // @@protoc_insertion_point(destructor:vlsir.spice.Signal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Signal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Signal::ArenaDtor(void* object) {
  Signal* _this = reinterpret_cast< Signal* >(object);
  (void)_this;
}
void Signal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Signal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Signal& Signal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Signal_spice_2eproto.base);
  return *internal_default_instance();
}


void Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.spice.Signal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  quantity_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Signal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.spice.Signal.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vlsir.spice.Signal.Quantity quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_quantity(static_cast<::vlsir::spice::Signal_Quantity>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Signal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.spice.Signal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.spice.Signal.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .vlsir.spice.Signal.Quantity quantity = 2;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.spice.Signal)
  return target;
}

size_t Signal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.spice.Signal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .vlsir.spice.Signal.Quantity quantity = 2;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_quantity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlsir.spice.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Signal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlsir.spice.Signal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlsir.spice.Signal)
    MergeFrom(*source);
  }
}

void Signal::MergeFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.spice.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
}

void Signal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlsir.spice.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal::CopyFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.spice.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {
  return true;
}

void Signal::InternalSwap(Signal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(quantity_, other->quantity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Signal::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace spice
}  // namespace vlsir
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vlsir::spice::SimInput* Arena::CreateMaybeMessage< ::vlsir::spice::SimInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::SimInput >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::SimResult* Arena::CreateMaybeMessage< ::vlsir::spice::SimResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::SimResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::SimOptions* Arena::CreateMaybeMessage< ::vlsir::spice::SimOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::SimOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::Analysis* Arena::CreateMaybeMessage< ::vlsir::spice::Analysis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::Analysis >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::AnalysisResult* Arena::CreateMaybeMessage< ::vlsir::spice::AnalysisResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::AnalysisResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::OpInput* Arena::CreateMaybeMessage< ::vlsir::spice::OpInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::OpInput >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::OpResult* Arena::CreateMaybeMessage< ::vlsir::spice::OpResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::OpResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::DcInput* Arena::CreateMaybeMessage< ::vlsir::spice::DcInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::DcInput >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::DcResult_MeasurementsEntry_DoNotUse* Arena::CreateMaybeMessage< ::vlsir::spice::DcResult_MeasurementsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::DcResult_MeasurementsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::DcResult* Arena::CreateMaybeMessage< ::vlsir::spice::DcResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::DcResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::TranInput_IcEntry_DoNotUse* Arena::CreateMaybeMessage< ::vlsir::spice::TranInput_IcEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::TranInput_IcEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::TranInput* Arena::CreateMaybeMessage< ::vlsir::spice::TranInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::TranInput >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::TranResult_MeasurementsEntry_DoNotUse* Arena::CreateMaybeMessage< ::vlsir::spice::TranResult_MeasurementsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::TranResult_MeasurementsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::TranResult* Arena::CreateMaybeMessage< ::vlsir::spice::TranResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::TranResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::ComplexNum* Arena::CreateMaybeMessage< ::vlsir::spice::ComplexNum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::ComplexNum >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::AcInput* Arena::CreateMaybeMessage< ::vlsir::spice::AcInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::AcInput >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::AcResult_MeasurementsEntry_DoNotUse* Arena::CreateMaybeMessage< ::vlsir::spice::AcResult_MeasurementsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::AcResult_MeasurementsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::AcResult* Arena::CreateMaybeMessage< ::vlsir::spice::AcResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::AcResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::SweepInput* Arena::CreateMaybeMessage< ::vlsir::spice::SweepInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::SweepInput >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::SweepResult* Arena::CreateMaybeMessage< ::vlsir::spice::SweepResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::SweepResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::MonteInput* Arena::CreateMaybeMessage< ::vlsir::spice::MonteInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::MonteInput >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::MonteResult* Arena::CreateMaybeMessage< ::vlsir::spice::MonteResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::MonteResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::CustomAnalysisInput* Arena::CreateMaybeMessage< ::vlsir::spice::CustomAnalysisInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::CustomAnalysisInput >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::CustomAnalysisResult* Arena::CreateMaybeMessage< ::vlsir::spice::CustomAnalysisResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::CustomAnalysisResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::Sweep* Arena::CreateMaybeMessage< ::vlsir::spice::Sweep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::Sweep >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::LinearSweep* Arena::CreateMaybeMessage< ::vlsir::spice::LinearSweep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::LinearSweep >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::LogSweep* Arena::CreateMaybeMessage< ::vlsir::spice::LogSweep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::LogSweep >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::PointSweep* Arena::CreateMaybeMessage< ::vlsir::spice::PointSweep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::PointSweep >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::Control* Arena::CreateMaybeMessage< ::vlsir::spice::Control >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::Control >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::Save* Arena::CreateMaybeMessage< ::vlsir::spice::Save >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::Save >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::Include* Arena::CreateMaybeMessage< ::vlsir::spice::Include >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::Include >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::LibInclude* Arena::CreateMaybeMessage< ::vlsir::spice::LibInclude >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::LibInclude >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::Meas* Arena::CreateMaybeMessage< ::vlsir::spice::Meas >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::Meas >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::spice::Signal* Arena::CreateMaybeMessage< ::vlsir::spice::Signal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::spice::Signal >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
