// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: layout/raw.proto

#include "layout/raw.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace vlsir {
namespace raw {
constexpr Point::Point(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(int64_t{0})
  , y_(int64_t{0}){}
struct PointDefaultTypeInternal {
  constexpr PointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PointDefaultTypeInternal _Point_default_instance_;
constexpr Layer::Layer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : number_(int64_t{0})
  , purpose_(int64_t{0}){}
struct LayerDefaultTypeInternal {
  constexpr LayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LayerDefaultTypeInternal() {}
  union {
    Layer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LayerDefaultTypeInternal _Layer_default_instance_;
constexpr Rectangle::Rectangle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : net_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lower_left_(nullptr)
  , width_(int64_t{0})
  , height_(int64_t{0}){}
struct RectangleDefaultTypeInternal {
  constexpr RectangleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RectangleDefaultTypeInternal() {}
  union {
    Rectangle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RectangleDefaultTypeInternal _Rectangle_default_instance_;
constexpr Polygon::Polygon(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vertices_()
  , net_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PolygonDefaultTypeInternal {
  constexpr PolygonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PolygonDefaultTypeInternal() {}
  union {
    Polygon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PolygonDefaultTypeInternal _Polygon_default_instance_;
constexpr Path::Path(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_()
  , net_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , width_(int64_t{0}){}
struct PathDefaultTypeInternal {
  constexpr PathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathDefaultTypeInternal() {}
  union {
    Path _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathDefaultTypeInternal _Path_default_instance_;
constexpr LayerShapes::LayerShapes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rectangles_()
  , polygons_()
  , paths_()
  , layer_(nullptr){}
struct LayerShapesDefaultTypeInternal {
  constexpr LayerShapesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LayerShapesDefaultTypeInternal() {}
  union {
    LayerShapes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LayerShapesDefaultTypeInternal _LayerShapes_default_instance_;
constexpr TextElement::TextElement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , loc_(nullptr){}
struct TextElementDefaultTypeInternal {
  constexpr TextElementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextElementDefaultTypeInternal() {}
  union {
    TextElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextElementDefaultTypeInternal _TextElement_default_instance_;
constexpr Instance::Instance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cell_(nullptr)
  , origin_location_(nullptr)
  , reflect_vert_(false)
  , rotation_clockwise_degrees_(0){}
struct InstanceDefaultTypeInternal {
  constexpr InstanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InstanceDefaultTypeInternal() {}
  union {
    Instance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InstanceDefaultTypeInternal _Instance_default_instance_;
constexpr Layout::Layout(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shapes_()
  , instances_()
  , annotations_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LayoutDefaultTypeInternal {
  constexpr LayoutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LayoutDefaultTypeInternal() {}
  union {
    Layout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LayoutDefaultTypeInternal _Layout_default_instance_;
constexpr Abstract::Abstract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ports_()
  , blockages_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , outline_(nullptr){}
struct AbstractDefaultTypeInternal {
  constexpr AbstractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AbstractDefaultTypeInternal() {}
  union {
    Abstract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AbstractDefaultTypeInternal _Abstract_default_instance_;
constexpr AbstractPort::AbstractPort(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shapes_()
  , net_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AbstractPortDefaultTypeInternal {
  constexpr AbstractPortDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AbstractPortDefaultTypeInternal() {}
  union {
    AbstractPort _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AbstractPortDefaultTypeInternal _AbstractPort_default_instance_;
constexpr Cell::Cell(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , interface_(nullptr)
  , module_(nullptr)
  , abstract_(nullptr)
  , layout_(nullptr){}
struct CellDefaultTypeInternal {
  constexpr CellDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellDefaultTypeInternal() {}
  union {
    Cell _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellDefaultTypeInternal _Cell_default_instance_;
constexpr Library::Library(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cells_()
  , domain_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , author_(nullptr)
  , units_(0)
{}
struct LibraryDefaultTypeInternal {
  constexpr LibraryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LibraryDefaultTypeInternal() {}
  union {
    Library _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LibraryDefaultTypeInternal _Library_default_instance_;
}  // namespace raw
}  // namespace vlsir
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_layout_2fraw_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_layout_2fraw_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_layout_2fraw_2eproto = nullptr;

const uint32_t TableStruct_layout_2fraw_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Point, x_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Point, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Layer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Layer, number_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Layer, purpose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Rectangle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Rectangle, net_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Rectangle, lower_left_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Rectangle, width_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Rectangle, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Polygon, net_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Polygon, vertices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Path, net_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Path, points_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Path, width_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::LayerShapes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::LayerShapes, layer_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::LayerShapes, rectangles_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::LayerShapes, polygons_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::LayerShapes, paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::TextElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::TextElement, string_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::TextElement, loc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Instance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Instance, name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Instance, cell_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Instance, origin_location_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Instance, reflect_vert_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Instance, rotation_clockwise_degrees_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Layout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Layout, name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Layout, shapes_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Layout, instances_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Layout, annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Abstract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Abstract, name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Abstract, outline_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Abstract, ports_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Abstract, blockages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::AbstractPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::AbstractPort, net_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::AbstractPort, shapes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Cell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Cell, name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Cell, interface_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Cell, module_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Cell, abstract_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Cell, layout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Library, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Library, domain_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Library, units_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Library, cells_),
  PROTOBUF_FIELD_OFFSET(::vlsir::raw::Library, author_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::vlsir::raw::Point)},
  { 8, -1, -1, sizeof(::vlsir::raw::Layer)},
  { 16, -1, -1, sizeof(::vlsir::raw::Rectangle)},
  { 26, -1, -1, sizeof(::vlsir::raw::Polygon)},
  { 34, -1, -1, sizeof(::vlsir::raw::Path)},
  { 43, -1, -1, sizeof(::vlsir::raw::LayerShapes)},
  { 53, -1, -1, sizeof(::vlsir::raw::TextElement)},
  { 61, -1, -1, sizeof(::vlsir::raw::Instance)},
  { 72, -1, -1, sizeof(::vlsir::raw::Layout)},
  { 82, -1, -1, sizeof(::vlsir::raw::Abstract)},
  { 92, -1, -1, sizeof(::vlsir::raw::AbstractPort)},
  { 100, -1, -1, sizeof(::vlsir::raw::Cell)},
  { 111, -1, -1, sizeof(::vlsir::raw::Library)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::raw::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::raw::_Layer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::raw::_Rectangle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::raw::_Polygon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::raw::_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::raw::_LayerShapes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::raw::_TextElement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::raw::_Instance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::raw::_Layout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::raw::_Abstract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::raw::_AbstractPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::raw::_Cell_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlsir::raw::_Library_default_instance_),
};

const char descriptor_table_protodef_layout_2fraw_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020layout/raw.proto\022\tvlsir.raw\032\013utils.pro"
  "to\032\rcircuit.proto\"\035\n\005Point\022\t\n\001x\030\001 \001(\003\022\t\n"
  "\001y\030\002 \001(\003\"(\n\005Layer\022\016\n\006number\030\001 \001(\003\022\017\n\007pur"
  "pose\030\002 \001(\003\"]\n\tRectangle\022\013\n\003net\030\001 \001(\t\022$\n\n"
  "lower_left\030\002 \001(\0132\020.vlsir.raw.Point\022\r\n\005wi"
  "dth\030\003 \001(\003\022\016\n\006height\030\004 \001(\003\":\n\007Polygon\022\013\n\003"
  "net\030\001 \001(\t\022\"\n\010vertices\030\002 \003(\0132\020.vlsir.raw."
  "Point\"D\n\004Path\022\013\n\003net\030\001 \001(\t\022 \n\006points\030\002 \003"
  "(\0132\020.vlsir.raw.Point\022\r\n\005width\030\003 \001(\003\"\236\001\n\013"
  "LayerShapes\022\037\n\005layer\030\001 \001(\0132\020.vlsir.raw.L"
  "ayer\022(\n\nrectangles\030\002 \003(\0132\024.vlsir.raw.Rec"
  "tangle\022$\n\010polygons\030\003 \003(\0132\022.vlsir.raw.Pol"
  "ygon\022\036\n\005paths\030\004 \003(\0132\017.vlsir.raw.Path\"<\n\013"
  "TextElement\022\016\n\006string\030\001 \001(\t\022\035\n\003loc\030\002 \001(\013"
  "2\020.vlsir.raw.Point\"\243\001\n\010Instance\022\014\n\004name\030"
  "\001 \001(\t\022$\n\004cell\030\003 \001(\0132\026.vlsir.utils.Refere"
  "nce\022)\n\017origin_location\030\004 \001(\0132\020.vlsir.raw"
  ".Point\022\024\n\014reflect_vert\030\006 \001(\010\022\"\n\032rotation"
  "_clockwise_degrees\030\007 \001(\005\"\223\001\n\006Layout\022\014\n\004n"
  "ame\030\001 \001(\t\022&\n\006shapes\030\002 \003(\0132\026.vlsir.raw.La"
  "yerShapes\022&\n\tinstances\030\003 \003(\0132\023.vlsir.raw"
  ".Instance\022+\n\013annotations\030\004 \003(\0132\026.vlsir.r"
  "aw.TextElement\"\220\001\n\010Abstract\022\014\n\004name\030\001 \001("
  "\t\022#\n\007outline\030\002 \001(\0132\022.vlsir.raw.Polygon\022&"
  "\n\005ports\030\004 \003(\0132\027.vlsir.raw.AbstractPort\022)"
  "\n\tblockages\030\005 \003(\0132\026.vlsir.raw.LayerShape"
  "s\"C\n\014AbstractPort\022\013\n\003net\030\001 \001(\t\022&\n\006shapes"
  "\030\002 \003(\0132\026.vlsir.raw.LayerShapes\"\262\001\n\004Cell\022"
  "\014\n\004name\030\001 \001(\t\022+\n\tinterface\030\n \001(\0132\030.vlsir"
  ".circuit.Interface\022%\n\006module\030\013 \001(\0132\025.vls"
  "ir.circuit.Module\022%\n\010abstract\030\014 \001(\0132\023.vl"
  "sir.raw.Abstract\022!\n\006layout\030\r \001(\0132\021.vlsir"
  ".raw.Layout\"\207\001\n\007Library\022\016\n\006domain\030\001 \001(\t\022"
  "\037\n\005units\030\002 \001(\0162\020.vlsir.raw.Units\022\036\n\005cell"
  "s\030\n \003(\0132\017.vlsir.raw.Cell\022+\n\006author\030\024 \001(\013"
  "2\033.vlsir.utils.AuthorMetadata**\n\005Units\022\t"
  "\n\005MICRO\020\000\022\010\n\004NANO\020\001\022\014\n\010ANGSTROM\020\002b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_layout_2fraw_2eproto_deps[2] = {
  &::descriptor_table_circuit_2eproto,
  &::descriptor_table_utils_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_layout_2fraw_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_layout_2fraw_2eproto = {
  false, false, 1481, descriptor_table_protodef_layout_2fraw_2eproto, "layout/raw.proto", 
  &descriptor_table_layout_2fraw_2eproto_once, descriptor_table_layout_2fraw_2eproto_deps, 2, 13,
  schemas, file_default_instances, TableStruct_layout_2fraw_2eproto::offsets,
  file_level_metadata_layout_2fraw_2eproto, file_level_enum_descriptors_layout_2fraw_2eproto, file_level_service_descriptors_layout_2fraw_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_layout_2fraw_2eproto_getter() {
  return &descriptor_table_layout_2fraw_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_layout_2fraw_2eproto(&descriptor_table_layout_2fraw_2eproto);
namespace vlsir {
namespace raw {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Units_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_layout_2fraw_2eproto);
  return file_level_enum_descriptors_layout_2fraw_2eproto[0];
}
bool Units_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Point::_Internal {
 public:
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vlsir.raw.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:vlsir.raw.Point)
}

inline void Point::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:vlsir.raw.Point)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point::ArenaDtor(void* object) {
  Point* _this = reinterpret_cast< Point* >(object);
  (void)_this;
}
void Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.raw.Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.raw.Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_x(), target);
  }

  // int64 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.raw.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.raw.Point)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_x());
  }

  // int64 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }

void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Point *>(to)->MergeFrom(
      static_cast<const Point &>(from));
}


void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.raw.Point)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.raw.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, y_)
      + sizeof(Point::y_)
      - PROTOBUF_FIELD_OFFSET(Point, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_layout_2fraw_2eproto_getter, &descriptor_table_layout_2fraw_2eproto_once,
      file_level_metadata_layout_2fraw_2eproto[0]);
}

// ===================================================================

class Layer::_Internal {
 public:
};

Layer::Layer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vlsir.raw.Layer)
}
Layer::Layer(const Layer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&number_, &from.number_,
    static_cast<size_t>(reinterpret_cast<char*>(&purpose_) -
    reinterpret_cast<char*>(&number_)) + sizeof(purpose_));
  // @@protoc_insertion_point(copy_constructor:vlsir.raw.Layer)
}

inline void Layer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&purpose_) -
    reinterpret_cast<char*>(&number_)) + sizeof(purpose_));
}

Layer::~Layer() {
  // @@protoc_insertion_point(destructor:vlsir.raw.Layer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Layer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Layer::ArenaDtor(void* object) {
  Layer* _this = reinterpret_cast< Layer* >(object);
  (void)_this;
}
void Layer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Layer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Layer::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.raw.Layer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&purpose_) -
      reinterpret_cast<char*>(&number_)) + sizeof(purpose_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Layer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 purpose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          purpose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Layer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.raw.Layer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 number = 1;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_number(), target);
  }

  // int64 purpose = 2;
  if (this->_internal_purpose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_purpose(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.raw.Layer)
  return target;
}

size_t Layer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.raw.Layer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 number = 1;
  if (this->_internal_number() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_number());
  }

  // int64 purpose = 2;
  if (this->_internal_purpose() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_purpose());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Layer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Layer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Layer::GetClassData() const { return &_class_data_; }

void Layer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Layer *>(to)->MergeFrom(
      static_cast<const Layer &>(from));
}


void Layer::MergeFrom(const Layer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.raw.Layer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_number() != 0) {
    _internal_set_number(from._internal_number());
  }
  if (from._internal_purpose() != 0) {
    _internal_set_purpose(from._internal_purpose());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Layer::CopyFrom(const Layer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.raw.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Layer::IsInitialized() const {
  return true;
}

void Layer::InternalSwap(Layer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Layer, purpose_)
      + sizeof(Layer::purpose_)
      - PROTOBUF_FIELD_OFFSET(Layer, number_)>(
          reinterpret_cast<char*>(&number_),
          reinterpret_cast<char*>(&other->number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Layer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_layout_2fraw_2eproto_getter, &descriptor_table_layout_2fraw_2eproto_once,
      file_level_metadata_layout_2fraw_2eproto[1]);
}

// ===================================================================

class Rectangle::_Internal {
 public:
  static const ::vlsir::raw::Point& lower_left(const Rectangle* msg);
};

const ::vlsir::raw::Point&
Rectangle::_Internal::lower_left(const Rectangle* msg) {
  return *msg->lower_left_;
}
Rectangle::Rectangle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vlsir.raw.Rectangle)
}
Rectangle::Rectangle(const Rectangle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  net_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    net_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_net().empty()) {
    net_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_net(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_lower_left()) {
    lower_left_ = new ::vlsir::raw::Point(*from.lower_left_);
  } else {
    lower_left_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:vlsir.raw.Rectangle)
}

inline void Rectangle::SharedCtor() {
net_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  net_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lower_left_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&lower_left_)) + sizeof(height_));
}

Rectangle::~Rectangle() {
  // @@protoc_insertion_point(destructor:vlsir.raw.Rectangle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Rectangle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  net_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete lower_left_;
}

void Rectangle::ArenaDtor(void* object) {
  Rectangle* _this = reinterpret_cast< Rectangle* >(object);
  (void)_this;
}
void Rectangle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rectangle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Rectangle::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.raw.Rectangle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  net_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && lower_left_ != nullptr) {
    delete lower_left_;
  }
  lower_left_ = nullptr;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rectangle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string net = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_net();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.raw.Rectangle.net"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vlsir.raw.Point lower_left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lower_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rectangle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.raw.Rectangle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string net = 1;
  if (!this->_internal_net().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_net().data(), static_cast<int>(this->_internal_net().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.raw.Rectangle.net");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_net(), target);
  }

  // .vlsir.raw.Point lower_left = 2;
  if (this->_internal_has_lower_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lower_left(this), target, stream);
  }

  // int64 width = 3;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_width(), target);
  }

  // int64 height = 4;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.raw.Rectangle)
  return target;
}

size_t Rectangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.raw.Rectangle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string net = 1;
  if (!this->_internal_net().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_net());
  }

  // .vlsir.raw.Point lower_left = 2;
  if (this->_internal_has_lower_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lower_left_);
  }

  // int64 width = 3;
  if (this->_internal_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_width());
  }

  // int64 height = 4;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rectangle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Rectangle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rectangle::GetClassData() const { return &_class_data_; }

void Rectangle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Rectangle *>(to)->MergeFrom(
      static_cast<const Rectangle &>(from));
}


void Rectangle::MergeFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.raw.Rectangle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_net().empty()) {
    _internal_set_net(from._internal_net());
  }
  if (from._internal_has_lower_left()) {
    _internal_mutable_lower_left()->::vlsir::raw::Point::MergeFrom(from._internal_lower_left());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rectangle::CopyFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.raw.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rectangle::IsInitialized() const {
  return true;
}

void Rectangle::InternalSwap(Rectangle* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &net_, lhs_arena,
      &other->net_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rectangle, height_)
      + sizeof(Rectangle::height_)
      - PROTOBUF_FIELD_OFFSET(Rectangle, lower_left_)>(
          reinterpret_cast<char*>(&lower_left_),
          reinterpret_cast<char*>(&other->lower_left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rectangle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_layout_2fraw_2eproto_getter, &descriptor_table_layout_2fraw_2eproto_once,
      file_level_metadata_layout_2fraw_2eproto[2]);
}

// ===================================================================

class Polygon::_Internal {
 public:
};

Polygon::Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vertices_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vlsir.raw.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vertices_(from.vertices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  net_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    net_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_net().empty()) {
    net_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_net(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.raw.Polygon)
}

inline void Polygon::SharedCtor() {
net_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  net_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:vlsir.raw.Polygon)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Polygon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  net_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Polygon::ArenaDtor(void* object) {
  Polygon* _this = reinterpret_cast< Polygon* >(object);
  (void)_this;
}
void Polygon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Polygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.raw.Polygon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  net_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Polygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string net = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_net();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.raw.Polygon.net"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.raw.Point vertices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Polygon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.raw.Polygon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string net = 1;
  if (!this->_internal_net().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_net().data(), static_cast<int>(this->_internal_net().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.raw.Polygon.net");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_net(), target);
  }

  // repeated .vlsir.raw.Point vertices = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_vertices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.raw.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.raw.Polygon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.raw.Point vertices = 2;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string net = 1;
  if (!this->_internal_net().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_net());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Polygon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Polygon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Polygon::GetClassData() const { return &_class_data_; }

void Polygon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Polygon *>(to)->MergeFrom(
      static_cast<const Polygon &>(from));
}


void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.raw.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
  if (!from._internal_net().empty()) {
    _internal_set_net(from._internal_net());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.raw.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  return true;
}

void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vertices_.InternalSwap(&other->vertices_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &net_, lhs_arena,
      &other->net_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Polygon::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_layout_2fraw_2eproto_getter, &descriptor_table_layout_2fraw_2eproto_once,
      file_level_metadata_layout_2fraw_2eproto[3]);
}

// ===================================================================

class Path::_Internal {
 public:
};

Path::Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  points_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vlsir.raw.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  net_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    net_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_net().empty()) {
    net_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_net(), 
      GetArenaForAllocation());
  }
  width_ = from.width_;
  // @@protoc_insertion_point(copy_constructor:vlsir.raw.Path)
}

inline void Path::SharedCtor() {
net_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  net_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
width_ = int64_t{0};
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:vlsir.raw.Path)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Path::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  net_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Path::ArenaDtor(void* object) {
  Path* _this = reinterpret_cast< Path* >(object);
  (void)_this;
}
void Path::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.raw.Path)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  net_.ClearToEmpty();
  width_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string net = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_net();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.raw.Path.net"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.raw.Point points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Path::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.raw.Path)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string net = 1;
  if (!this->_internal_net().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_net().data(), static_cast<int>(this->_internal_net().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.raw.Path.net");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_net(), target);
  }

  // repeated .vlsir.raw.Point points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_points(i), target, stream);
  }

  // int64 width = 3;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.raw.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.raw.Path)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.raw.Point points = 2;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string net = 1;
  if (!this->_internal_net().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_net());
  }

  // int64 width = 3;
  if (this->_internal_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_width());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Path::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Path::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Path::GetClassData() const { return &_class_data_; }

void Path::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Path *>(to)->MergeFrom(
      static_cast<const Path &>(from));
}


void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.raw.Path)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (!from._internal_net().empty()) {
    _internal_set_net(from._internal_net());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.raw.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &net_, lhs_arena,
      &other->net_, rhs_arena
  );
  swap(width_, other->width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_layout_2fraw_2eproto_getter, &descriptor_table_layout_2fraw_2eproto_once,
      file_level_metadata_layout_2fraw_2eproto[4]);
}

// ===================================================================

class LayerShapes::_Internal {
 public:
  static const ::vlsir::raw::Layer& layer(const LayerShapes* msg);
};

const ::vlsir::raw::Layer&
LayerShapes::_Internal::layer(const LayerShapes* msg) {
  return *msg->layer_;
}
LayerShapes::LayerShapes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rectangles_(arena),
  polygons_(arena),
  paths_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vlsir.raw.LayerShapes)
}
LayerShapes::LayerShapes(const LayerShapes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rectangles_(from.rectangles_),
      polygons_(from.polygons_),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_layer()) {
    layer_ = new ::vlsir::raw::Layer(*from.layer_);
  } else {
    layer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.raw.LayerShapes)
}

inline void LayerShapes::SharedCtor() {
layer_ = nullptr;
}

LayerShapes::~LayerShapes() {
  // @@protoc_insertion_point(destructor:vlsir.raw.LayerShapes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LayerShapes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete layer_;
}

void LayerShapes::ArenaDtor(void* object) {
  LayerShapes* _this = reinterpret_cast< LayerShapes* >(object);
  (void)_this;
}
void LayerShapes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LayerShapes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LayerShapes::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.raw.LayerShapes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rectangles_.Clear();
  polygons_.Clear();
  paths_.Clear();
  if (GetArenaForAllocation() == nullptr && layer_ != nullptr) {
    delete layer_;
  }
  layer_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LayerShapes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vlsir.raw.Layer layer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_layer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.raw.Rectangle rectangles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rectangles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.raw.Polygon polygons = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.raw.Path paths = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayerShapes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.raw.LayerShapes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vlsir.raw.Layer layer = 1;
  if (this->_internal_has_layer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::layer(this), target, stream);
  }

  // repeated .vlsir.raw.Rectangle rectangles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rectangles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rectangles(i), target, stream);
  }

  // repeated .vlsir.raw.Polygon polygons = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polygons_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_polygons(i), target, stream);
  }

  // repeated .vlsir.raw.Path paths = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paths_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_paths(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.raw.LayerShapes)
  return target;
}

size_t LayerShapes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.raw.LayerShapes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.raw.Rectangle rectangles = 2;
  total_size += 1UL * this->_internal_rectangles_size();
  for (const auto& msg : this->rectangles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vlsir.raw.Polygon polygons = 3;
  total_size += 1UL * this->_internal_polygons_size();
  for (const auto& msg : this->polygons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vlsir.raw.Path paths = 4;
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .vlsir.raw.Layer layer = 1;
  if (this->_internal_has_layer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *layer_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LayerShapes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LayerShapes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LayerShapes::GetClassData() const { return &_class_data_; }

void LayerShapes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LayerShapes *>(to)->MergeFrom(
      static_cast<const LayerShapes &>(from));
}


void LayerShapes::MergeFrom(const LayerShapes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.raw.LayerShapes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  rectangles_.MergeFrom(from.rectangles_);
  polygons_.MergeFrom(from.polygons_);
  paths_.MergeFrom(from.paths_);
  if (from._internal_has_layer()) {
    _internal_mutable_layer()->::vlsir::raw::Layer::MergeFrom(from._internal_layer());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LayerShapes::CopyFrom(const LayerShapes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.raw.LayerShapes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerShapes::IsInitialized() const {
  return true;
}

void LayerShapes::InternalSwap(LayerShapes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rectangles_.InternalSwap(&other->rectangles_);
  polygons_.InternalSwap(&other->polygons_);
  paths_.InternalSwap(&other->paths_);
  swap(layer_, other->layer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LayerShapes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_layout_2fraw_2eproto_getter, &descriptor_table_layout_2fraw_2eproto_once,
      file_level_metadata_layout_2fraw_2eproto[5]);
}

// ===================================================================

class TextElement::_Internal {
 public:
  static const ::vlsir::raw::Point& loc(const TextElement* msg);
};

const ::vlsir::raw::Point&
TextElement::_Internal::loc(const TextElement* msg) {
  return *msg->loc_;
}
TextElement::TextElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vlsir.raw.TextElement)
}
TextElement::TextElement(const TextElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_string().empty()) {
    string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_loc()) {
    loc_ = new ::vlsir::raw::Point(*from.loc_);
  } else {
    loc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.raw.TextElement)
}

inline void TextElement::SharedCtor() {
string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
loc_ = nullptr;
}

TextElement::~TextElement() {
  // @@protoc_insertion_point(destructor:vlsir.raw.TextElement)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TextElement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete loc_;
}

void TextElement::ArenaDtor(void* object) {
  TextElement* _this = reinterpret_cast< TextElement* >(object);
  (void)_this;
}
void TextElement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TextElement::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.raw.TextElement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  string_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && loc_ != nullptr) {
    delete loc_;
  }
  loc_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.raw.TextElement.string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vlsir.raw.Point loc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_loc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextElement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.raw.TextElement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string string = 1;
  if (!this->_internal_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.raw.TextElement.string");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_string(), target);
  }

  // .vlsir.raw.Point loc = 2;
  if (this->_internal_has_loc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::loc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.raw.TextElement)
  return target;
}

size_t TextElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.raw.TextElement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string string = 1;
  if (!this->_internal_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_string());
  }

  // .vlsir.raw.Point loc = 2;
  if (this->_internal_has_loc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *loc_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextElement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TextElement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextElement::GetClassData() const { return &_class_data_; }

void TextElement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TextElement *>(to)->MergeFrom(
      static_cast<const TextElement &>(from));
}


void TextElement::MergeFrom(const TextElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.raw.TextElement)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_string().empty()) {
    _internal_set_string(from._internal_string());
  }
  if (from._internal_has_loc()) {
    _internal_mutable_loc()->::vlsir::raw::Point::MergeFrom(from._internal_loc());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextElement::CopyFrom(const TextElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.raw.TextElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextElement::IsInitialized() const {
  return true;
}

void TextElement::InternalSwap(TextElement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &string_, lhs_arena,
      &other->string_, rhs_arena
  );
  swap(loc_, other->loc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextElement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_layout_2fraw_2eproto_getter, &descriptor_table_layout_2fraw_2eproto_once,
      file_level_metadata_layout_2fraw_2eproto[6]);
}

// ===================================================================

class Instance::_Internal {
 public:
  static const ::vlsir::utils::Reference& cell(const Instance* msg);
  static const ::vlsir::raw::Point& origin_location(const Instance* msg);
};

const ::vlsir::utils::Reference&
Instance::_Internal::cell(const Instance* msg) {
  return *msg->cell_;
}
const ::vlsir::raw::Point&
Instance::_Internal::origin_location(const Instance* msg) {
  return *msg->origin_location_;
}
void Instance::clear_cell() {
  if (GetArenaForAllocation() == nullptr && cell_ != nullptr) {
    delete cell_;
  }
  cell_ = nullptr;
}
Instance::Instance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vlsir.raw.Instance)
}
Instance::Instance(const Instance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_cell()) {
    cell_ = new ::vlsir::utils::Reference(*from.cell_);
  } else {
    cell_ = nullptr;
  }
  if (from._internal_has_origin_location()) {
    origin_location_ = new ::vlsir::raw::Point(*from.origin_location_);
  } else {
    origin_location_ = nullptr;
  }
  ::memcpy(&reflect_vert_, &from.reflect_vert_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotation_clockwise_degrees_) -
    reinterpret_cast<char*>(&reflect_vert_)) + sizeof(rotation_clockwise_degrees_));
  // @@protoc_insertion_point(copy_constructor:vlsir.raw.Instance)
}

inline void Instance::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cell_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rotation_clockwise_degrees_) -
    reinterpret_cast<char*>(&cell_)) + sizeof(rotation_clockwise_degrees_));
}

Instance::~Instance() {
  // @@protoc_insertion_point(destructor:vlsir.raw.Instance)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Instance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cell_;
  if (this != internal_default_instance()) delete origin_location_;
}

void Instance::ArenaDtor(void* object) {
  Instance* _this = reinterpret_cast< Instance* >(object);
  (void)_this;
}
void Instance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Instance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Instance::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.raw.Instance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && cell_ != nullptr) {
    delete cell_;
  }
  cell_ = nullptr;
  if (GetArenaForAllocation() == nullptr && origin_location_ != nullptr) {
    delete origin_location_;
  }
  origin_location_ = nullptr;
  ::memset(&reflect_vert_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_clockwise_degrees_) -
      reinterpret_cast<char*>(&reflect_vert_)) + sizeof(rotation_clockwise_degrees_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Instance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.raw.Instance.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vlsir.utils.Reference cell = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vlsir.raw.Point origin_location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool reflect_vert = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          reflect_vert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rotation_clockwise_degrees = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          rotation_clockwise_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Instance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.raw.Instance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.raw.Instance.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .vlsir.utils.Reference cell = 3;
  if (this->_internal_has_cell()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cell(this), target, stream);
  }

  // .vlsir.raw.Point origin_location = 4;
  if (this->_internal_has_origin_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::origin_location(this), target, stream);
  }

  // bool reflect_vert = 6;
  if (this->_internal_reflect_vert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_reflect_vert(), target);
  }

  // int32 rotation_clockwise_degrees = 7;
  if (this->_internal_rotation_clockwise_degrees() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_rotation_clockwise_degrees(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.raw.Instance)
  return target;
}

size_t Instance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.raw.Instance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .vlsir.utils.Reference cell = 3;
  if (this->_internal_has_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_);
  }

  // .vlsir.raw.Point origin_location = 4;
  if (this->_internal_has_origin_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_location_);
  }

  // bool reflect_vert = 6;
  if (this->_internal_reflect_vert() != 0) {
    total_size += 1 + 1;
  }

  // int32 rotation_clockwise_degrees = 7;
  if (this->_internal_rotation_clockwise_degrees() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_rotation_clockwise_degrees());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Instance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Instance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Instance::GetClassData() const { return &_class_data_; }

void Instance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Instance *>(to)->MergeFrom(
      static_cast<const Instance &>(from));
}


void Instance::MergeFrom(const Instance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.raw.Instance)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_cell()) {
    _internal_mutable_cell()->::vlsir::utils::Reference::MergeFrom(from._internal_cell());
  }
  if (from._internal_has_origin_location()) {
    _internal_mutable_origin_location()->::vlsir::raw::Point::MergeFrom(from._internal_origin_location());
  }
  if (from._internal_reflect_vert() != 0) {
    _internal_set_reflect_vert(from._internal_reflect_vert());
  }
  if (from._internal_rotation_clockwise_degrees() != 0) {
    _internal_set_rotation_clockwise_degrees(from._internal_rotation_clockwise_degrees());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Instance::CopyFrom(const Instance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.raw.Instance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instance::IsInitialized() const {
  return true;
}

void Instance::InternalSwap(Instance* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Instance, rotation_clockwise_degrees_)
      + sizeof(Instance::rotation_clockwise_degrees_)
      - PROTOBUF_FIELD_OFFSET(Instance, cell_)>(
          reinterpret_cast<char*>(&cell_),
          reinterpret_cast<char*>(&other->cell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Instance::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_layout_2fraw_2eproto_getter, &descriptor_table_layout_2fraw_2eproto_once,
      file_level_metadata_layout_2fraw_2eproto[7]);
}

// ===================================================================

class Layout::_Internal {
 public:
};

Layout::Layout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  shapes_(arena),
  instances_(arena),
  annotations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vlsir.raw.Layout)
}
Layout::Layout(const Layout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shapes_(from.shapes_),
      instances_(from.instances_),
      annotations_(from.annotations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.raw.Layout)
}

inline void Layout::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Layout::~Layout() {
  // @@protoc_insertion_point(destructor:vlsir.raw.Layout)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Layout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Layout::ArenaDtor(void* object) {
  Layout* _this = reinterpret_cast< Layout* >(object);
  (void)_this;
}
void Layout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Layout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Layout::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.raw.Layout)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shapes_.Clear();
  instances_.Clear();
  annotations_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Layout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.raw.Layout.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.raw.LayerShapes shapes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shapes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.raw.Instance instances = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.raw.TextElement annotations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Layout::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.raw.Layout)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.raw.Layout.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .vlsir.raw.LayerShapes shapes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shapes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_shapes(i), target, stream);
  }

  // repeated .vlsir.raw.Instance instances = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instances_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_instances(i), target, stream);
  }

  // repeated .vlsir.raw.TextElement annotations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_annotations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.raw.Layout)
  return target;
}

size_t Layout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.raw.Layout)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.raw.LayerShapes shapes = 2;
  total_size += 1UL * this->_internal_shapes_size();
  for (const auto& msg : this->shapes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vlsir.raw.Instance instances = 3;
  total_size += 1UL * this->_internal_instances_size();
  for (const auto& msg : this->instances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vlsir.raw.TextElement annotations = 4;
  total_size += 1UL * this->_internal_annotations_size();
  for (const auto& msg : this->annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Layout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Layout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Layout::GetClassData() const { return &_class_data_; }

void Layout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Layout *>(to)->MergeFrom(
      static_cast<const Layout &>(from));
}


void Layout::MergeFrom(const Layout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.raw.Layout)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  shapes_.MergeFrom(from.shapes_);
  instances_.MergeFrom(from.instances_);
  annotations_.MergeFrom(from.annotations_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Layout::CopyFrom(const Layout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.raw.Layout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Layout::IsInitialized() const {
  return true;
}

void Layout::InternalSwap(Layout* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  shapes_.InternalSwap(&other->shapes_);
  instances_.InternalSwap(&other->instances_);
  annotations_.InternalSwap(&other->annotations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Layout::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_layout_2fraw_2eproto_getter, &descriptor_table_layout_2fraw_2eproto_once,
      file_level_metadata_layout_2fraw_2eproto[8]);
}

// ===================================================================

class Abstract::_Internal {
 public:
  static const ::vlsir::raw::Polygon& outline(const Abstract* msg);
};

const ::vlsir::raw::Polygon&
Abstract::_Internal::outline(const Abstract* msg) {
  return *msg->outline_;
}
Abstract::Abstract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ports_(arena),
  blockages_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vlsir.raw.Abstract)
}
Abstract::Abstract(const Abstract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ports_(from.ports_),
      blockages_(from.blockages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_outline()) {
    outline_ = new ::vlsir::raw::Polygon(*from.outline_);
  } else {
    outline_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.raw.Abstract)
}

inline void Abstract::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
outline_ = nullptr;
}

Abstract::~Abstract() {
  // @@protoc_insertion_point(destructor:vlsir.raw.Abstract)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Abstract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete outline_;
}

void Abstract::ArenaDtor(void* object) {
  Abstract* _this = reinterpret_cast< Abstract* >(object);
  (void)_this;
}
void Abstract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Abstract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Abstract::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.raw.Abstract)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ports_.Clear();
  blockages_.Clear();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && outline_ != nullptr) {
    delete outline_;
  }
  outline_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Abstract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.raw.Abstract.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vlsir.raw.Polygon outline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_outline(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.raw.AbstractPort ports = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.raw.LayerShapes blockages = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blockages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Abstract::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.raw.Abstract)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.raw.Abstract.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .vlsir.raw.Polygon outline = 2;
  if (this->_internal_has_outline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::outline(this), target, stream);
  }

  // repeated .vlsir.raw.AbstractPort ports = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ports_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_ports(i), target, stream);
  }

  // repeated .vlsir.raw.LayerShapes blockages = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blockages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_blockages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.raw.Abstract)
  return target;
}

size_t Abstract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.raw.Abstract)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.raw.AbstractPort ports = 4;
  total_size += 1UL * this->_internal_ports_size();
  for (const auto& msg : this->ports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vlsir.raw.LayerShapes blockages = 5;
  total_size += 1UL * this->_internal_blockages_size();
  for (const auto& msg : this->blockages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .vlsir.raw.Polygon outline = 2;
  if (this->_internal_has_outline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *outline_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Abstract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Abstract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Abstract::GetClassData() const { return &_class_data_; }

void Abstract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Abstract *>(to)->MergeFrom(
      static_cast<const Abstract &>(from));
}


void Abstract::MergeFrom(const Abstract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.raw.Abstract)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ports_.MergeFrom(from.ports_);
  blockages_.MergeFrom(from.blockages_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_outline()) {
    _internal_mutable_outline()->::vlsir::raw::Polygon::MergeFrom(from._internal_outline());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Abstract::CopyFrom(const Abstract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.raw.Abstract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Abstract::IsInitialized() const {
  return true;
}

void Abstract::InternalSwap(Abstract* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ports_.InternalSwap(&other->ports_);
  blockages_.InternalSwap(&other->blockages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(outline_, other->outline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Abstract::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_layout_2fraw_2eproto_getter, &descriptor_table_layout_2fraw_2eproto_once,
      file_level_metadata_layout_2fraw_2eproto[9]);
}

// ===================================================================

class AbstractPort::_Internal {
 public:
};

AbstractPort::AbstractPort(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  shapes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vlsir.raw.AbstractPort)
}
AbstractPort::AbstractPort(const AbstractPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shapes_(from.shapes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  net_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    net_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_net().empty()) {
    net_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_net(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.raw.AbstractPort)
}

inline void AbstractPort::SharedCtor() {
net_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  net_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AbstractPort::~AbstractPort() {
  // @@protoc_insertion_point(destructor:vlsir.raw.AbstractPort)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AbstractPort::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  net_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AbstractPort::ArenaDtor(void* object) {
  AbstractPort* _this = reinterpret_cast< AbstractPort* >(object);
  (void)_this;
}
void AbstractPort::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AbstractPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AbstractPort::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.raw.AbstractPort)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shapes_.Clear();
  net_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbstractPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string net = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_net();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.raw.AbstractPort.net"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.raw.LayerShapes shapes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shapes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AbstractPort::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.raw.AbstractPort)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string net = 1;
  if (!this->_internal_net().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_net().data(), static_cast<int>(this->_internal_net().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.raw.AbstractPort.net");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_net(), target);
  }

  // repeated .vlsir.raw.LayerShapes shapes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shapes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_shapes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.raw.AbstractPort)
  return target;
}

size_t AbstractPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.raw.AbstractPort)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.raw.LayerShapes shapes = 2;
  total_size += 1UL * this->_internal_shapes_size();
  for (const auto& msg : this->shapes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string net = 1;
  if (!this->_internal_net().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_net());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AbstractPort::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AbstractPort::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AbstractPort::GetClassData() const { return &_class_data_; }

void AbstractPort::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AbstractPort *>(to)->MergeFrom(
      static_cast<const AbstractPort &>(from));
}


void AbstractPort::MergeFrom(const AbstractPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.raw.AbstractPort)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  shapes_.MergeFrom(from.shapes_);
  if (!from._internal_net().empty()) {
    _internal_set_net(from._internal_net());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AbstractPort::CopyFrom(const AbstractPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.raw.AbstractPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbstractPort::IsInitialized() const {
  return true;
}

void AbstractPort::InternalSwap(AbstractPort* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  shapes_.InternalSwap(&other->shapes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &net_, lhs_arena,
      &other->net_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AbstractPort::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_layout_2fraw_2eproto_getter, &descriptor_table_layout_2fraw_2eproto_once,
      file_level_metadata_layout_2fraw_2eproto[10]);
}

// ===================================================================

class Cell::_Internal {
 public:
  static const ::vlsir::circuit::Interface& interface(const Cell* msg);
  static const ::vlsir::circuit::Module& module(const Cell* msg);
  static const ::vlsir::raw::Abstract& abstract(const Cell* msg);
  static const ::vlsir::raw::Layout& layout(const Cell* msg);
};

const ::vlsir::circuit::Interface&
Cell::_Internal::interface(const Cell* msg) {
  return *msg->interface_;
}
const ::vlsir::circuit::Module&
Cell::_Internal::module(const Cell* msg) {
  return *msg->module_;
}
const ::vlsir::raw::Abstract&
Cell::_Internal::abstract(const Cell* msg) {
  return *msg->abstract_;
}
const ::vlsir::raw::Layout&
Cell::_Internal::layout(const Cell* msg) {
  return *msg->layout_;
}
void Cell::clear_interface() {
  if (GetArenaForAllocation() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
}
void Cell::clear_module() {
  if (GetArenaForAllocation() == nullptr && module_ != nullptr) {
    delete module_;
  }
  module_ = nullptr;
}
Cell::Cell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vlsir.raw.Cell)
}
Cell::Cell(const Cell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_interface()) {
    interface_ = new ::vlsir::circuit::Interface(*from.interface_);
  } else {
    interface_ = nullptr;
  }
  if (from._internal_has_module()) {
    module_ = new ::vlsir::circuit::Module(*from.module_);
  } else {
    module_ = nullptr;
  }
  if (from._internal_has_abstract()) {
    abstract_ = new ::vlsir::raw::Abstract(*from.abstract_);
  } else {
    abstract_ = nullptr;
  }
  if (from._internal_has_layout()) {
    layout_ = new ::vlsir::raw::Layout(*from.layout_);
  } else {
    layout_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.raw.Cell)
}

inline void Cell::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&interface_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&layout_) -
    reinterpret_cast<char*>(&interface_)) + sizeof(layout_));
}

Cell::~Cell() {
  // @@protoc_insertion_point(destructor:vlsir.raw.Cell)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Cell::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete interface_;
  if (this != internal_default_instance()) delete module_;
  if (this != internal_default_instance()) delete abstract_;
  if (this != internal_default_instance()) delete layout_;
}

void Cell::ArenaDtor(void* object) {
  Cell* _this = reinterpret_cast< Cell* >(object);
  (void)_this;
}
void Cell::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Cell::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Cell::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.raw.Cell)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
  if (GetArenaForAllocation() == nullptr && module_ != nullptr) {
    delete module_;
  }
  module_ = nullptr;
  if (GetArenaForAllocation() == nullptr && abstract_ != nullptr) {
    delete abstract_;
  }
  abstract_ = nullptr;
  if (GetArenaForAllocation() == nullptr && layout_ != nullptr) {
    delete layout_;
  }
  layout_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cell::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.raw.Cell.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vlsir.circuit.Interface interface = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_interface(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vlsir.circuit.Module module = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_module(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vlsir.raw.Abstract abstract = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_abstract(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vlsir.raw.Layout layout = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_layout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Cell::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.raw.Cell)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.raw.Cell.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .vlsir.circuit.Interface interface = 10;
  if (this->_internal_has_interface()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::interface(this), target, stream);
  }

  // .vlsir.circuit.Module module = 11;
  if (this->_internal_has_module()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::module(this), target, stream);
  }

  // .vlsir.raw.Abstract abstract = 12;
  if (this->_internal_has_abstract()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::abstract(this), target, stream);
  }

  // .vlsir.raw.Layout layout = 13;
  if (this->_internal_has_layout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::layout(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.raw.Cell)
  return target;
}

size_t Cell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.raw.Cell)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .vlsir.circuit.Interface interface = 10;
  if (this->_internal_has_interface()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interface_);
  }

  // .vlsir.circuit.Module module = 11;
  if (this->_internal_has_module()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *module_);
  }

  // .vlsir.raw.Abstract abstract = 12;
  if (this->_internal_has_abstract()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *abstract_);
  }

  // .vlsir.raw.Layout layout = 13;
  if (this->_internal_has_layout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *layout_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Cell::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Cell::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Cell::GetClassData() const { return &_class_data_; }

void Cell::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Cell *>(to)->MergeFrom(
      static_cast<const Cell &>(from));
}


void Cell::MergeFrom(const Cell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.raw.Cell)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_interface()) {
    _internal_mutable_interface()->::vlsir::circuit::Interface::MergeFrom(from._internal_interface());
  }
  if (from._internal_has_module()) {
    _internal_mutable_module()->::vlsir::circuit::Module::MergeFrom(from._internal_module());
  }
  if (from._internal_has_abstract()) {
    _internal_mutable_abstract()->::vlsir::raw::Abstract::MergeFrom(from._internal_abstract());
  }
  if (from._internal_has_layout()) {
    _internal_mutable_layout()->::vlsir::raw::Layout::MergeFrom(from._internal_layout());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Cell::CopyFrom(const Cell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.raw.Cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cell::IsInitialized() const {
  return true;
}

void Cell::InternalSwap(Cell* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cell, layout_)
      + sizeof(Cell::layout_)
      - PROTOBUF_FIELD_OFFSET(Cell, interface_)>(
          reinterpret_cast<char*>(&interface_),
          reinterpret_cast<char*>(&other->interface_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Cell::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_layout_2fraw_2eproto_getter, &descriptor_table_layout_2fraw_2eproto_once,
      file_level_metadata_layout_2fraw_2eproto[11]);
}

// ===================================================================

class Library::_Internal {
 public:
  static const ::vlsir::utils::AuthorMetadata& author(const Library* msg);
};

const ::vlsir::utils::AuthorMetadata&
Library::_Internal::author(const Library* msg) {
  return *msg->author_;
}
void Library::clear_author() {
  if (GetArenaForAllocation() == nullptr && author_ != nullptr) {
    delete author_;
  }
  author_ = nullptr;
}
Library::Library(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cells_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vlsir.raw.Library)
}
Library::Library(const Library& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cells_(from.cells_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_domain().empty()) {
    domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_domain(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_author()) {
    author_ = new ::vlsir::utils::AuthorMetadata(*from.author_);
  } else {
    author_ = nullptr;
  }
  units_ = from.units_;
  // @@protoc_insertion_point(copy_constructor:vlsir.raw.Library)
}

inline void Library::SharedCtor() {
domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&author_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&units_) -
    reinterpret_cast<char*>(&author_)) + sizeof(units_));
}

Library::~Library() {
  // @@protoc_insertion_point(destructor:vlsir.raw.Library)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Library::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete author_;
}

void Library::ArenaDtor(void* object) {
  Library* _this = reinterpret_cast< Library* >(object);
  (void)_this;
}
void Library::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Library::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Library::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.raw.Library)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cells_.Clear();
  domain_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && author_ != nullptr) {
    delete author_;
  }
  author_ = nullptr;
  units_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Library::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string domain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_domain();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vlsir.raw.Library.domain"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vlsir.raw.Units units = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_units(static_cast<::vlsir::raw::Units>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.raw.Cell cells = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .vlsir.utils.AuthorMetadata author = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_author(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Library::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.raw.Library)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string domain = 1;
  if (!this->_internal_domain().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.raw.Library.domain");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_domain(), target);
  }

  // .vlsir.raw.Units units = 2;
  if (this->_internal_units() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_units(), target);
  }

  // repeated .vlsir.raw.Cell cells = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cells_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_cells(i), target, stream);
  }

  // .vlsir.utils.AuthorMetadata author = 20;
  if (this->_internal_has_author()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::author(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.raw.Library)
  return target;
}

size_t Library::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.raw.Library)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.raw.Cell cells = 10;
  total_size += 1UL * this->_internal_cells_size();
  for (const auto& msg : this->cells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string domain = 1;
  if (!this->_internal_domain().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domain());
  }

  // .vlsir.utils.AuthorMetadata author = 20;
  if (this->_internal_has_author()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *author_);
  }

  // .vlsir.raw.Units units = 2;
  if (this->_internal_units() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_units());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Library::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Library::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Library::GetClassData() const { return &_class_data_; }

void Library::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Library *>(to)->MergeFrom(
      static_cast<const Library &>(from));
}


void Library::MergeFrom(const Library& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlsir.raw.Library)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cells_.MergeFrom(from.cells_);
  if (!from._internal_domain().empty()) {
    _internal_set_domain(from._internal_domain());
  }
  if (from._internal_has_author()) {
    _internal_mutable_author()->::vlsir::utils::AuthorMetadata::MergeFrom(from._internal_author());
  }
  if (from._internal_units() != 0) {
    _internal_set_units(from._internal_units());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Library::CopyFrom(const Library& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.raw.Library)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Library::IsInitialized() const {
  return true;
}

void Library::InternalSwap(Library* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cells_.InternalSwap(&other->cells_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &domain_, lhs_arena,
      &other->domain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Library, units_)
      + sizeof(Library::units_)
      - PROTOBUF_FIELD_OFFSET(Library, author_)>(
          reinterpret_cast<char*>(&author_),
          reinterpret_cast<char*>(&other->author_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Library::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_layout_2fraw_2eproto_getter, &descriptor_table_layout_2fraw_2eproto_once,
      file_level_metadata_layout_2fraw_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace raw
}  // namespace vlsir
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vlsir::raw::Point* Arena::CreateMaybeMessage< ::vlsir::raw::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::raw::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::raw::Layer* Arena::CreateMaybeMessage< ::vlsir::raw::Layer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::raw::Layer >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::raw::Rectangle* Arena::CreateMaybeMessage< ::vlsir::raw::Rectangle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::raw::Rectangle >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::raw::Polygon* Arena::CreateMaybeMessage< ::vlsir::raw::Polygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::raw::Polygon >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::raw::Path* Arena::CreateMaybeMessage< ::vlsir::raw::Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::raw::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::raw::LayerShapes* Arena::CreateMaybeMessage< ::vlsir::raw::LayerShapes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::raw::LayerShapes >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::raw::TextElement* Arena::CreateMaybeMessage< ::vlsir::raw::TextElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::raw::TextElement >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::raw::Instance* Arena::CreateMaybeMessage< ::vlsir::raw::Instance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::raw::Instance >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::raw::Layout* Arena::CreateMaybeMessage< ::vlsir::raw::Layout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::raw::Layout >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::raw::Abstract* Arena::CreateMaybeMessage< ::vlsir::raw::Abstract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::raw::Abstract >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::raw::AbstractPort* Arena::CreateMaybeMessage< ::vlsir::raw::AbstractPort >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::raw::AbstractPort >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::raw::Cell* Arena::CreateMaybeMessage< ::vlsir::raw::Cell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::raw::Cell >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::raw::Library* Arena::CreateMaybeMessage< ::vlsir::raw::Library >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::raw::Library >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
