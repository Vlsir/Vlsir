// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tech.proto

#include "tech.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace vlsir {
namespace tech {
PROTOBUF_CONSTEXPR Technology::Technology(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.packages_)*/{}
  , /*decltype(_impl_.layers_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TechnologyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TechnologyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TechnologyDefaultTypeInternal() {}
  union {
    Technology _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TechnologyDefaultTypeInternal _Technology_default_instance_;
PROTOBUF_CONSTEXPR Package::Package(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PackageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PackageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PackageDefaultTypeInternal() {}
  union {
    Package _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PackageDefaultTypeInternal _Package_default_instance_;
PROTOBUF_CONSTEXPR LayerPurpose::LayerPurpose(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LayerPurposeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayerPurposeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayerPurposeDefaultTypeInternal() {}
  union {
    LayerPurpose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayerPurposeDefaultTypeInternal _LayerPurpose_default_instance_;
PROTOBUF_CONSTEXPR LayerInfo::LayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.purpose_)*/nullptr
  , /*decltype(_impl_.index_)*/uint64_t{0u}
  , /*decltype(_impl_.sub_index_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayerInfoDefaultTypeInternal() {}
  union {
    LayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayerInfoDefaultTypeInternal _LayerInfo_default_instance_;
}  // namespace tech
}  // namespace vlsir
static ::_pb::Metadata file_level_metadata_tech_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tech_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tech_2eproto = nullptr;

const uint32_t TableStruct_tech_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::tech::Technology, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::tech::Technology, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::tech::Technology, _impl_.packages_),
  PROTOBUF_FIELD_OFFSET(::vlsir::tech::Technology, _impl_.layers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::tech::Package, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::tech::Package, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::tech::LayerPurpose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::tech::LayerPurpose, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::vlsir::tech::LayerPurpose, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::tech::LayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::tech::LayerInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::tech::LayerInfo, _impl_.purpose_),
  PROTOBUF_FIELD_OFFSET(::vlsir::tech::LayerInfo, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::vlsir::tech::LayerInfo, _impl_.sub_index_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::vlsir::tech::Technology)},
  { 9, -1, -1, sizeof(::vlsir::tech::Package)},
  { 16, -1, -1, sizeof(::vlsir::tech::LayerPurpose)},
  { 24, -1, -1, sizeof(::vlsir::tech::LayerInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::vlsir::tech::_Technology_default_instance_._instance,
  &::vlsir::tech::_Package_default_instance_._instance,
  &::vlsir::tech::_LayerPurpose_default_instance_._instance,
  &::vlsir::tech::_LayerInfo_default_instance_._instance,
};

const char descriptor_table_protodef_tech_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ntech.proto\022\nvlsir.tech\"h\n\nTechnology\022\014"
  "\n\004name\030\001 \001(\t\022%\n\010packages\030\013 \003(\0132\023.vlsir.t"
  "ech.Package\022%\n\006layers\030e \003(\0132\025.vlsir.tech"
  ".LayerInfo\"\027\n\007Package\022\014\n\004name\030\001 \001(\t\"O\n\014L"
  "ayerPurpose\022\023\n\013description\030\001 \001(\t\022*\n\004type"
  "\030\002 \001(\0162\034.vlsir.tech.LayerPurposeType\"f\n\t"
  "LayerInfo\022\014\n\004name\030\001 \001(\t\022)\n\007purpose\030\013 \001(\013"
  "2\030.vlsir.tech.LayerPurpose\022\r\n\005index\030\025 \001("
  "\004\022\021\n\tsub_index\030\037 \001(\004*^\n\020LayerPurposeType"
  "\022\013\n\007UNKNOWN\020\000\022\t\n\005LABEL\020\001\022\013\n\007DRAWING\020\002\022\007\n"
  "\003PIN\020\003\022\017\n\013OBSTRUCTION\020\004\022\013\n\007OUTLINE\020\005b\006pr"
  "oto3"
  ;
static ::_pbi::once_flag descriptor_table_tech_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tech_2eproto = {
    false, false, 444, descriptor_table_protodef_tech_2eproto,
    "tech.proto",
    &descriptor_table_tech_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_tech_2eproto::offsets,
    file_level_metadata_tech_2eproto, file_level_enum_descriptors_tech_2eproto,
    file_level_service_descriptors_tech_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tech_2eproto_getter() {
  return &descriptor_table_tech_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tech_2eproto(&descriptor_table_tech_2eproto);
namespace vlsir {
namespace tech {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LayerPurposeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tech_2eproto);
  return file_level_enum_descriptors_tech_2eproto[0];
}
bool LayerPurposeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Technology::_Internal {
 public:
};

Technology::Technology(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.tech.Technology)
}
Technology::Technology(const Technology& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Technology* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.packages_){from._impl_.packages_}
    , decltype(_impl_.layers_){from._impl_.layers_}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.tech.Technology)
}

inline void Technology::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.packages_){arena}
    , decltype(_impl_.layers_){arena}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Technology::~Technology() {
  // @@protoc_insertion_point(destructor:vlsir.tech.Technology)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Technology::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.packages_.~RepeatedPtrField();
  _impl_.layers_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void Technology::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Technology::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.tech.Technology)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.packages_.Clear();
  _impl_.layers_.Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Technology::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.tech.Technology.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.tech.Package packages = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_packages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .vlsir.tech.LayerInfo layers = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<810>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Technology::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.tech.Technology)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.tech.Technology.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .vlsir.tech.Package packages = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_packages_size()); i < n; i++) {
    const auto& repfield = this->_internal_packages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .vlsir.tech.LayerInfo layers = 101;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_layers_size()); i < n; i++) {
    const auto& repfield = this->_internal_layers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(101, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.tech.Technology)
  return target;
}

size_t Technology::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.tech.Technology)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vlsir.tech.Package packages = 11;
  total_size += 1UL * this->_internal_packages_size();
  for (const auto& msg : this->_impl_.packages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vlsir.tech.LayerInfo layers = 101;
  total_size += 2UL * this->_internal_layers_size();
  for (const auto& msg : this->_impl_.layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Technology::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Technology::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Technology::GetClassData() const { return &_class_data_; }


void Technology::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Technology*>(&to_msg);
  auto& from = static_cast<const Technology&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.tech.Technology)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.packages_.MergeFrom(from._impl_.packages_);
  _this->_impl_.layers_.MergeFrom(from._impl_.layers_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Technology::CopyFrom(const Technology& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.tech.Technology)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Technology::IsInitialized() const {
  return true;
}

void Technology::InternalSwap(Technology* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.packages_.InternalSwap(&other->_impl_.packages_);
  _impl_.layers_.InternalSwap(&other->_impl_.layers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Technology::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tech_2eproto_getter, &descriptor_table_tech_2eproto_once,
      file_level_metadata_tech_2eproto[0]);
}

// ===================================================================

class Package::_Internal {
 public:
};

Package::Package(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.tech.Package)
}
Package::Package(const Package& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Package* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.tech.Package)
}

inline void Package::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Package::~Package() {
  // @@protoc_insertion_point(destructor:vlsir.tech.Package)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Package::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void Package::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Package::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.tech.Package)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Package::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.tech.Package.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Package::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.tech.Package)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.tech.Package.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.tech.Package)
  return target;
}

size_t Package::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.tech.Package)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Package::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Package::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Package::GetClassData() const { return &_class_data_; }


void Package::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Package*>(&to_msg);
  auto& from = static_cast<const Package&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.tech.Package)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Package::CopyFrom(const Package& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.tech.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Package::IsInitialized() const {
  return true;
}

void Package::InternalSwap(Package* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Package::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tech_2eproto_getter, &descriptor_table_tech_2eproto_once,
      file_level_metadata_tech_2eproto[1]);
}

// ===================================================================

class LayerPurpose::_Internal {
 public:
};

LayerPurpose::LayerPurpose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.tech.LayerPurpose)
}
LayerPurpose::LayerPurpose(const LayerPurpose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LayerPurpose* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.description_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:vlsir.tech.LayerPurpose)
}

inline void LayerPurpose::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.description_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LayerPurpose::~LayerPurpose() {
  // @@protoc_insertion_point(destructor:vlsir.tech.LayerPurpose)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LayerPurpose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.description_.Destroy();
}

void LayerPurpose::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LayerPurpose::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.tech.LayerPurpose)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.description_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LayerPurpose::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.tech.LayerPurpose.description"));
        } else
          goto handle_unusual;
        continue;
      // .vlsir.tech.LayerPurposeType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::vlsir::tech::LayerPurposeType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayerPurpose::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.tech.LayerPurpose)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.tech.LayerPurpose.description");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_description(), target);
  }

  // .vlsir.tech.LayerPurposeType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.tech.LayerPurpose)
  return target;
}

size_t LayerPurpose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.tech.LayerPurpose)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 1;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .vlsir.tech.LayerPurposeType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LayerPurpose::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LayerPurpose::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LayerPurpose::GetClassData() const { return &_class_data_; }


void LayerPurpose::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LayerPurpose*>(&to_msg);
  auto& from = static_cast<const LayerPurpose&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.tech.LayerPurpose)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LayerPurpose::CopyFrom(const LayerPurpose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.tech.LayerPurpose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerPurpose::IsInitialized() const {
  return true;
}

void LayerPurpose::InternalSwap(LayerPurpose* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LayerPurpose::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tech_2eproto_getter, &descriptor_table_tech_2eproto_once,
      file_level_metadata_tech_2eproto[2]);
}

// ===================================================================

class LayerInfo::_Internal {
 public:
  static const ::vlsir::tech::LayerPurpose& purpose(const LayerInfo* msg);
};

const ::vlsir::tech::LayerPurpose&
LayerInfo::_Internal::purpose(const LayerInfo* msg) {
  return *msg->_impl_.purpose_;
}
LayerInfo::LayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.tech.LayerInfo)
}
LayerInfo::LayerInfo(const LayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.purpose_){nullptr}
    , decltype(_impl_.index_){}
    , decltype(_impl_.sub_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_purpose()) {
    _this->_impl_.purpose_ = new ::vlsir::tech::LayerPurpose(*from._impl_.purpose_);
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sub_index_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.sub_index_));
  // @@protoc_insertion_point(copy_constructor:vlsir.tech.LayerInfo)
}

inline void LayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.purpose_){nullptr}
    , decltype(_impl_.index_){uint64_t{0u}}
    , decltype(_impl_.sub_index_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LayerInfo::~LayerInfo() {
  // @@protoc_insertion_point(destructor:vlsir.tech.LayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.purpose_;
}

void LayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.tech.LayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.purpose_ != nullptr) {
    delete _impl_.purpose_;
  }
  _impl_.purpose_ = nullptr;
  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sub_index_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.sub_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.tech.LayerInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // .vlsir.tech.LayerPurpose purpose = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_purpose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 index = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sub_index = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.sub_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.tech.LayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.tech.LayerInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .vlsir.tech.LayerPurpose purpose = 11;
  if (this->_internal_has_purpose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::purpose(this),
        _Internal::purpose(this).GetCachedSize(), target, stream);
  }

  // uint64 index = 21;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(21, this->_internal_index(), target);
  }

  // uint64 sub_index = 31;
  if (this->_internal_sub_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(31, this->_internal_sub_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.tech.LayerInfo)
  return target;
}

size_t LayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.tech.LayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .vlsir.tech.LayerPurpose purpose = 11;
  if (this->_internal_has_purpose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.purpose_);
  }

  // uint64 index = 21;
  if (this->_internal_index() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_index());
  }

  // uint64 sub_index = 31;
  if (this->_internal_sub_index() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_sub_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LayerInfo::GetClassData() const { return &_class_data_; }


void LayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LayerInfo*>(&to_msg);
  auto& from = static_cast<const LayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.tech.LayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_purpose()) {
    _this->_internal_mutable_purpose()->::vlsir::tech::LayerPurpose::MergeFrom(
        from._internal_purpose());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_sub_index() != 0) {
    _this->_internal_set_sub_index(from._internal_sub_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LayerInfo::CopyFrom(const LayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.tech.LayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerInfo::IsInitialized() const {
  return true;
}

void LayerInfo::InternalSwap(LayerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LayerInfo, _impl_.sub_index_)
      + sizeof(LayerInfo::_impl_.sub_index_)
      - PROTOBUF_FIELD_OFFSET(LayerInfo, _impl_.purpose_)>(
          reinterpret_cast<char*>(&_impl_.purpose_),
          reinterpret_cast<char*>(&other->_impl_.purpose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tech_2eproto_getter, &descriptor_table_tech_2eproto_once,
      file_level_metadata_tech_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tech
}  // namespace vlsir
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vlsir::tech::Technology*
Arena::CreateMaybeMessage< ::vlsir::tech::Technology >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::tech::Technology >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::tech::Package*
Arena::CreateMaybeMessage< ::vlsir::tech::Package >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::tech::Package >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::tech::LayerPurpose*
Arena::CreateMaybeMessage< ::vlsir::tech::LayerPurpose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::tech::LayerPurpose >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::tech::LayerInfo*
Arena::CreateMaybeMessage< ::vlsir::tech::LayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::tech::LayerInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
