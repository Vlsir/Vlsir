// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_geometry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_geometry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_geometry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_geometry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_geometry_2eproto;
namespace vlsirlol {
class Cell;
struct CellDefaultTypeInternal;
extern CellDefaultTypeInternal _Cell_default_instance_;
class Geometry;
struct GeometryDefaultTypeInternal;
extern GeometryDefaultTypeInternal _Geometry_default_instance_;
class Instance;
struct InstanceDefaultTypeInternal;
extern InstanceDefaultTypeInternal _Instance_default_instance_;
class Layer;
struct LayerDefaultTypeInternal;
extern LayerDefaultTypeInternal _Layer_default_instance_;
class LayeredShapes;
struct LayeredShapesDefaultTypeInternal;
extern LayeredShapesDefaultTypeInternal _LayeredShapes_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Polygon;
struct PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class QualifiedName;
struct QualifiedNameDefaultTypeInternal;
extern QualifiedNameDefaultTypeInternal _QualifiedName_default_instance_;
class Rectangle;
struct RectangleDefaultTypeInternal;
extern RectangleDefaultTypeInternal _Rectangle_default_instance_;
}  // namespace vlsirlol
PROTOBUF_NAMESPACE_OPEN
template<> ::vlsirlol::Cell* Arena::CreateMaybeMessage<::vlsirlol::Cell>(Arena*);
template<> ::vlsirlol::Geometry* Arena::CreateMaybeMessage<::vlsirlol::Geometry>(Arena*);
template<> ::vlsirlol::Instance* Arena::CreateMaybeMessage<::vlsirlol::Instance>(Arena*);
template<> ::vlsirlol::Layer* Arena::CreateMaybeMessage<::vlsirlol::Layer>(Arena*);
template<> ::vlsirlol::LayeredShapes* Arena::CreateMaybeMessage<::vlsirlol::LayeredShapes>(Arena*);
template<> ::vlsirlol::Point* Arena::CreateMaybeMessage<::vlsirlol::Point>(Arena*);
template<> ::vlsirlol::Polygon* Arena::CreateMaybeMessage<::vlsirlol::Polygon>(Arena*);
template<> ::vlsirlol::QualifiedName* Arena::CreateMaybeMessage<::vlsirlol::QualifiedName>(Arena*);
template<> ::vlsirlol::Rectangle* Arena::CreateMaybeMessage<::vlsirlol::Rectangle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vlsirlol {

// ===================================================================

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vlsirlol.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit constexpr Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Point& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vlsirlol.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int64 x = 1;
  void clear_x();
  int64_t x() const;
  void set_x(int64_t value);
  private:
  int64_t _internal_x() const;
  void _internal_set_x(int64_t value);
  public:

  // int64 y = 2;
  void clear_y();
  int64_t y() const;
  void set_y(int64_t value);
  private:
  int64_t _internal_y() const;
  void _internal_set_y(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:vlsirlol.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t x_;
  int64_t y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class Layer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vlsirlol.Layer) */ {
 public:
  inline Layer() : Layer(nullptr) {}
  ~Layer() override;
  explicit constexpr Layer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Layer(const Layer& from);
  Layer(Layer&& from) noexcept
    : Layer() {
    *this = ::std::move(from);
  }

  inline Layer& operator=(const Layer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Layer& operator=(Layer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Layer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Layer* internal_default_instance() {
    return reinterpret_cast<const Layer*>(
               &_Layer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Layer& a, Layer& b) {
    a.Swap(&b);
  }
  inline void Swap(Layer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Layer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Layer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Layer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Layer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Layer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Layer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vlsirlol.Layer";
  }
  protected:
  explicit Layer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberFieldNumber = 1,
    kAnotherNumberFieldNumber = 2,
  };
  // int64 number = 1;
  void clear_number();
  int64_t number() const;
  void set_number(int64_t value);
  private:
  int64_t _internal_number() const;
  void _internal_set_number(int64_t value);
  public:

  // int64 another_number = 2;
  void clear_another_number();
  int64_t another_number() const;
  void set_another_number(int64_t value);
  private:
  int64_t _internal_another_number() const;
  void _internal_set_another_number(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:vlsirlol.Layer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t number_;
  int64_t another_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class QualifiedName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vlsirlol.QualifiedName) */ {
 public:
  inline QualifiedName() : QualifiedName(nullptr) {}
  ~QualifiedName() override;
  explicit constexpr QualifiedName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QualifiedName(const QualifiedName& from);
  QualifiedName(QualifiedName&& from) noexcept
    : QualifiedName() {
    *this = ::std::move(from);
  }

  inline QualifiedName& operator=(const QualifiedName& from) {
    CopyFrom(from);
    return *this;
  }
  inline QualifiedName& operator=(QualifiedName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QualifiedName& default_instance() {
    return *internal_default_instance();
  }
  static inline const QualifiedName* internal_default_instance() {
    return reinterpret_cast<const QualifiedName*>(
               &_QualifiedName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QualifiedName& a, QualifiedName& b) {
    a.Swap(&b);
  }
  inline void Swap(QualifiedName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QualifiedName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QualifiedName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QualifiedName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QualifiedName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QualifiedName& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QualifiedName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vlsirlol.QualifiedName";
  }
  protected:
  explicit QualifiedName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string domain = 1;
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:vlsirlol.QualifiedName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class Rectangle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vlsirlol.Rectangle) */ {
 public:
  inline Rectangle() : Rectangle(nullptr) {}
  ~Rectangle() override;
  explicit constexpr Rectangle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rectangle(const Rectangle& from);
  Rectangle(Rectangle&& from) noexcept
    : Rectangle() {
    *this = ::std::move(from);
  }

  inline Rectangle& operator=(const Rectangle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rectangle& operator=(Rectangle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rectangle& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rectangle* internal_default_instance() {
    return reinterpret_cast<const Rectangle*>(
               &_Rectangle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Rectangle& a, Rectangle& b) {
    a.Swap(&b);
  }
  inline void Swap(Rectangle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rectangle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rectangle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rectangle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rectangle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Rectangle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rectangle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vlsirlol.Rectangle";
  }
  protected:
  explicit Rectangle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetFieldNumber = 1,
    kLowerLeftFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // string net = 1;
  void clear_net();
  const std::string& net() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_net(ArgT0&& arg0, ArgT... args);
  std::string* mutable_net();
  PROTOBUF_NODISCARD std::string* release_net();
  void set_allocated_net(std::string* net);
  private:
  const std::string& _internal_net() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_net(const std::string& value);
  std::string* _internal_mutable_net();
  public:

  // .vlsirlol.Point lower_left = 2;
  bool has_lower_left() const;
  private:
  bool _internal_has_lower_left() const;
  public:
  void clear_lower_left();
  const ::vlsirlol::Point& lower_left() const;
  PROTOBUF_NODISCARD ::vlsirlol::Point* release_lower_left();
  ::vlsirlol::Point* mutable_lower_left();
  void set_allocated_lower_left(::vlsirlol::Point* lower_left);
  private:
  const ::vlsirlol::Point& _internal_lower_left() const;
  ::vlsirlol::Point* _internal_mutable_lower_left();
  public:
  void unsafe_arena_set_allocated_lower_left(
      ::vlsirlol::Point* lower_left);
  ::vlsirlol::Point* unsafe_arena_release_lower_left();

  // int64 width = 3;
  void clear_width();
  int64_t width() const;
  void set_width(int64_t value);
  private:
  int64_t _internal_width() const;
  void _internal_set_width(int64_t value);
  public:

  // int64 height = 4;
  void clear_height();
  int64_t height() const;
  void set_height(int64_t value);
  private:
  int64_t _internal_height() const;
  void _internal_set_height(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:vlsirlol.Rectangle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr net_;
  ::vlsirlol::Point* lower_left_;
  int64_t width_;
  int64_t height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class Polygon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vlsirlol.Polygon) */ {
 public:
  inline Polygon() : Polygon(nullptr) {}
  ~Polygon() override;
  explicit constexpr Polygon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Polygon(const Polygon& from);
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon& operator=(Polygon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Polygon& default_instance() {
    return *internal_default_instance();
  }
  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }
  inline void Swap(Polygon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Polygon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Polygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Polygon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Polygon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Polygon& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vlsirlol.Polygon";
  }
  protected:
  explicit Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 2,
    kNetFieldNumber = 1,
  };
  // repeated .vlsirlol.Point vertices = 2;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::vlsirlol::Point* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::Point >*
      mutable_vertices();
  private:
  const ::vlsirlol::Point& _internal_vertices(int index) const;
  ::vlsirlol::Point* _internal_add_vertices();
  public:
  const ::vlsirlol::Point& vertices(int index) const;
  ::vlsirlol::Point* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::Point >&
      vertices() const;

  // string net = 1;
  void clear_net();
  const std::string& net() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_net(ArgT0&& arg0, ArgT... args);
  std::string* mutable_net();
  PROTOBUF_NODISCARD std::string* release_net();
  void set_allocated_net(std::string* net);
  private:
  const std::string& _internal_net() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_net(const std::string& value);
  std::string* _internal_mutable_net();
  public:

  // @@protoc_insertion_point(class_scope:vlsirlol.Polygon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::Point > vertices_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr net_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class LayeredShapes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vlsirlol.LayeredShapes) */ {
 public:
  inline LayeredShapes() : LayeredShapes(nullptr) {}
  ~LayeredShapes() override;
  explicit constexpr LayeredShapes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayeredShapes(const LayeredShapes& from);
  LayeredShapes(LayeredShapes&& from) noexcept
    : LayeredShapes() {
    *this = ::std::move(from);
  }

  inline LayeredShapes& operator=(const LayeredShapes& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayeredShapes& operator=(LayeredShapes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LayeredShapes& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayeredShapes* internal_default_instance() {
    return reinterpret_cast<const LayeredShapes*>(
               &_LayeredShapes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LayeredShapes& a, LayeredShapes& b) {
    a.Swap(&b);
  }
  inline void Swap(LayeredShapes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayeredShapes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayeredShapes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayeredShapes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LayeredShapes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LayeredShapes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayeredShapes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vlsirlol.LayeredShapes";
  }
  protected:
  explicit LayeredShapes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRectanglesFieldNumber = 2,
    kPolygonsFieldNumber = 3,
    kLayerFieldNumber = 1,
  };
  // repeated .vlsirlol.Rectangle rectangles = 2;
  int rectangles_size() const;
  private:
  int _internal_rectangles_size() const;
  public:
  void clear_rectangles();
  ::vlsirlol::Rectangle* mutable_rectangles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::Rectangle >*
      mutable_rectangles();
  private:
  const ::vlsirlol::Rectangle& _internal_rectangles(int index) const;
  ::vlsirlol::Rectangle* _internal_add_rectangles();
  public:
  const ::vlsirlol::Rectangle& rectangles(int index) const;
  ::vlsirlol::Rectangle* add_rectangles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::Rectangle >&
      rectangles() const;

  // repeated .vlsirlol.Polygon polygons = 3;
  int polygons_size() const;
  private:
  int _internal_polygons_size() const;
  public:
  void clear_polygons();
  ::vlsirlol::Polygon* mutable_polygons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::Polygon >*
      mutable_polygons();
  private:
  const ::vlsirlol::Polygon& _internal_polygons(int index) const;
  ::vlsirlol::Polygon* _internal_add_polygons();
  public:
  const ::vlsirlol::Polygon& polygons(int index) const;
  ::vlsirlol::Polygon* add_polygons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::Polygon >&
      polygons() const;

  // .vlsirlol.Layer layer = 1;
  bool has_layer() const;
  private:
  bool _internal_has_layer() const;
  public:
  void clear_layer();
  const ::vlsirlol::Layer& layer() const;
  PROTOBUF_NODISCARD ::vlsirlol::Layer* release_layer();
  ::vlsirlol::Layer* mutable_layer();
  void set_allocated_layer(::vlsirlol::Layer* layer);
  private:
  const ::vlsirlol::Layer& _internal_layer() const;
  ::vlsirlol::Layer* _internal_mutable_layer();
  public:
  void unsafe_arena_set_allocated_layer(
      ::vlsirlol::Layer* layer);
  ::vlsirlol::Layer* unsafe_arena_release_layer();

  // @@protoc_insertion_point(class_scope:vlsirlol.LayeredShapes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::Rectangle > rectangles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::Polygon > polygons_;
  ::vlsirlol::Layer* layer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class Cell final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vlsirlol.Cell) */ {
 public:
  inline Cell() : Cell(nullptr) {}
  ~Cell() override;
  explicit constexpr Cell(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Cell(const Cell& from);
  Cell(Cell&& from) noexcept
    : Cell() {
    *this = ::std::move(from);
  }

  inline Cell& operator=(const Cell& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cell& operator=(Cell&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Cell& default_instance() {
    return *internal_default_instance();
  }
  static inline const Cell* internal_default_instance() {
    return reinterpret_cast<const Cell*>(
               &_Cell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Cell& a, Cell& b) {
    a.Swap(&b);
  }
  inline void Swap(Cell* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Cell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Cell>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Cell& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Cell& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cell* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vlsirlol.Cell";
  }
  protected:
  explicit Cell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapesFieldNumber = 2,
    kInstancesFieldNumber = 3,
    kAuthorFieldNumber = 100,
    kCopyrightFieldNumber = 101,
    kNameFieldNumber = 1,
  };
  // repeated .vlsirlol.LayeredShapes shapes = 2;
  int shapes_size() const;
  private:
  int _internal_shapes_size() const;
  public:
  void clear_shapes();
  ::vlsirlol::LayeredShapes* mutable_shapes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::LayeredShapes >*
      mutable_shapes();
  private:
  const ::vlsirlol::LayeredShapes& _internal_shapes(int index) const;
  ::vlsirlol::LayeredShapes* _internal_add_shapes();
  public:
  const ::vlsirlol::LayeredShapes& shapes(int index) const;
  ::vlsirlol::LayeredShapes* add_shapes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::LayeredShapes >&
      shapes() const;

  // repeated .vlsirlol.Instance instances = 3;
  int instances_size() const;
  private:
  int _internal_instances_size() const;
  public:
  void clear_instances();
  ::vlsirlol::Instance* mutable_instances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::Instance >*
      mutable_instances();
  private:
  const ::vlsirlol::Instance& _internal_instances(int index) const;
  ::vlsirlol::Instance* _internal_add_instances();
  public:
  const ::vlsirlol::Instance& instances(int index) const;
  ::vlsirlol::Instance* add_instances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::Instance >&
      instances() const;

  // string author = 100;
  void clear_author();
  const std::string& author() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_author(ArgT0&& arg0, ArgT... args);
  std::string* mutable_author();
  PROTOBUF_NODISCARD std::string* release_author();
  void set_allocated_author(std::string* author);
  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(const std::string& value);
  std::string* _internal_mutable_author();
  public:

  // string copyright = 101;
  void clear_copyright();
  const std::string& copyright() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_copyright(ArgT0&& arg0, ArgT... args);
  std::string* mutable_copyright();
  PROTOBUF_NODISCARD std::string* release_copyright();
  void set_allocated_copyright(std::string* copyright);
  private:
  const std::string& _internal_copyright() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_copyright(const std::string& value);
  std::string* _internal_mutable_copyright();
  public:

  // .vlsirlol.QualifiedName name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const ::vlsirlol::QualifiedName& name() const;
  PROTOBUF_NODISCARD ::vlsirlol::QualifiedName* release_name();
  ::vlsirlol::QualifiedName* mutable_name();
  void set_allocated_name(::vlsirlol::QualifiedName* name);
  private:
  const ::vlsirlol::QualifiedName& _internal_name() const;
  ::vlsirlol::QualifiedName* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      ::vlsirlol::QualifiedName* name);
  ::vlsirlol::QualifiedName* unsafe_arena_release_name();

  // @@protoc_insertion_point(class_scope:vlsirlol.Cell)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::LayeredShapes > shapes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::Instance > instances_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr copyright_;
  ::vlsirlol::QualifiedName* name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class Instance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vlsirlol.Instance) */ {
 public:
  inline Instance() : Instance(nullptr) {}
  ~Instance() override;
  explicit constexpr Instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Instance(const Instance& from);
  Instance(Instance&& from) noexcept
    : Instance() {
    *this = ::std::move(from);
  }

  inline Instance& operator=(const Instance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Instance& operator=(Instance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Instance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Instance* internal_default_instance() {
    return reinterpret_cast<const Instance*>(
               &_Instance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Instance& a, Instance& b) {
    a.Swap(&b);
  }
  inline void Swap(Instance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Instance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Instance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Instance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Instance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Instance& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Instance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vlsirlol.Instance";
  }
  protected:
  explicit Instance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCellNameFieldNumber = 3,
    kLowerLeftFieldNumber = 5,
    kRotationClockwiseDegreesFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .vlsirlol.QualifiedName cell_name = 3;
  bool has_cell_name() const;
  private:
  bool _internal_has_cell_name() const;
  public:
  void clear_cell_name();
  const ::vlsirlol::QualifiedName& cell_name() const;
  PROTOBUF_NODISCARD ::vlsirlol::QualifiedName* release_cell_name();
  ::vlsirlol::QualifiedName* mutable_cell_name();
  void set_allocated_cell_name(::vlsirlol::QualifiedName* cell_name);
  private:
  const ::vlsirlol::QualifiedName& _internal_cell_name() const;
  ::vlsirlol::QualifiedName* _internal_mutable_cell_name();
  public:
  void unsafe_arena_set_allocated_cell_name(
      ::vlsirlol::QualifiedName* cell_name);
  ::vlsirlol::QualifiedName* unsafe_arena_release_cell_name();

  // .vlsirlol.Point lower_left = 5;
  bool has_lower_left() const;
  private:
  bool _internal_has_lower_left() const;
  public:
  void clear_lower_left();
  const ::vlsirlol::Point& lower_left() const;
  PROTOBUF_NODISCARD ::vlsirlol::Point* release_lower_left();
  ::vlsirlol::Point* mutable_lower_left();
  void set_allocated_lower_left(::vlsirlol::Point* lower_left);
  private:
  const ::vlsirlol::Point& _internal_lower_left() const;
  ::vlsirlol::Point* _internal_mutable_lower_left();
  public:
  void unsafe_arena_set_allocated_lower_left(
      ::vlsirlol::Point* lower_left);
  ::vlsirlol::Point* unsafe_arena_release_lower_left();

  // int32 rotation_clockwise_degrees = 4;
  void clear_rotation_clockwise_degrees();
  int32_t rotation_clockwise_degrees() const;
  void set_rotation_clockwise_degrees(int32_t value);
  private:
  int32_t _internal_rotation_clockwise_degrees() const;
  void _internal_set_rotation_clockwise_degrees(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:vlsirlol.Instance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::vlsirlol::QualifiedName* cell_name_;
  ::vlsirlol::Point* lower_left_;
  int32_t rotation_clockwise_degrees_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class Geometry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vlsirlol.Geometry) */ {
 public:
  inline Geometry() : Geometry(nullptr) {}
  ~Geometry() override;
  explicit constexpr Geometry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Geometry(const Geometry& from);
  Geometry(Geometry&& from) noexcept
    : Geometry() {
    *this = ::std::move(from);
  }

  inline Geometry& operator=(const Geometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Geometry& operator=(Geometry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Geometry& default_instance() {
    return *internal_default_instance();
  }
  static inline const Geometry* internal_default_instance() {
    return reinterpret_cast<const Geometry*>(
               &_Geometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Geometry& a, Geometry& b) {
    a.Swap(&b);
  }
  inline void Swap(Geometry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Geometry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Geometry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Geometry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Geometry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Geometry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geometry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vlsirlol.Geometry";
  }
  protected:
  explicit Geometry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellsFieldNumber = 2,
    kTopInstanceFieldNumber = 1,
  };
  // repeated .vlsirlol.Cell cells = 2;
  int cells_size() const;
  private:
  int _internal_cells_size() const;
  public:
  void clear_cells();
  ::vlsirlol::Cell* mutable_cells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::Cell >*
      mutable_cells();
  private:
  const ::vlsirlol::Cell& _internal_cells(int index) const;
  ::vlsirlol::Cell* _internal_add_cells();
  public:
  const ::vlsirlol::Cell& cells(int index) const;
  ::vlsirlol::Cell* add_cells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::Cell >&
      cells() const;

  // .vlsirlol.Instance top_instance = 1;
  bool has_top_instance() const;
  private:
  bool _internal_has_top_instance() const;
  public:
  void clear_top_instance();
  const ::vlsirlol::Instance& top_instance() const;
  PROTOBUF_NODISCARD ::vlsirlol::Instance* release_top_instance();
  ::vlsirlol::Instance* mutable_top_instance();
  void set_allocated_top_instance(::vlsirlol::Instance* top_instance);
  private:
  const ::vlsirlol::Instance& _internal_top_instance() const;
  ::vlsirlol::Instance* _internal_mutable_top_instance();
  public:
  void unsafe_arena_set_allocated_top_instance(
      ::vlsirlol::Instance* top_instance);
  ::vlsirlol::Instance* unsafe_arena_release_top_instance();

  // @@protoc_insertion_point(class_scope:vlsirlol.Geometry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::Cell > cells_;
  ::vlsirlol::Instance* top_instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// int64 x = 1;
inline void Point::clear_x() {
  x_ = int64_t{0};
}
inline int64_t Point::_internal_x() const {
  return x_;
}
inline int64_t Point::x() const {
  // @@protoc_insertion_point(field_get:vlsirlol.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(int64_t value) {
  
  x_ = value;
}
inline void Point::set_x(int64_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:vlsirlol.Point.x)
}

// int64 y = 2;
inline void Point::clear_y() {
  y_ = int64_t{0};
}
inline int64_t Point::_internal_y() const {
  return y_;
}
inline int64_t Point::y() const {
  // @@protoc_insertion_point(field_get:vlsirlol.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(int64_t value) {
  
  y_ = value;
}
inline void Point::set_y(int64_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:vlsirlol.Point.y)
}

// -------------------------------------------------------------------

// Layer

// int64 number = 1;
inline void Layer::clear_number() {
  number_ = int64_t{0};
}
inline int64_t Layer::_internal_number() const {
  return number_;
}
inline int64_t Layer::number() const {
  // @@protoc_insertion_point(field_get:vlsirlol.Layer.number)
  return _internal_number();
}
inline void Layer::_internal_set_number(int64_t value) {
  
  number_ = value;
}
inline void Layer::set_number(int64_t value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:vlsirlol.Layer.number)
}

// int64 another_number = 2;
inline void Layer::clear_another_number() {
  another_number_ = int64_t{0};
}
inline int64_t Layer::_internal_another_number() const {
  return another_number_;
}
inline int64_t Layer::another_number() const {
  // @@protoc_insertion_point(field_get:vlsirlol.Layer.another_number)
  return _internal_another_number();
}
inline void Layer::_internal_set_another_number(int64_t value) {
  
  another_number_ = value;
}
inline void Layer::set_another_number(int64_t value) {
  _internal_set_another_number(value);
  // @@protoc_insertion_point(field_set:vlsirlol.Layer.another_number)
}

// -------------------------------------------------------------------

// QualifiedName

// string domain = 1;
inline void QualifiedName::clear_domain() {
  domain_.ClearToEmpty();
}
inline const std::string& QualifiedName::domain() const {
  // @@protoc_insertion_point(field_get:vlsirlol.QualifiedName.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QualifiedName::set_domain(ArgT0&& arg0, ArgT... args) {
 
 domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vlsirlol.QualifiedName.domain)
}
inline std::string* QualifiedName::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:vlsirlol.QualifiedName.domain)
  return _s;
}
inline const std::string& QualifiedName::_internal_domain() const {
  return domain_.Get();
}
inline void QualifiedName::_internal_set_domain(const std::string& value) {
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* QualifiedName::_internal_mutable_domain() {
  
  return domain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* QualifiedName::release_domain() {
  // @@protoc_insertion_point(field_release:vlsirlol.QualifiedName.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void QualifiedName::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (domain_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vlsirlol.QualifiedName.domain)
}

// string name = 2;
inline void QualifiedName::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& QualifiedName::name() const {
  // @@protoc_insertion_point(field_get:vlsirlol.QualifiedName.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QualifiedName::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vlsirlol.QualifiedName.name)
}
inline std::string* QualifiedName::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:vlsirlol.QualifiedName.name)
  return _s;
}
inline const std::string& QualifiedName::_internal_name() const {
  return name_.Get();
}
inline void QualifiedName::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* QualifiedName::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* QualifiedName::release_name() {
  // @@protoc_insertion_point(field_release:vlsirlol.QualifiedName.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void QualifiedName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vlsirlol.QualifiedName.name)
}

// -------------------------------------------------------------------

// Rectangle

// string net = 1;
inline void Rectangle::clear_net() {
  net_.ClearToEmpty();
}
inline const std::string& Rectangle::net() const {
  // @@protoc_insertion_point(field_get:vlsirlol.Rectangle.net)
  return _internal_net();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Rectangle::set_net(ArgT0&& arg0, ArgT... args) {
 
 net_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vlsirlol.Rectangle.net)
}
inline std::string* Rectangle::mutable_net() {
  std::string* _s = _internal_mutable_net();
  // @@protoc_insertion_point(field_mutable:vlsirlol.Rectangle.net)
  return _s;
}
inline const std::string& Rectangle::_internal_net() const {
  return net_.Get();
}
inline void Rectangle::_internal_set_net(const std::string& value) {
  
  net_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Rectangle::_internal_mutable_net() {
  
  return net_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Rectangle::release_net() {
  // @@protoc_insertion_point(field_release:vlsirlol.Rectangle.net)
  return net_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Rectangle::set_allocated_net(std::string* net) {
  if (net != nullptr) {
    
  } else {
    
  }
  net_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), net,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (net_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    net_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vlsirlol.Rectangle.net)
}

// .vlsirlol.Point lower_left = 2;
inline bool Rectangle::_internal_has_lower_left() const {
  return this != internal_default_instance() && lower_left_ != nullptr;
}
inline bool Rectangle::has_lower_left() const {
  return _internal_has_lower_left();
}
inline void Rectangle::clear_lower_left() {
  if (GetArenaForAllocation() == nullptr && lower_left_ != nullptr) {
    delete lower_left_;
  }
  lower_left_ = nullptr;
}
inline const ::vlsirlol::Point& Rectangle::_internal_lower_left() const {
  const ::vlsirlol::Point* p = lower_left_;
  return p != nullptr ? *p : reinterpret_cast<const ::vlsirlol::Point&>(
      ::vlsirlol::_Point_default_instance_);
}
inline const ::vlsirlol::Point& Rectangle::lower_left() const {
  // @@protoc_insertion_point(field_get:vlsirlol.Rectangle.lower_left)
  return _internal_lower_left();
}
inline void Rectangle::unsafe_arena_set_allocated_lower_left(
    ::vlsirlol::Point* lower_left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lower_left_);
  }
  lower_left_ = lower_left;
  if (lower_left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vlsirlol.Rectangle.lower_left)
}
inline ::vlsirlol::Point* Rectangle::release_lower_left() {
  
  ::vlsirlol::Point* temp = lower_left_;
  lower_left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vlsirlol::Point* Rectangle::unsafe_arena_release_lower_left() {
  // @@protoc_insertion_point(field_release:vlsirlol.Rectangle.lower_left)
  
  ::vlsirlol::Point* temp = lower_left_;
  lower_left_ = nullptr;
  return temp;
}
inline ::vlsirlol::Point* Rectangle::_internal_mutable_lower_left() {
  
  if (lower_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::vlsirlol::Point>(GetArenaForAllocation());
    lower_left_ = p;
  }
  return lower_left_;
}
inline ::vlsirlol::Point* Rectangle::mutable_lower_left() {
  ::vlsirlol::Point* _msg = _internal_mutable_lower_left();
  // @@protoc_insertion_point(field_mutable:vlsirlol.Rectangle.lower_left)
  return _msg;
}
inline void Rectangle::set_allocated_lower_left(::vlsirlol::Point* lower_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete lower_left_;
  }
  if (lower_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::vlsirlol::Point>::GetOwningArena(lower_left);
    if (message_arena != submessage_arena) {
      lower_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lower_left, submessage_arena);
    }
    
  } else {
    
  }
  lower_left_ = lower_left;
  // @@protoc_insertion_point(field_set_allocated:vlsirlol.Rectangle.lower_left)
}

// int64 width = 3;
inline void Rectangle::clear_width() {
  width_ = int64_t{0};
}
inline int64_t Rectangle::_internal_width() const {
  return width_;
}
inline int64_t Rectangle::width() const {
  // @@protoc_insertion_point(field_get:vlsirlol.Rectangle.width)
  return _internal_width();
}
inline void Rectangle::_internal_set_width(int64_t value) {
  
  width_ = value;
}
inline void Rectangle::set_width(int64_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:vlsirlol.Rectangle.width)
}

// int64 height = 4;
inline void Rectangle::clear_height() {
  height_ = int64_t{0};
}
inline int64_t Rectangle::_internal_height() const {
  return height_;
}
inline int64_t Rectangle::height() const {
  // @@protoc_insertion_point(field_get:vlsirlol.Rectangle.height)
  return _internal_height();
}
inline void Rectangle::_internal_set_height(int64_t value) {
  
  height_ = value;
}
inline void Rectangle::set_height(int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:vlsirlol.Rectangle.height)
}

// -------------------------------------------------------------------

// Polygon

// string net = 1;
inline void Polygon::clear_net() {
  net_.ClearToEmpty();
}
inline const std::string& Polygon::net() const {
  // @@protoc_insertion_point(field_get:vlsirlol.Polygon.net)
  return _internal_net();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Polygon::set_net(ArgT0&& arg0, ArgT... args) {
 
 net_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vlsirlol.Polygon.net)
}
inline std::string* Polygon::mutable_net() {
  std::string* _s = _internal_mutable_net();
  // @@protoc_insertion_point(field_mutable:vlsirlol.Polygon.net)
  return _s;
}
inline const std::string& Polygon::_internal_net() const {
  return net_.Get();
}
inline void Polygon::_internal_set_net(const std::string& value) {
  
  net_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Polygon::_internal_mutable_net() {
  
  return net_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Polygon::release_net() {
  // @@protoc_insertion_point(field_release:vlsirlol.Polygon.net)
  return net_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Polygon::set_allocated_net(std::string* net) {
  if (net != nullptr) {
    
  } else {
    
  }
  net_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), net,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (net_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    net_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vlsirlol.Polygon.net)
}

// repeated .vlsirlol.Point vertices = 2;
inline int Polygon::_internal_vertices_size() const {
  return vertices_.size();
}
inline int Polygon::vertices_size() const {
  return _internal_vertices_size();
}
inline void Polygon::clear_vertices() {
  vertices_.Clear();
}
inline ::vlsirlol::Point* Polygon::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:vlsirlol.Polygon.vertices)
  return vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::Point >*
Polygon::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:vlsirlol.Polygon.vertices)
  return &vertices_;
}
inline const ::vlsirlol::Point& Polygon::_internal_vertices(int index) const {
  return vertices_.Get(index);
}
inline const ::vlsirlol::Point& Polygon::vertices(int index) const {
  // @@protoc_insertion_point(field_get:vlsirlol.Polygon.vertices)
  return _internal_vertices(index);
}
inline ::vlsirlol::Point* Polygon::_internal_add_vertices() {
  return vertices_.Add();
}
inline ::vlsirlol::Point* Polygon::add_vertices() {
  ::vlsirlol::Point* _add = _internal_add_vertices();
  // @@protoc_insertion_point(field_add:vlsirlol.Polygon.vertices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::Point >&
Polygon::vertices() const {
  // @@protoc_insertion_point(field_list:vlsirlol.Polygon.vertices)
  return vertices_;
}

// -------------------------------------------------------------------

// LayeredShapes

// .vlsirlol.Layer layer = 1;
inline bool LayeredShapes::_internal_has_layer() const {
  return this != internal_default_instance() && layer_ != nullptr;
}
inline bool LayeredShapes::has_layer() const {
  return _internal_has_layer();
}
inline void LayeredShapes::clear_layer() {
  if (GetArenaForAllocation() == nullptr && layer_ != nullptr) {
    delete layer_;
  }
  layer_ = nullptr;
}
inline const ::vlsirlol::Layer& LayeredShapes::_internal_layer() const {
  const ::vlsirlol::Layer* p = layer_;
  return p != nullptr ? *p : reinterpret_cast<const ::vlsirlol::Layer&>(
      ::vlsirlol::_Layer_default_instance_);
}
inline const ::vlsirlol::Layer& LayeredShapes::layer() const {
  // @@protoc_insertion_point(field_get:vlsirlol.LayeredShapes.layer)
  return _internal_layer();
}
inline void LayeredShapes::unsafe_arena_set_allocated_layer(
    ::vlsirlol::Layer* layer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(layer_);
  }
  layer_ = layer;
  if (layer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vlsirlol.LayeredShapes.layer)
}
inline ::vlsirlol::Layer* LayeredShapes::release_layer() {
  
  ::vlsirlol::Layer* temp = layer_;
  layer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vlsirlol::Layer* LayeredShapes::unsafe_arena_release_layer() {
  // @@protoc_insertion_point(field_release:vlsirlol.LayeredShapes.layer)
  
  ::vlsirlol::Layer* temp = layer_;
  layer_ = nullptr;
  return temp;
}
inline ::vlsirlol::Layer* LayeredShapes::_internal_mutable_layer() {
  
  if (layer_ == nullptr) {
    auto* p = CreateMaybeMessage<::vlsirlol::Layer>(GetArenaForAllocation());
    layer_ = p;
  }
  return layer_;
}
inline ::vlsirlol::Layer* LayeredShapes::mutable_layer() {
  ::vlsirlol::Layer* _msg = _internal_mutable_layer();
  // @@protoc_insertion_point(field_mutable:vlsirlol.LayeredShapes.layer)
  return _msg;
}
inline void LayeredShapes::set_allocated_layer(::vlsirlol::Layer* layer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete layer_;
  }
  if (layer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::vlsirlol::Layer>::GetOwningArena(layer);
    if (message_arena != submessage_arena) {
      layer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layer, submessage_arena);
    }
    
  } else {
    
  }
  layer_ = layer;
  // @@protoc_insertion_point(field_set_allocated:vlsirlol.LayeredShapes.layer)
}

// repeated .vlsirlol.Rectangle rectangles = 2;
inline int LayeredShapes::_internal_rectangles_size() const {
  return rectangles_.size();
}
inline int LayeredShapes::rectangles_size() const {
  return _internal_rectangles_size();
}
inline void LayeredShapes::clear_rectangles() {
  rectangles_.Clear();
}
inline ::vlsirlol::Rectangle* LayeredShapes::mutable_rectangles(int index) {
  // @@protoc_insertion_point(field_mutable:vlsirlol.LayeredShapes.rectangles)
  return rectangles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::Rectangle >*
LayeredShapes::mutable_rectangles() {
  // @@protoc_insertion_point(field_mutable_list:vlsirlol.LayeredShapes.rectangles)
  return &rectangles_;
}
inline const ::vlsirlol::Rectangle& LayeredShapes::_internal_rectangles(int index) const {
  return rectangles_.Get(index);
}
inline const ::vlsirlol::Rectangle& LayeredShapes::rectangles(int index) const {
  // @@protoc_insertion_point(field_get:vlsirlol.LayeredShapes.rectangles)
  return _internal_rectangles(index);
}
inline ::vlsirlol::Rectangle* LayeredShapes::_internal_add_rectangles() {
  return rectangles_.Add();
}
inline ::vlsirlol::Rectangle* LayeredShapes::add_rectangles() {
  ::vlsirlol::Rectangle* _add = _internal_add_rectangles();
  // @@protoc_insertion_point(field_add:vlsirlol.LayeredShapes.rectangles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::Rectangle >&
LayeredShapes::rectangles() const {
  // @@protoc_insertion_point(field_list:vlsirlol.LayeredShapes.rectangles)
  return rectangles_;
}

// repeated .vlsirlol.Polygon polygons = 3;
inline int LayeredShapes::_internal_polygons_size() const {
  return polygons_.size();
}
inline int LayeredShapes::polygons_size() const {
  return _internal_polygons_size();
}
inline void LayeredShapes::clear_polygons() {
  polygons_.Clear();
}
inline ::vlsirlol::Polygon* LayeredShapes::mutable_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:vlsirlol.LayeredShapes.polygons)
  return polygons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::Polygon >*
LayeredShapes::mutable_polygons() {
  // @@protoc_insertion_point(field_mutable_list:vlsirlol.LayeredShapes.polygons)
  return &polygons_;
}
inline const ::vlsirlol::Polygon& LayeredShapes::_internal_polygons(int index) const {
  return polygons_.Get(index);
}
inline const ::vlsirlol::Polygon& LayeredShapes::polygons(int index) const {
  // @@protoc_insertion_point(field_get:vlsirlol.LayeredShapes.polygons)
  return _internal_polygons(index);
}
inline ::vlsirlol::Polygon* LayeredShapes::_internal_add_polygons() {
  return polygons_.Add();
}
inline ::vlsirlol::Polygon* LayeredShapes::add_polygons() {
  ::vlsirlol::Polygon* _add = _internal_add_polygons();
  // @@protoc_insertion_point(field_add:vlsirlol.LayeredShapes.polygons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::Polygon >&
LayeredShapes::polygons() const {
  // @@protoc_insertion_point(field_list:vlsirlol.LayeredShapes.polygons)
  return polygons_;
}

// -------------------------------------------------------------------

// Cell

// .vlsirlol.QualifiedName name = 1;
inline bool Cell::_internal_has_name() const {
  return this != internal_default_instance() && name_ != nullptr;
}
inline bool Cell::has_name() const {
  return _internal_has_name();
}
inline void Cell::clear_name() {
  if (GetArenaForAllocation() == nullptr && name_ != nullptr) {
    delete name_;
  }
  name_ = nullptr;
}
inline const ::vlsirlol::QualifiedName& Cell::_internal_name() const {
  const ::vlsirlol::QualifiedName* p = name_;
  return p != nullptr ? *p : reinterpret_cast<const ::vlsirlol::QualifiedName&>(
      ::vlsirlol::_QualifiedName_default_instance_);
}
inline const ::vlsirlol::QualifiedName& Cell::name() const {
  // @@protoc_insertion_point(field_get:vlsirlol.Cell.name)
  return _internal_name();
}
inline void Cell::unsafe_arena_set_allocated_name(
    ::vlsirlol::QualifiedName* name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vlsirlol.Cell.name)
}
inline ::vlsirlol::QualifiedName* Cell::release_name() {
  
  ::vlsirlol::QualifiedName* temp = name_;
  name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vlsirlol::QualifiedName* Cell::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:vlsirlol.Cell.name)
  
  ::vlsirlol::QualifiedName* temp = name_;
  name_ = nullptr;
  return temp;
}
inline ::vlsirlol::QualifiedName* Cell::_internal_mutable_name() {
  
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<::vlsirlol::QualifiedName>(GetArenaForAllocation());
    name_ = p;
  }
  return name_;
}
inline ::vlsirlol::QualifiedName* Cell::mutable_name() {
  ::vlsirlol::QualifiedName* _msg = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:vlsirlol.Cell.name)
  return _msg;
}
inline void Cell::set_allocated_name(::vlsirlol::QualifiedName* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete name_;
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::vlsirlol::QualifiedName>::GetOwningArena(name);
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:vlsirlol.Cell.name)
}

// repeated .vlsirlol.LayeredShapes shapes = 2;
inline int Cell::_internal_shapes_size() const {
  return shapes_.size();
}
inline int Cell::shapes_size() const {
  return _internal_shapes_size();
}
inline void Cell::clear_shapes() {
  shapes_.Clear();
}
inline ::vlsirlol::LayeredShapes* Cell::mutable_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:vlsirlol.Cell.shapes)
  return shapes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::LayeredShapes >*
Cell::mutable_shapes() {
  // @@protoc_insertion_point(field_mutable_list:vlsirlol.Cell.shapes)
  return &shapes_;
}
inline const ::vlsirlol::LayeredShapes& Cell::_internal_shapes(int index) const {
  return shapes_.Get(index);
}
inline const ::vlsirlol::LayeredShapes& Cell::shapes(int index) const {
  // @@protoc_insertion_point(field_get:vlsirlol.Cell.shapes)
  return _internal_shapes(index);
}
inline ::vlsirlol::LayeredShapes* Cell::_internal_add_shapes() {
  return shapes_.Add();
}
inline ::vlsirlol::LayeredShapes* Cell::add_shapes() {
  ::vlsirlol::LayeredShapes* _add = _internal_add_shapes();
  // @@protoc_insertion_point(field_add:vlsirlol.Cell.shapes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::LayeredShapes >&
Cell::shapes() const {
  // @@protoc_insertion_point(field_list:vlsirlol.Cell.shapes)
  return shapes_;
}

// repeated .vlsirlol.Instance instances = 3;
inline int Cell::_internal_instances_size() const {
  return instances_.size();
}
inline int Cell::instances_size() const {
  return _internal_instances_size();
}
inline void Cell::clear_instances() {
  instances_.Clear();
}
inline ::vlsirlol::Instance* Cell::mutable_instances(int index) {
  // @@protoc_insertion_point(field_mutable:vlsirlol.Cell.instances)
  return instances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::Instance >*
Cell::mutable_instances() {
  // @@protoc_insertion_point(field_mutable_list:vlsirlol.Cell.instances)
  return &instances_;
}
inline const ::vlsirlol::Instance& Cell::_internal_instances(int index) const {
  return instances_.Get(index);
}
inline const ::vlsirlol::Instance& Cell::instances(int index) const {
  // @@protoc_insertion_point(field_get:vlsirlol.Cell.instances)
  return _internal_instances(index);
}
inline ::vlsirlol::Instance* Cell::_internal_add_instances() {
  return instances_.Add();
}
inline ::vlsirlol::Instance* Cell::add_instances() {
  ::vlsirlol::Instance* _add = _internal_add_instances();
  // @@protoc_insertion_point(field_add:vlsirlol.Cell.instances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::Instance >&
Cell::instances() const {
  // @@protoc_insertion_point(field_list:vlsirlol.Cell.instances)
  return instances_;
}

// string author = 100;
inline void Cell::clear_author() {
  author_.ClearToEmpty();
}
inline const std::string& Cell::author() const {
  // @@protoc_insertion_point(field_get:vlsirlol.Cell.author)
  return _internal_author();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Cell::set_author(ArgT0&& arg0, ArgT... args) {
 
 author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vlsirlol.Cell.author)
}
inline std::string* Cell::mutable_author() {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:vlsirlol.Cell.author)
  return _s;
}
inline const std::string& Cell::_internal_author() const {
  return author_.Get();
}
inline void Cell::_internal_set_author(const std::string& value) {
  
  author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Cell::_internal_mutable_author() {
  
  return author_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Cell::release_author() {
  // @@protoc_insertion_point(field_release:vlsirlol.Cell.author)
  return author_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Cell::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    
  } else {
    
  }
  author_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), author,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (author_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    author_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vlsirlol.Cell.author)
}

// string copyright = 101;
inline void Cell::clear_copyright() {
  copyright_.ClearToEmpty();
}
inline const std::string& Cell::copyright() const {
  // @@protoc_insertion_point(field_get:vlsirlol.Cell.copyright)
  return _internal_copyright();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Cell::set_copyright(ArgT0&& arg0, ArgT... args) {
 
 copyright_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vlsirlol.Cell.copyright)
}
inline std::string* Cell::mutable_copyright() {
  std::string* _s = _internal_mutable_copyright();
  // @@protoc_insertion_point(field_mutable:vlsirlol.Cell.copyright)
  return _s;
}
inline const std::string& Cell::_internal_copyright() const {
  return copyright_.Get();
}
inline void Cell::_internal_set_copyright(const std::string& value) {
  
  copyright_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Cell::_internal_mutable_copyright() {
  
  return copyright_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Cell::release_copyright() {
  // @@protoc_insertion_point(field_release:vlsirlol.Cell.copyright)
  return copyright_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Cell::set_allocated_copyright(std::string* copyright) {
  if (copyright != nullptr) {
    
  } else {
    
  }
  copyright_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), copyright,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (copyright_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    copyright_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vlsirlol.Cell.copyright)
}

// -------------------------------------------------------------------

// Instance

// string name = 1;
inline void Instance::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Instance::name() const {
  // @@protoc_insertion_point(field_get:vlsirlol.Instance.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Instance::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vlsirlol.Instance.name)
}
inline std::string* Instance::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:vlsirlol.Instance.name)
  return _s;
}
inline const std::string& Instance::_internal_name() const {
  return name_.Get();
}
inline void Instance::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Instance::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Instance::release_name() {
  // @@protoc_insertion_point(field_release:vlsirlol.Instance.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Instance::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vlsirlol.Instance.name)
}

// .vlsirlol.QualifiedName cell_name = 3;
inline bool Instance::_internal_has_cell_name() const {
  return this != internal_default_instance() && cell_name_ != nullptr;
}
inline bool Instance::has_cell_name() const {
  return _internal_has_cell_name();
}
inline void Instance::clear_cell_name() {
  if (GetArenaForAllocation() == nullptr && cell_name_ != nullptr) {
    delete cell_name_;
  }
  cell_name_ = nullptr;
}
inline const ::vlsirlol::QualifiedName& Instance::_internal_cell_name() const {
  const ::vlsirlol::QualifiedName* p = cell_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::vlsirlol::QualifiedName&>(
      ::vlsirlol::_QualifiedName_default_instance_);
}
inline const ::vlsirlol::QualifiedName& Instance::cell_name() const {
  // @@protoc_insertion_point(field_get:vlsirlol.Instance.cell_name)
  return _internal_cell_name();
}
inline void Instance::unsafe_arena_set_allocated_cell_name(
    ::vlsirlol::QualifiedName* cell_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_name_);
  }
  cell_name_ = cell_name;
  if (cell_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vlsirlol.Instance.cell_name)
}
inline ::vlsirlol::QualifiedName* Instance::release_cell_name() {
  
  ::vlsirlol::QualifiedName* temp = cell_name_;
  cell_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vlsirlol::QualifiedName* Instance::unsafe_arena_release_cell_name() {
  // @@protoc_insertion_point(field_release:vlsirlol.Instance.cell_name)
  
  ::vlsirlol::QualifiedName* temp = cell_name_;
  cell_name_ = nullptr;
  return temp;
}
inline ::vlsirlol::QualifiedName* Instance::_internal_mutable_cell_name() {
  
  if (cell_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::vlsirlol::QualifiedName>(GetArenaForAllocation());
    cell_name_ = p;
  }
  return cell_name_;
}
inline ::vlsirlol::QualifiedName* Instance::mutable_cell_name() {
  ::vlsirlol::QualifiedName* _msg = _internal_mutable_cell_name();
  // @@protoc_insertion_point(field_mutable:vlsirlol.Instance.cell_name)
  return _msg;
}
inline void Instance::set_allocated_cell_name(::vlsirlol::QualifiedName* cell_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cell_name_;
  }
  if (cell_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::vlsirlol::QualifiedName>::GetOwningArena(cell_name);
    if (message_arena != submessage_arena) {
      cell_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_name, submessage_arena);
    }
    
  } else {
    
  }
  cell_name_ = cell_name;
  // @@protoc_insertion_point(field_set_allocated:vlsirlol.Instance.cell_name)
}

// int32 rotation_clockwise_degrees = 4;
inline void Instance::clear_rotation_clockwise_degrees() {
  rotation_clockwise_degrees_ = 0;
}
inline int32_t Instance::_internal_rotation_clockwise_degrees() const {
  return rotation_clockwise_degrees_;
}
inline int32_t Instance::rotation_clockwise_degrees() const {
  // @@protoc_insertion_point(field_get:vlsirlol.Instance.rotation_clockwise_degrees)
  return _internal_rotation_clockwise_degrees();
}
inline void Instance::_internal_set_rotation_clockwise_degrees(int32_t value) {
  
  rotation_clockwise_degrees_ = value;
}
inline void Instance::set_rotation_clockwise_degrees(int32_t value) {
  _internal_set_rotation_clockwise_degrees(value);
  // @@protoc_insertion_point(field_set:vlsirlol.Instance.rotation_clockwise_degrees)
}

// .vlsirlol.Point lower_left = 5;
inline bool Instance::_internal_has_lower_left() const {
  return this != internal_default_instance() && lower_left_ != nullptr;
}
inline bool Instance::has_lower_left() const {
  return _internal_has_lower_left();
}
inline void Instance::clear_lower_left() {
  if (GetArenaForAllocation() == nullptr && lower_left_ != nullptr) {
    delete lower_left_;
  }
  lower_left_ = nullptr;
}
inline const ::vlsirlol::Point& Instance::_internal_lower_left() const {
  const ::vlsirlol::Point* p = lower_left_;
  return p != nullptr ? *p : reinterpret_cast<const ::vlsirlol::Point&>(
      ::vlsirlol::_Point_default_instance_);
}
inline const ::vlsirlol::Point& Instance::lower_left() const {
  // @@protoc_insertion_point(field_get:vlsirlol.Instance.lower_left)
  return _internal_lower_left();
}
inline void Instance::unsafe_arena_set_allocated_lower_left(
    ::vlsirlol::Point* lower_left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lower_left_);
  }
  lower_left_ = lower_left;
  if (lower_left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vlsirlol.Instance.lower_left)
}
inline ::vlsirlol::Point* Instance::release_lower_left() {
  
  ::vlsirlol::Point* temp = lower_left_;
  lower_left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vlsirlol::Point* Instance::unsafe_arena_release_lower_left() {
  // @@protoc_insertion_point(field_release:vlsirlol.Instance.lower_left)
  
  ::vlsirlol::Point* temp = lower_left_;
  lower_left_ = nullptr;
  return temp;
}
inline ::vlsirlol::Point* Instance::_internal_mutable_lower_left() {
  
  if (lower_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::vlsirlol::Point>(GetArenaForAllocation());
    lower_left_ = p;
  }
  return lower_left_;
}
inline ::vlsirlol::Point* Instance::mutable_lower_left() {
  ::vlsirlol::Point* _msg = _internal_mutable_lower_left();
  // @@protoc_insertion_point(field_mutable:vlsirlol.Instance.lower_left)
  return _msg;
}
inline void Instance::set_allocated_lower_left(::vlsirlol::Point* lower_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete lower_left_;
  }
  if (lower_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::vlsirlol::Point>::GetOwningArena(lower_left);
    if (message_arena != submessage_arena) {
      lower_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lower_left, submessage_arena);
    }
    
  } else {
    
  }
  lower_left_ = lower_left;
  // @@protoc_insertion_point(field_set_allocated:vlsirlol.Instance.lower_left)
}

// -------------------------------------------------------------------

// Geometry

// .vlsirlol.Instance top_instance = 1;
inline bool Geometry::_internal_has_top_instance() const {
  return this != internal_default_instance() && top_instance_ != nullptr;
}
inline bool Geometry::has_top_instance() const {
  return _internal_has_top_instance();
}
inline void Geometry::clear_top_instance() {
  if (GetArenaForAllocation() == nullptr && top_instance_ != nullptr) {
    delete top_instance_;
  }
  top_instance_ = nullptr;
}
inline const ::vlsirlol::Instance& Geometry::_internal_top_instance() const {
  const ::vlsirlol::Instance* p = top_instance_;
  return p != nullptr ? *p : reinterpret_cast<const ::vlsirlol::Instance&>(
      ::vlsirlol::_Instance_default_instance_);
}
inline const ::vlsirlol::Instance& Geometry::top_instance() const {
  // @@protoc_insertion_point(field_get:vlsirlol.Geometry.top_instance)
  return _internal_top_instance();
}
inline void Geometry::unsafe_arena_set_allocated_top_instance(
    ::vlsirlol::Instance* top_instance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_instance_);
  }
  top_instance_ = top_instance;
  if (top_instance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vlsirlol.Geometry.top_instance)
}
inline ::vlsirlol::Instance* Geometry::release_top_instance() {
  
  ::vlsirlol::Instance* temp = top_instance_;
  top_instance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vlsirlol::Instance* Geometry::unsafe_arena_release_top_instance() {
  // @@protoc_insertion_point(field_release:vlsirlol.Geometry.top_instance)
  
  ::vlsirlol::Instance* temp = top_instance_;
  top_instance_ = nullptr;
  return temp;
}
inline ::vlsirlol::Instance* Geometry::_internal_mutable_top_instance() {
  
  if (top_instance_ == nullptr) {
    auto* p = CreateMaybeMessage<::vlsirlol::Instance>(GetArenaForAllocation());
    top_instance_ = p;
  }
  return top_instance_;
}
inline ::vlsirlol::Instance* Geometry::mutable_top_instance() {
  ::vlsirlol::Instance* _msg = _internal_mutable_top_instance();
  // @@protoc_insertion_point(field_mutable:vlsirlol.Geometry.top_instance)
  return _msg;
}
inline void Geometry::set_allocated_top_instance(::vlsirlol::Instance* top_instance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete top_instance_;
  }
  if (top_instance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::vlsirlol::Instance>::GetOwningArena(top_instance);
    if (message_arena != submessage_arena) {
      top_instance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_instance, submessage_arena);
    }
    
  } else {
    
  }
  top_instance_ = top_instance;
  // @@protoc_insertion_point(field_set_allocated:vlsirlol.Geometry.top_instance)
}

// repeated .vlsirlol.Cell cells = 2;
inline int Geometry::_internal_cells_size() const {
  return cells_.size();
}
inline int Geometry::cells_size() const {
  return _internal_cells_size();
}
inline void Geometry::clear_cells() {
  cells_.Clear();
}
inline ::vlsirlol::Cell* Geometry::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:vlsirlol.Geometry.cells)
  return cells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::Cell >*
Geometry::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:vlsirlol.Geometry.cells)
  return &cells_;
}
inline const ::vlsirlol::Cell& Geometry::_internal_cells(int index) const {
  return cells_.Get(index);
}
inline const ::vlsirlol::Cell& Geometry::cells(int index) const {
  // @@protoc_insertion_point(field_get:vlsirlol.Geometry.cells)
  return _internal_cells(index);
}
inline ::vlsirlol::Cell* Geometry::_internal_add_cells() {
  return cells_.Add();
}
inline ::vlsirlol::Cell* Geometry::add_cells() {
  ::vlsirlol::Cell* _add = _internal_add_cells();
  // @@protoc_insertion_point(field_add:vlsirlol.Geometry.cells)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsirlol::Cell >&
Geometry::cells() const {
  // @@protoc_insertion_point(field_list:vlsirlol.Geometry.cells)
  return cells_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vlsirlol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_geometry_2eproto
