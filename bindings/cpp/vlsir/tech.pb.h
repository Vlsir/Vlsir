// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tech.proto

#ifndef PROTOBUF_INCLUDED_tech_2eproto
#define PROTOBUF_INCLUDED_tech_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tech_2eproto 

namespace protobuf_tech_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tech_2eproto
namespace vlsir {
namespace tech {
class LayerInfo;
class LayerInfoDefaultTypeInternal;
extern LayerInfoDefaultTypeInternal _LayerInfo_default_instance_;
class LayerPurpose;
class LayerPurposeDefaultTypeInternal;
extern LayerPurposeDefaultTypeInternal _LayerPurpose_default_instance_;
class Package;
class PackageDefaultTypeInternal;
extern PackageDefaultTypeInternal _Package_default_instance_;
class Technology;
class TechnologyDefaultTypeInternal;
extern TechnologyDefaultTypeInternal _Technology_default_instance_;
}  // namespace tech
}  // namespace vlsir
namespace google {
namespace protobuf {
template<> ::vlsir::tech::LayerInfo* Arena::CreateMaybeMessage<::vlsir::tech::LayerInfo>(Arena*);
template<> ::vlsir::tech::LayerPurpose* Arena::CreateMaybeMessage<::vlsir::tech::LayerPurpose>(Arena*);
template<> ::vlsir::tech::Package* Arena::CreateMaybeMessage<::vlsir::tech::Package>(Arena*);
template<> ::vlsir::tech::Technology* Arena::CreateMaybeMessage<::vlsir::tech::Technology>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace vlsir {
namespace tech {

enum LayerPurposeType {
  UNKNOWN = 0,
  LABEL = 1,
  DRAWING = 2,
  PIN = 3,
  OBSTRUCTION = 4,
  OUTLINE = 5,
  LayerPurposeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LayerPurposeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LayerPurposeType_IsValid(int value);
const LayerPurposeType LayerPurposeType_MIN = UNKNOWN;
const LayerPurposeType LayerPurposeType_MAX = OUTLINE;
const int LayerPurposeType_ARRAYSIZE = LayerPurposeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LayerPurposeType_descriptor();
inline const ::std::string& LayerPurposeType_Name(LayerPurposeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LayerPurposeType_descriptor(), value);
}
inline bool LayerPurposeType_Parse(
    const ::std::string& name, LayerPurposeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LayerPurposeType>(
    LayerPurposeType_descriptor(), name, value);
}
// ===================================================================

class Technology : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vlsir.tech.Technology) */ {
 public:
  Technology();
  virtual ~Technology();

  Technology(const Technology& from);

  inline Technology& operator=(const Technology& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Technology(Technology&& from) noexcept
    : Technology() {
    *this = ::std::move(from);
  }

  inline Technology& operator=(Technology&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Technology& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Technology* internal_default_instance() {
    return reinterpret_cast<const Technology*>(
               &_Technology_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Technology* other);
  friend void swap(Technology& a, Technology& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Technology* New() const final {
    return CreateMaybeMessage<Technology>(NULL);
  }

  Technology* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Technology>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Technology& from);
  void MergeFrom(const Technology& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Technology* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vlsir.tech.Package packages = 11;
  int packages_size() const;
  void clear_packages();
  static const int kPackagesFieldNumber = 11;
  ::vlsir::tech::Package* mutable_packages(int index);
  ::google::protobuf::RepeatedPtrField< ::vlsir::tech::Package >*
      mutable_packages();
  const ::vlsir::tech::Package& packages(int index) const;
  ::vlsir::tech::Package* add_packages();
  const ::google::protobuf::RepeatedPtrField< ::vlsir::tech::Package >&
      packages() const;

  // repeated .vlsir.tech.LayerInfo layers = 101;
  int layers_size() const;
  void clear_layers();
  static const int kLayersFieldNumber = 101;
  ::vlsir::tech::LayerInfo* mutable_layers(int index);
  ::google::protobuf::RepeatedPtrField< ::vlsir::tech::LayerInfo >*
      mutable_layers();
  const ::vlsir::tech::LayerInfo& layers(int index) const;
  ::vlsir::tech::LayerInfo* add_layers();
  const ::google::protobuf::RepeatedPtrField< ::vlsir::tech::LayerInfo >&
      layers() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:vlsir.tech.Technology)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::vlsir::tech::Package > packages_;
  ::google::protobuf::RepeatedPtrField< ::vlsir::tech::LayerInfo > layers_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tech_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Package : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vlsir.tech.Package) */ {
 public:
  Package();
  virtual ~Package();

  Package(const Package& from);

  inline Package& operator=(const Package& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Package(Package&& from) noexcept
    : Package() {
    *this = ::std::move(from);
  }

  inline Package& operator=(Package&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Package& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Package* internal_default_instance() {
    return reinterpret_cast<const Package*>(
               &_Package_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Package* other);
  friend void swap(Package& a, Package& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Package* New() const final {
    return CreateMaybeMessage<Package>(NULL);
  }

  Package* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Package>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Package& from);
  void MergeFrom(const Package& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Package* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:vlsir.tech.Package)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tech_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LayerPurpose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vlsir.tech.LayerPurpose) */ {
 public:
  LayerPurpose();
  virtual ~LayerPurpose();

  LayerPurpose(const LayerPurpose& from);

  inline LayerPurpose& operator=(const LayerPurpose& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LayerPurpose(LayerPurpose&& from) noexcept
    : LayerPurpose() {
    *this = ::std::move(from);
  }

  inline LayerPurpose& operator=(LayerPurpose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerPurpose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayerPurpose* internal_default_instance() {
    return reinterpret_cast<const LayerPurpose*>(
               &_LayerPurpose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LayerPurpose* other);
  friend void swap(LayerPurpose& a, LayerPurpose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LayerPurpose* New() const final {
    return CreateMaybeMessage<LayerPurpose>(NULL);
  }

  LayerPurpose* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LayerPurpose>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LayerPurpose& from);
  void MergeFrom(const LayerPurpose& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayerPurpose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string description = 1;
  void clear_description();
  static const int kDescriptionFieldNumber = 1;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .vlsir.tech.LayerPurposeType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::vlsir::tech::LayerPurposeType type() const;
  void set_type(::vlsir::tech::LayerPurposeType value);

  // @@protoc_insertion_point(class_scope:vlsir.tech.LayerPurpose)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tech_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LayerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vlsir.tech.LayerInfo) */ {
 public:
  LayerInfo();
  virtual ~LayerInfo();

  LayerInfo(const LayerInfo& from);

  inline LayerInfo& operator=(const LayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LayerInfo(LayerInfo&& from) noexcept
    : LayerInfo() {
    *this = ::std::move(from);
  }

  inline LayerInfo& operator=(LayerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayerInfo* internal_default_instance() {
    return reinterpret_cast<const LayerInfo*>(
               &_LayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LayerInfo* other);
  friend void swap(LayerInfo& a, LayerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LayerInfo* New() const final {
    return CreateMaybeMessage<LayerInfo>(NULL);
  }

  LayerInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LayerInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LayerInfo& from);
  void MergeFrom(const LayerInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .vlsir.tech.LayerPurpose purpose = 11;
  bool has_purpose() const;
  void clear_purpose();
  static const int kPurposeFieldNumber = 11;
  private:
  const ::vlsir::tech::LayerPurpose& _internal_purpose() const;
  public:
  const ::vlsir::tech::LayerPurpose& purpose() const;
  ::vlsir::tech::LayerPurpose* release_purpose();
  ::vlsir::tech::LayerPurpose* mutable_purpose();
  void set_allocated_purpose(::vlsir::tech::LayerPurpose* purpose);

  // uint64 index = 21;
  void clear_index();
  static const int kIndexFieldNumber = 21;
  ::google::protobuf::uint64 index() const;
  void set_index(::google::protobuf::uint64 value);

  // uint64 sub_index = 31;
  void clear_sub_index();
  static const int kSubIndexFieldNumber = 31;
  ::google::protobuf::uint64 sub_index() const;
  void set_sub_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:vlsir.tech.LayerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::vlsir::tech::LayerPurpose* purpose_;
  ::google::protobuf::uint64 index_;
  ::google::protobuf::uint64 sub_index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tech_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Technology

// string name = 1;
inline void Technology::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Technology::name() const {
  // @@protoc_insertion_point(field_get:vlsir.tech.Technology.name)
  return name_.GetNoArena();
}
inline void Technology::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vlsir.tech.Technology.name)
}
#if LANG_CXX11
inline void Technology::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vlsir.tech.Technology.name)
}
#endif
inline void Technology::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vlsir.tech.Technology.name)
}
inline void Technology::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vlsir.tech.Technology.name)
}
inline ::std::string* Technology::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:vlsir.tech.Technology.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Technology::release_name() {
  // @@protoc_insertion_point(field_release:vlsir.tech.Technology.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Technology::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:vlsir.tech.Technology.name)
}

// repeated .vlsir.tech.Package packages = 11;
inline int Technology::packages_size() const {
  return packages_.size();
}
inline void Technology::clear_packages() {
  packages_.Clear();
}
inline ::vlsir::tech::Package* Technology::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:vlsir.tech.Technology.packages)
  return packages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vlsir::tech::Package >*
Technology::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:vlsir.tech.Technology.packages)
  return &packages_;
}
inline const ::vlsir::tech::Package& Technology::packages(int index) const {
  // @@protoc_insertion_point(field_get:vlsir.tech.Technology.packages)
  return packages_.Get(index);
}
inline ::vlsir::tech::Package* Technology::add_packages() {
  // @@protoc_insertion_point(field_add:vlsir.tech.Technology.packages)
  return packages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vlsir::tech::Package >&
Technology::packages() const {
  // @@protoc_insertion_point(field_list:vlsir.tech.Technology.packages)
  return packages_;
}

// repeated .vlsir.tech.LayerInfo layers = 101;
inline int Technology::layers_size() const {
  return layers_.size();
}
inline void Technology::clear_layers() {
  layers_.Clear();
}
inline ::vlsir::tech::LayerInfo* Technology::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:vlsir.tech.Technology.layers)
  return layers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vlsir::tech::LayerInfo >*
Technology::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:vlsir.tech.Technology.layers)
  return &layers_;
}
inline const ::vlsir::tech::LayerInfo& Technology::layers(int index) const {
  // @@protoc_insertion_point(field_get:vlsir.tech.Technology.layers)
  return layers_.Get(index);
}
inline ::vlsir::tech::LayerInfo* Technology::add_layers() {
  // @@protoc_insertion_point(field_add:vlsir.tech.Technology.layers)
  return layers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vlsir::tech::LayerInfo >&
Technology::layers() const {
  // @@protoc_insertion_point(field_list:vlsir.tech.Technology.layers)
  return layers_;
}

// -------------------------------------------------------------------

// Package

// string name = 1;
inline void Package::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Package::name() const {
  // @@protoc_insertion_point(field_get:vlsir.tech.Package.name)
  return name_.GetNoArena();
}
inline void Package::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vlsir.tech.Package.name)
}
#if LANG_CXX11
inline void Package::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vlsir.tech.Package.name)
}
#endif
inline void Package::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vlsir.tech.Package.name)
}
inline void Package::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vlsir.tech.Package.name)
}
inline ::std::string* Package::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:vlsir.tech.Package.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Package::release_name() {
  // @@protoc_insertion_point(field_release:vlsir.tech.Package.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Package::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:vlsir.tech.Package.name)
}

// -------------------------------------------------------------------

// LayerPurpose

// string description = 1;
inline void LayerPurpose::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LayerPurpose::description() const {
  // @@protoc_insertion_point(field_get:vlsir.tech.LayerPurpose.description)
  return description_.GetNoArena();
}
inline void LayerPurpose::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vlsir.tech.LayerPurpose.description)
}
#if LANG_CXX11
inline void LayerPurpose::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vlsir.tech.LayerPurpose.description)
}
#endif
inline void LayerPurpose::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vlsir.tech.LayerPurpose.description)
}
inline void LayerPurpose::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vlsir.tech.LayerPurpose.description)
}
inline ::std::string* LayerPurpose::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:vlsir.tech.LayerPurpose.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LayerPurpose::release_description() {
  // @@protoc_insertion_point(field_release:vlsir.tech.LayerPurpose.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerPurpose::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:vlsir.tech.LayerPurpose.description)
}

// .vlsir.tech.LayerPurposeType type = 2;
inline void LayerPurpose::clear_type() {
  type_ = 0;
}
inline ::vlsir::tech::LayerPurposeType LayerPurpose::type() const {
  // @@protoc_insertion_point(field_get:vlsir.tech.LayerPurpose.type)
  return static_cast< ::vlsir::tech::LayerPurposeType >(type_);
}
inline void LayerPurpose::set_type(::vlsir::tech::LayerPurposeType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:vlsir.tech.LayerPurpose.type)
}

// -------------------------------------------------------------------

// LayerInfo

// string name = 1;
inline void LayerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LayerInfo::name() const {
  // @@protoc_insertion_point(field_get:vlsir.tech.LayerInfo.name)
  return name_.GetNoArena();
}
inline void LayerInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vlsir.tech.LayerInfo.name)
}
#if LANG_CXX11
inline void LayerInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vlsir.tech.LayerInfo.name)
}
#endif
inline void LayerInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vlsir.tech.LayerInfo.name)
}
inline void LayerInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vlsir.tech.LayerInfo.name)
}
inline ::std::string* LayerInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:vlsir.tech.LayerInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:vlsir.tech.LayerInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:vlsir.tech.LayerInfo.name)
}

// .vlsir.tech.LayerPurpose purpose = 11;
inline bool LayerInfo::has_purpose() const {
  return this != internal_default_instance() && purpose_ != NULL;
}
inline void LayerInfo::clear_purpose() {
  if (GetArenaNoVirtual() == NULL && purpose_ != NULL) {
    delete purpose_;
  }
  purpose_ = NULL;
}
inline const ::vlsir::tech::LayerPurpose& LayerInfo::_internal_purpose() const {
  return *purpose_;
}
inline const ::vlsir::tech::LayerPurpose& LayerInfo::purpose() const {
  const ::vlsir::tech::LayerPurpose* p = purpose_;
  // @@protoc_insertion_point(field_get:vlsir.tech.LayerInfo.purpose)
  return p != NULL ? *p : *reinterpret_cast<const ::vlsir::tech::LayerPurpose*>(
      &::vlsir::tech::_LayerPurpose_default_instance_);
}
inline ::vlsir::tech::LayerPurpose* LayerInfo::release_purpose() {
  // @@protoc_insertion_point(field_release:vlsir.tech.LayerInfo.purpose)
  
  ::vlsir::tech::LayerPurpose* temp = purpose_;
  purpose_ = NULL;
  return temp;
}
inline ::vlsir::tech::LayerPurpose* LayerInfo::mutable_purpose() {
  
  if (purpose_ == NULL) {
    auto* p = CreateMaybeMessage<::vlsir::tech::LayerPurpose>(GetArenaNoVirtual());
    purpose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vlsir.tech.LayerInfo.purpose)
  return purpose_;
}
inline void LayerInfo::set_allocated_purpose(::vlsir::tech::LayerPurpose* purpose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete purpose_;
  }
  if (purpose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      purpose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, purpose, submessage_arena);
    }
    
  } else {
    
  }
  purpose_ = purpose;
  // @@protoc_insertion_point(field_set_allocated:vlsir.tech.LayerInfo.purpose)
}

// uint64 index = 21;
inline void LayerInfo::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LayerInfo::index() const {
  // @@protoc_insertion_point(field_get:vlsir.tech.LayerInfo.index)
  return index_;
}
inline void LayerInfo::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:vlsir.tech.LayerInfo.index)
}

// uint64 sub_index = 31;
inline void LayerInfo::clear_sub_index() {
  sub_index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LayerInfo::sub_index() const {
  // @@protoc_insertion_point(field_get:vlsir.tech.LayerInfo.sub_index)
  return sub_index_;
}
inline void LayerInfo::set_sub_index(::google::protobuf::uint64 value) {
  
  sub_index_ = value;
  // @@protoc_insertion_point(field_set:vlsir.tech.LayerInfo.sub_index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tech
}  // namespace vlsir

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::vlsir::tech::LayerPurposeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vlsir::tech::LayerPurposeType>() {
  return ::vlsir::tech::LayerPurposeType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tech_2eproto
