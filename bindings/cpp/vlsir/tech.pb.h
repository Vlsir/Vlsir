// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tech.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tech_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tech_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tech_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tech_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tech_2eproto;
namespace vlsir {
namespace tech {
class LayerInfo;
struct LayerInfoDefaultTypeInternal;
extern LayerInfoDefaultTypeInternal _LayerInfo_default_instance_;
class LayerPurpose;
struct LayerPurposeDefaultTypeInternal;
extern LayerPurposeDefaultTypeInternal _LayerPurpose_default_instance_;
class Package;
struct PackageDefaultTypeInternal;
extern PackageDefaultTypeInternal _Package_default_instance_;
class Technology;
struct TechnologyDefaultTypeInternal;
extern TechnologyDefaultTypeInternal _Technology_default_instance_;
}  // namespace tech
}  // namespace vlsir
PROTOBUF_NAMESPACE_OPEN
template<> ::vlsir::tech::LayerInfo* Arena::CreateMaybeMessage<::vlsir::tech::LayerInfo>(Arena*);
template<> ::vlsir::tech::LayerPurpose* Arena::CreateMaybeMessage<::vlsir::tech::LayerPurpose>(Arena*);
template<> ::vlsir::tech::Package* Arena::CreateMaybeMessage<::vlsir::tech::Package>(Arena*);
template<> ::vlsir::tech::Technology* Arena::CreateMaybeMessage<::vlsir::tech::Technology>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vlsir {
namespace tech {

enum LayerPurposeType : int {
  UNKNOWN = 0,
  LABEL = 1,
  DRAWING = 2,
  PIN = 3,
  OBSTRUCTION = 4,
  OUTLINE = 5,
  LayerPurposeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LayerPurposeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LayerPurposeType_IsValid(int value);
constexpr LayerPurposeType LayerPurposeType_MIN = UNKNOWN;
constexpr LayerPurposeType LayerPurposeType_MAX = OUTLINE;
constexpr int LayerPurposeType_ARRAYSIZE = LayerPurposeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LayerPurposeType_descriptor();
template<typename T>
inline const std::string& LayerPurposeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LayerPurposeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LayerPurposeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LayerPurposeType_descriptor(), enum_t_value);
}
inline bool LayerPurposeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LayerPurposeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LayerPurposeType>(
    LayerPurposeType_descriptor(), name, value);
}
// ===================================================================

class Technology final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vlsir.tech.Technology) */ {
 public:
  inline Technology() : Technology(nullptr) {}
  ~Technology() override;
  explicit constexpr Technology(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Technology(const Technology& from);
  Technology(Technology&& from) noexcept
    : Technology() {
    *this = ::std::move(from);
  }

  inline Technology& operator=(const Technology& from) {
    CopyFrom(from);
    return *this;
  }
  inline Technology& operator=(Technology&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Technology& default_instance() {
    return *internal_default_instance();
  }
  static inline const Technology* internal_default_instance() {
    return reinterpret_cast<const Technology*>(
               &_Technology_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Technology& a, Technology& b) {
    a.Swap(&b);
  }
  inline void Swap(Technology* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Technology* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Technology* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Technology>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Technology& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Technology& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Technology* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vlsir.tech.Technology";
  }
  protected:
  explicit Technology(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackagesFieldNumber = 11,
    kLayersFieldNumber = 101,
    kNameFieldNumber = 1,
  };
  // repeated .vlsir.tech.Package packages = 11;
  int packages_size() const;
  private:
  int _internal_packages_size() const;
  public:
  void clear_packages();
  ::vlsir::tech::Package* mutable_packages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsir::tech::Package >*
      mutable_packages();
  private:
  const ::vlsir::tech::Package& _internal_packages(int index) const;
  ::vlsir::tech::Package* _internal_add_packages();
  public:
  const ::vlsir::tech::Package& packages(int index) const;
  ::vlsir::tech::Package* add_packages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsir::tech::Package >&
      packages() const;

  // repeated .vlsir.tech.LayerInfo layers = 101;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  ::vlsir::tech::LayerInfo* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsir::tech::LayerInfo >*
      mutable_layers();
  private:
  const ::vlsir::tech::LayerInfo& _internal_layers(int index) const;
  ::vlsir::tech::LayerInfo* _internal_add_layers();
  public:
  const ::vlsir::tech::LayerInfo& layers(int index) const;
  ::vlsir::tech::LayerInfo* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsir::tech::LayerInfo >&
      layers() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:vlsir.tech.Technology)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsir::tech::Package > packages_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsir::tech::LayerInfo > layers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tech_2eproto;
};
// -------------------------------------------------------------------

class Package final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vlsir.tech.Package) */ {
 public:
  inline Package() : Package(nullptr) {}
  ~Package() override;
  explicit constexpr Package(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Package(const Package& from);
  Package(Package&& from) noexcept
    : Package() {
    *this = ::std::move(from);
  }

  inline Package& operator=(const Package& from) {
    CopyFrom(from);
    return *this;
  }
  inline Package& operator=(Package&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Package& default_instance() {
    return *internal_default_instance();
  }
  static inline const Package* internal_default_instance() {
    return reinterpret_cast<const Package*>(
               &_Package_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Package& a, Package& b) {
    a.Swap(&b);
  }
  inline void Swap(Package* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Package* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Package* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Package>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Package& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Package& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Package* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vlsir.tech.Package";
  }
  protected:
  explicit Package(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:vlsir.tech.Package)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tech_2eproto;
};
// -------------------------------------------------------------------

class LayerPurpose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vlsir.tech.LayerPurpose) */ {
 public:
  inline LayerPurpose() : LayerPurpose(nullptr) {}
  ~LayerPurpose() override;
  explicit constexpr LayerPurpose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayerPurpose(const LayerPurpose& from);
  LayerPurpose(LayerPurpose&& from) noexcept
    : LayerPurpose() {
    *this = ::std::move(from);
  }

  inline LayerPurpose& operator=(const LayerPurpose& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayerPurpose& operator=(LayerPurpose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LayerPurpose& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayerPurpose* internal_default_instance() {
    return reinterpret_cast<const LayerPurpose*>(
               &_LayerPurpose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LayerPurpose& a, LayerPurpose& b) {
    a.Swap(&b);
  }
  inline void Swap(LayerPurpose* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayerPurpose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayerPurpose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayerPurpose>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LayerPurpose& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LayerPurpose& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayerPurpose* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vlsir.tech.LayerPurpose";
  }
  protected:
  explicit LayerPurpose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string description = 1;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .vlsir.tech.LayerPurposeType type = 2;
  void clear_type();
  ::vlsir::tech::LayerPurposeType type() const;
  void set_type(::vlsir::tech::LayerPurposeType value);
  private:
  ::vlsir::tech::LayerPurposeType _internal_type() const;
  void _internal_set_type(::vlsir::tech::LayerPurposeType value);
  public:

  // @@protoc_insertion_point(class_scope:vlsir.tech.LayerPurpose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tech_2eproto;
};
// -------------------------------------------------------------------

class LayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vlsir.tech.LayerInfo) */ {
 public:
  inline LayerInfo() : LayerInfo(nullptr) {}
  ~LayerInfo() override;
  explicit constexpr LayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayerInfo(const LayerInfo& from);
  LayerInfo(LayerInfo&& from) noexcept
    : LayerInfo() {
    *this = ::std::move(from);
  }

  inline LayerInfo& operator=(const LayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayerInfo& operator=(LayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayerInfo* internal_default_instance() {
    return reinterpret_cast<const LayerInfo*>(
               &_LayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LayerInfo& a, LayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LayerInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vlsir.tech.LayerInfo";
  }
  protected:
  explicit LayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPurposeFieldNumber = 11,
    kIndexFieldNumber = 21,
    kSubIndexFieldNumber = 31,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .vlsir.tech.LayerPurpose purpose = 11;
  bool has_purpose() const;
  private:
  bool _internal_has_purpose() const;
  public:
  void clear_purpose();
  const ::vlsir::tech::LayerPurpose& purpose() const;
  PROTOBUF_NODISCARD ::vlsir::tech::LayerPurpose* release_purpose();
  ::vlsir::tech::LayerPurpose* mutable_purpose();
  void set_allocated_purpose(::vlsir::tech::LayerPurpose* purpose);
  private:
  const ::vlsir::tech::LayerPurpose& _internal_purpose() const;
  ::vlsir::tech::LayerPurpose* _internal_mutable_purpose();
  public:
  void unsafe_arena_set_allocated_purpose(
      ::vlsir::tech::LayerPurpose* purpose);
  ::vlsir::tech::LayerPurpose* unsafe_arena_release_purpose();

  // uint64 index = 21;
  void clear_index();
  uint64_t index() const;
  void set_index(uint64_t value);
  private:
  uint64_t _internal_index() const;
  void _internal_set_index(uint64_t value);
  public:

  // uint64 sub_index = 31;
  void clear_sub_index();
  uint64_t sub_index() const;
  void set_sub_index(uint64_t value);
  private:
  uint64_t _internal_sub_index() const;
  void _internal_set_sub_index(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:vlsir.tech.LayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::vlsir::tech::LayerPurpose* purpose_;
  uint64_t index_;
  uint64_t sub_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tech_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Technology

// string name = 1;
inline void Technology::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Technology::name() const {
  // @@protoc_insertion_point(field_get:vlsir.tech.Technology.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Technology::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vlsir.tech.Technology.name)
}
inline std::string* Technology::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:vlsir.tech.Technology.name)
  return _s;
}
inline const std::string& Technology::_internal_name() const {
  return name_.Get();
}
inline void Technology::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Technology::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Technology::release_name() {
  // @@protoc_insertion_point(field_release:vlsir.tech.Technology.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Technology::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vlsir.tech.Technology.name)
}

// repeated .vlsir.tech.Package packages = 11;
inline int Technology::_internal_packages_size() const {
  return packages_.size();
}
inline int Technology::packages_size() const {
  return _internal_packages_size();
}
inline void Technology::clear_packages() {
  packages_.Clear();
}
inline ::vlsir::tech::Package* Technology::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:vlsir.tech.Technology.packages)
  return packages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsir::tech::Package >*
Technology::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:vlsir.tech.Technology.packages)
  return &packages_;
}
inline const ::vlsir::tech::Package& Technology::_internal_packages(int index) const {
  return packages_.Get(index);
}
inline const ::vlsir::tech::Package& Technology::packages(int index) const {
  // @@protoc_insertion_point(field_get:vlsir.tech.Technology.packages)
  return _internal_packages(index);
}
inline ::vlsir::tech::Package* Technology::_internal_add_packages() {
  return packages_.Add();
}
inline ::vlsir::tech::Package* Technology::add_packages() {
  ::vlsir::tech::Package* _add = _internal_add_packages();
  // @@protoc_insertion_point(field_add:vlsir.tech.Technology.packages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsir::tech::Package >&
Technology::packages() const {
  // @@protoc_insertion_point(field_list:vlsir.tech.Technology.packages)
  return packages_;
}

// repeated .vlsir.tech.LayerInfo layers = 101;
inline int Technology::_internal_layers_size() const {
  return layers_.size();
}
inline int Technology::layers_size() const {
  return _internal_layers_size();
}
inline void Technology::clear_layers() {
  layers_.Clear();
}
inline ::vlsir::tech::LayerInfo* Technology::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:vlsir.tech.Technology.layers)
  return layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsir::tech::LayerInfo >*
Technology::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:vlsir.tech.Technology.layers)
  return &layers_;
}
inline const ::vlsir::tech::LayerInfo& Technology::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const ::vlsir::tech::LayerInfo& Technology::layers(int index) const {
  // @@protoc_insertion_point(field_get:vlsir.tech.Technology.layers)
  return _internal_layers(index);
}
inline ::vlsir::tech::LayerInfo* Technology::_internal_add_layers() {
  return layers_.Add();
}
inline ::vlsir::tech::LayerInfo* Technology::add_layers() {
  ::vlsir::tech::LayerInfo* _add = _internal_add_layers();
  // @@protoc_insertion_point(field_add:vlsir.tech.Technology.layers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vlsir::tech::LayerInfo >&
Technology::layers() const {
  // @@protoc_insertion_point(field_list:vlsir.tech.Technology.layers)
  return layers_;
}

// -------------------------------------------------------------------

// Package

// string name = 1;
inline void Package::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Package::name() const {
  // @@protoc_insertion_point(field_get:vlsir.tech.Package.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Package::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vlsir.tech.Package.name)
}
inline std::string* Package::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:vlsir.tech.Package.name)
  return _s;
}
inline const std::string& Package::_internal_name() const {
  return name_.Get();
}
inline void Package::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Package::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Package::release_name() {
  // @@protoc_insertion_point(field_release:vlsir.tech.Package.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Package::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vlsir.tech.Package.name)
}

// -------------------------------------------------------------------

// LayerPurpose

// string description = 1;
inline void LayerPurpose::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& LayerPurpose::description() const {
  // @@protoc_insertion_point(field_get:vlsir.tech.LayerPurpose.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayerPurpose::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vlsir.tech.LayerPurpose.description)
}
inline std::string* LayerPurpose::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:vlsir.tech.LayerPurpose.description)
  return _s;
}
inline const std::string& LayerPurpose::_internal_description() const {
  return description_.Get();
}
inline void LayerPurpose::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LayerPurpose::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LayerPurpose::release_description() {
  // @@protoc_insertion_point(field_release:vlsir.tech.LayerPurpose.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LayerPurpose::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vlsir.tech.LayerPurpose.description)
}

// .vlsir.tech.LayerPurposeType type = 2;
inline void LayerPurpose::clear_type() {
  type_ = 0;
}
inline ::vlsir::tech::LayerPurposeType LayerPurpose::_internal_type() const {
  return static_cast< ::vlsir::tech::LayerPurposeType >(type_);
}
inline ::vlsir::tech::LayerPurposeType LayerPurpose::type() const {
  // @@protoc_insertion_point(field_get:vlsir.tech.LayerPurpose.type)
  return _internal_type();
}
inline void LayerPurpose::_internal_set_type(::vlsir::tech::LayerPurposeType value) {
  
  type_ = value;
}
inline void LayerPurpose::set_type(::vlsir::tech::LayerPurposeType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:vlsir.tech.LayerPurpose.type)
}

// -------------------------------------------------------------------

// LayerInfo

// string name = 1;
inline void LayerInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& LayerInfo::name() const {
  // @@protoc_insertion_point(field_get:vlsir.tech.LayerInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayerInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vlsir.tech.LayerInfo.name)
}
inline std::string* LayerInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:vlsir.tech.LayerInfo.name)
  return _s;
}
inline const std::string& LayerInfo::_internal_name() const {
  return name_.Get();
}
inline void LayerInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LayerInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:vlsir.tech.LayerInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LayerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vlsir.tech.LayerInfo.name)
}

// .vlsir.tech.LayerPurpose purpose = 11;
inline bool LayerInfo::_internal_has_purpose() const {
  return this != internal_default_instance() && purpose_ != nullptr;
}
inline bool LayerInfo::has_purpose() const {
  return _internal_has_purpose();
}
inline void LayerInfo::clear_purpose() {
  if (GetArenaForAllocation() == nullptr && purpose_ != nullptr) {
    delete purpose_;
  }
  purpose_ = nullptr;
}
inline const ::vlsir::tech::LayerPurpose& LayerInfo::_internal_purpose() const {
  const ::vlsir::tech::LayerPurpose* p = purpose_;
  return p != nullptr ? *p : reinterpret_cast<const ::vlsir::tech::LayerPurpose&>(
      ::vlsir::tech::_LayerPurpose_default_instance_);
}
inline const ::vlsir::tech::LayerPurpose& LayerInfo::purpose() const {
  // @@protoc_insertion_point(field_get:vlsir.tech.LayerInfo.purpose)
  return _internal_purpose();
}
inline void LayerInfo::unsafe_arena_set_allocated_purpose(
    ::vlsir::tech::LayerPurpose* purpose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(purpose_);
  }
  purpose_ = purpose;
  if (purpose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vlsir.tech.LayerInfo.purpose)
}
inline ::vlsir::tech::LayerPurpose* LayerInfo::release_purpose() {
  
  ::vlsir::tech::LayerPurpose* temp = purpose_;
  purpose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vlsir::tech::LayerPurpose* LayerInfo::unsafe_arena_release_purpose() {
  // @@protoc_insertion_point(field_release:vlsir.tech.LayerInfo.purpose)
  
  ::vlsir::tech::LayerPurpose* temp = purpose_;
  purpose_ = nullptr;
  return temp;
}
inline ::vlsir::tech::LayerPurpose* LayerInfo::_internal_mutable_purpose() {
  
  if (purpose_ == nullptr) {
    auto* p = CreateMaybeMessage<::vlsir::tech::LayerPurpose>(GetArenaForAllocation());
    purpose_ = p;
  }
  return purpose_;
}
inline ::vlsir::tech::LayerPurpose* LayerInfo::mutable_purpose() {
  ::vlsir::tech::LayerPurpose* _msg = _internal_mutable_purpose();
  // @@protoc_insertion_point(field_mutable:vlsir.tech.LayerInfo.purpose)
  return _msg;
}
inline void LayerInfo::set_allocated_purpose(::vlsir::tech::LayerPurpose* purpose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete purpose_;
  }
  if (purpose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::vlsir::tech::LayerPurpose>::GetOwningArena(purpose);
    if (message_arena != submessage_arena) {
      purpose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, purpose, submessage_arena);
    }
    
  } else {
    
  }
  purpose_ = purpose;
  // @@protoc_insertion_point(field_set_allocated:vlsir.tech.LayerInfo.purpose)
}

// uint64 index = 21;
inline void LayerInfo::clear_index() {
  index_ = uint64_t{0u};
}
inline uint64_t LayerInfo::_internal_index() const {
  return index_;
}
inline uint64_t LayerInfo::index() const {
  // @@protoc_insertion_point(field_get:vlsir.tech.LayerInfo.index)
  return _internal_index();
}
inline void LayerInfo::_internal_set_index(uint64_t value) {
  
  index_ = value;
}
inline void LayerInfo::set_index(uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:vlsir.tech.LayerInfo.index)
}

// uint64 sub_index = 31;
inline void LayerInfo::clear_sub_index() {
  sub_index_ = uint64_t{0u};
}
inline uint64_t LayerInfo::_internal_sub_index() const {
  return sub_index_;
}
inline uint64_t LayerInfo::sub_index() const {
  // @@protoc_insertion_point(field_get:vlsir.tech.LayerInfo.sub_index)
  return _internal_sub_index();
}
inline void LayerInfo::_internal_set_sub_index(uint64_t value) {
  
  sub_index_ = value;
}
inline void LayerInfo::set_sub_index(uint64_t value) {
  _internal_set_sub_index(value);
  // @@protoc_insertion_point(field_set:vlsir.tech.LayerInfo.sub_index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tech
}  // namespace vlsir

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::vlsir::tech::LayerPurposeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vlsir::tech::LayerPurposeType>() {
  return ::vlsir::tech::LayerPurposeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tech_2eproto
