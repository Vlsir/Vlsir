// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: utils.proto

#ifndef PROTOBUF_INCLUDED_utils_2eproto
#define PROTOBUF_INCLUDED_utils_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_utils_2eproto 

namespace protobuf_utils_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_utils_2eproto
namespace vlsir {
namespace utils {
class AuthorMetadata;
class AuthorMetadataDefaultTypeInternal;
extern AuthorMetadataDefaultTypeInternal _AuthorMetadata_default_instance_;
class LibraryMetadata;
class LibraryMetadataDefaultTypeInternal;
extern LibraryMetadataDefaultTypeInternal _LibraryMetadata_default_instance_;
class Param;
class ParamDefaultTypeInternal;
extern ParamDefaultTypeInternal _Param_default_instance_;
class ParamValue;
class ParamValueDefaultTypeInternal;
extern ParamValueDefaultTypeInternal _ParamValue_default_instance_;
class Prefixed;
class PrefixedDefaultTypeInternal;
extern PrefixedDefaultTypeInternal _Prefixed_default_instance_;
class QualifiedName;
class QualifiedNameDefaultTypeInternal;
extern QualifiedNameDefaultTypeInternal _QualifiedName_default_instance_;
class Reference;
class ReferenceDefaultTypeInternal;
extern ReferenceDefaultTypeInternal _Reference_default_instance_;
}  // namespace utils
}  // namespace vlsir
namespace google {
namespace protobuf {
template<> ::vlsir::utils::AuthorMetadata* Arena::CreateMaybeMessage<::vlsir::utils::AuthorMetadata>(Arena*);
template<> ::vlsir::utils::LibraryMetadata* Arena::CreateMaybeMessage<::vlsir::utils::LibraryMetadata>(Arena*);
template<> ::vlsir::utils::Param* Arena::CreateMaybeMessage<::vlsir::utils::Param>(Arena*);
template<> ::vlsir::utils::ParamValue* Arena::CreateMaybeMessage<::vlsir::utils::ParamValue>(Arena*);
template<> ::vlsir::utils::Prefixed* Arena::CreateMaybeMessage<::vlsir::utils::Prefixed>(Arena*);
template<> ::vlsir::utils::QualifiedName* Arena::CreateMaybeMessage<::vlsir::utils::QualifiedName>(Arena*);
template<> ::vlsir::utils::Reference* Arena::CreateMaybeMessage<::vlsir::utils::Reference>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace vlsir {
namespace utils {

enum SIPrefix {
  YOCTO = 0,
  ZEPTO = 1,
  ATTO = 2,
  FEMTO = 3,
  PICO = 4,
  NANO = 5,
  MICRO = 6,
  MILLI = 7,
  CENTI = 8,
  DECI = 9,
  DECA = 10,
  HECTO = 11,
  KILO = 12,
  MEGA = 13,
  GIGA = 14,
  TERA = 15,
  PETA = 16,
  EXA = 17,
  ZETTA = 18,
  YOTTA = 19,
  UNIT = 20,
  SIPrefix_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SIPrefix_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SIPrefix_IsValid(int value);
const SIPrefix SIPrefix_MIN = YOCTO;
const SIPrefix SIPrefix_MAX = UNIT;
const int SIPrefix_ARRAYSIZE = SIPrefix_MAX + 1;

const ::google::protobuf::EnumDescriptor* SIPrefix_descriptor();
inline const ::std::string& SIPrefix_Name(SIPrefix value) {
  return ::google::protobuf::internal::NameOfEnum(
    SIPrefix_descriptor(), value);
}
inline bool SIPrefix_Parse(
    const ::std::string& name, SIPrefix* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SIPrefix>(
    SIPrefix_descriptor(), name, value);
}
// ===================================================================

class Prefixed : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vlsir.utils.Prefixed) */ {
 public:
  Prefixed();
  virtual ~Prefixed();

  Prefixed(const Prefixed& from);

  inline Prefixed& operator=(const Prefixed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Prefixed(Prefixed&& from) noexcept
    : Prefixed() {
    *this = ::std::move(from);
  }

  inline Prefixed& operator=(Prefixed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Prefixed& default_instance();

  enum NumberCase {
    kInteger = 2,
    kDouble = 3,
    kString = 4,
    NUMBER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Prefixed* internal_default_instance() {
    return reinterpret_cast<const Prefixed*>(
               &_Prefixed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Prefixed* other);
  friend void swap(Prefixed& a, Prefixed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Prefixed* New() const final {
    return CreateMaybeMessage<Prefixed>(NULL);
  }

  Prefixed* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Prefixed>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Prefixed& from);
  void MergeFrom(const Prefixed& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Prefixed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .vlsir.utils.SIPrefix prefix = 1;
  void clear_prefix();
  static const int kPrefixFieldNumber = 1;
  ::vlsir::utils::SIPrefix prefix() const;
  void set_prefix(::vlsir::utils::SIPrefix value);

  // int64 integer = 2;
  private:
  bool has_integer() const;
  public:
  void clear_integer();
  static const int kIntegerFieldNumber = 2;
  ::google::protobuf::int64 integer() const;
  void set_integer(::google::protobuf::int64 value);

  // double double = 3;
  private:
  bool has_double_() const;
  public:
  void clear_double_();
  static const int kDoubleFieldNumber = 3;
  double double_() const;
  void set_double_(double value);

  // string string = 4;
  private:
  bool has_string() const;
  public:
  void clear_string();
  static const int kStringFieldNumber = 4;
  const ::std::string& string() const;
  void set_string(const ::std::string& value);
  #if LANG_CXX11
  void set_string(::std::string&& value);
  #endif
  void set_string(const char* value);
  void set_string(const char* value, size_t size);
  ::std::string* mutable_string();
  ::std::string* release_string();
  void set_allocated_string(::std::string* string);

  void clear_number();
  NumberCase number_case() const;
  // @@protoc_insertion_point(class_scope:vlsir.utils.Prefixed)
 private:
  void set_has_integer();
  void set_has_double_();
  void set_has_string();

  inline bool has_number() const;
  inline void clear_has_number();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int prefix_;
  union NumberUnion {
    NumberUnion() {}
    ::google::protobuf::int64 integer_;
    double double__;
    ::google::protobuf::internal::ArenaStringPtr string_;
  } number_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_utils_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ParamValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vlsir.utils.ParamValue) */ {
 public:
  ParamValue();
  virtual ~ParamValue();

  ParamValue(const ParamValue& from);

  inline ParamValue& operator=(const ParamValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParamValue(ParamValue&& from) noexcept
    : ParamValue() {
    *this = ::std::move(from);
  }

  inline ParamValue& operator=(ParamValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamValue& default_instance();

  enum ValueCase {
    kInteger = 2,
    kDouble = 3,
    kString = 4,
    kLiteral = 5,
    kPrefixed = 6,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParamValue* internal_default_instance() {
    return reinterpret_cast<const ParamValue*>(
               &_ParamValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ParamValue* other);
  friend void swap(ParamValue& a, ParamValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParamValue* New() const final {
    return CreateMaybeMessage<ParamValue>(NULL);
  }

  ParamValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ParamValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ParamValue& from);
  void MergeFrom(const ParamValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParamValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 integer = 2;
  private:
  bool has_integer() const;
  public:
  void clear_integer();
  static const int kIntegerFieldNumber = 2;
  ::google::protobuf::int64 integer() const;
  void set_integer(::google::protobuf::int64 value);

  // double double = 3;
  private:
  bool has_double_() const;
  public:
  void clear_double_();
  static const int kDoubleFieldNumber = 3;
  double double_() const;
  void set_double_(double value);

  // string string = 4;
  private:
  bool has_string() const;
  public:
  void clear_string();
  static const int kStringFieldNumber = 4;
  const ::std::string& string() const;
  void set_string(const ::std::string& value);
  #if LANG_CXX11
  void set_string(::std::string&& value);
  #endif
  void set_string(const char* value);
  void set_string(const char* value, size_t size);
  ::std::string* mutable_string();
  ::std::string* release_string();
  void set_allocated_string(::std::string* string);

  // string literal = 5;
  private:
  bool has_literal() const;
  public:
  void clear_literal();
  static const int kLiteralFieldNumber = 5;
  const ::std::string& literal() const;
  void set_literal(const ::std::string& value);
  #if LANG_CXX11
  void set_literal(::std::string&& value);
  #endif
  void set_literal(const char* value);
  void set_literal(const char* value, size_t size);
  ::std::string* mutable_literal();
  ::std::string* release_literal();
  void set_allocated_literal(::std::string* literal);

  // .vlsir.utils.Prefixed prefixed = 6;
  bool has_prefixed() const;
  void clear_prefixed();
  static const int kPrefixedFieldNumber = 6;
  private:
  const ::vlsir::utils::Prefixed& _internal_prefixed() const;
  public:
  const ::vlsir::utils::Prefixed& prefixed() const;
  ::vlsir::utils::Prefixed* release_prefixed();
  ::vlsir::utils::Prefixed* mutable_prefixed();
  void set_allocated_prefixed(::vlsir::utils::Prefixed* prefixed);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:vlsir.utils.ParamValue)
 private:
  void set_has_integer();
  void set_has_double_();
  void set_has_string();
  void set_has_literal();
  void set_has_prefixed();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::protobuf::int64 integer_;
    double double__;
    ::google::protobuf::internal::ArenaStringPtr string_;
    ::google::protobuf::internal::ArenaStringPtr literal_;
    ::vlsir::utils::Prefixed* prefixed_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_utils_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Param : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vlsir.utils.Param) */ {
 public:
  Param();
  virtual ~Param();

  Param(const Param& from);

  inline Param& operator=(const Param& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Param(Param&& from) noexcept
    : Param() {
    *this = ::std::move(from);
  }

  inline Param& operator=(Param&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Param& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Param* internal_default_instance() {
    return reinterpret_cast<const Param*>(
               &_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Param* other);
  friend void swap(Param& a, Param& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Param* New() const final {
    return CreateMaybeMessage<Param>(NULL);
  }

  Param* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Param>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Param& from);
  void MergeFrom(const Param& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Param* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string desc = 3;
  void clear_desc();
  static const int kDescFieldNumber = 3;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // .vlsir.utils.ParamValue value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  private:
  const ::vlsir::utils::ParamValue& _internal_value() const;
  public:
  const ::vlsir::utils::ParamValue& value() const;
  ::vlsir::utils::ParamValue* release_value();
  ::vlsir::utils::ParamValue* mutable_value();
  void set_allocated_value(::vlsir::utils::ParamValue* value);

  // @@protoc_insertion_point(class_scope:vlsir.utils.Param)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::vlsir::utils::ParamValue* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_utils_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QualifiedName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vlsir.utils.QualifiedName) */ {
 public:
  QualifiedName();
  virtual ~QualifiedName();

  QualifiedName(const QualifiedName& from);

  inline QualifiedName& operator=(const QualifiedName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QualifiedName(QualifiedName&& from) noexcept
    : QualifiedName() {
    *this = ::std::move(from);
  }

  inline QualifiedName& operator=(QualifiedName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QualifiedName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QualifiedName* internal_default_instance() {
    return reinterpret_cast<const QualifiedName*>(
               &_QualifiedName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(QualifiedName* other);
  friend void swap(QualifiedName& a, QualifiedName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QualifiedName* New() const final {
    return CreateMaybeMessage<QualifiedName>(NULL);
  }

  QualifiedName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QualifiedName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QualifiedName& from);
  void MergeFrom(const QualifiedName& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QualifiedName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string domain = 1;
  void clear_domain();
  static const int kDomainFieldNumber = 1;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:vlsir.utils.QualifiedName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_utils_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Reference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vlsir.utils.Reference) */ {
 public:
  Reference();
  virtual ~Reference();

  Reference(const Reference& from);

  inline Reference& operator=(const Reference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Reference(Reference&& from) noexcept
    : Reference() {
    *this = ::std::move(from);
  }

  inline Reference& operator=(Reference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Reference& default_instance();

  enum ToCase {
    kLocal = 1,
    kExternal = 2,
    TO_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reference* internal_default_instance() {
    return reinterpret_cast<const Reference*>(
               &_Reference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Reference* other);
  friend void swap(Reference& a, Reference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Reference* New() const final {
    return CreateMaybeMessage<Reference>(NULL);
  }

  Reference* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Reference>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Reference& from);
  void MergeFrom(const Reference& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string local = 1;
  private:
  bool has_local() const;
  public:
  void clear_local();
  static const int kLocalFieldNumber = 1;
  const ::std::string& local() const;
  void set_local(const ::std::string& value);
  #if LANG_CXX11
  void set_local(::std::string&& value);
  #endif
  void set_local(const char* value);
  void set_local(const char* value, size_t size);
  ::std::string* mutable_local();
  ::std::string* release_local();
  void set_allocated_local(::std::string* local);

  // .vlsir.utils.QualifiedName external = 2;
  bool has_external() const;
  void clear_external();
  static const int kExternalFieldNumber = 2;
  private:
  const ::vlsir::utils::QualifiedName& _internal_external() const;
  public:
  const ::vlsir::utils::QualifiedName& external() const;
  ::vlsir::utils::QualifiedName* release_external();
  ::vlsir::utils::QualifiedName* mutable_external();
  void set_allocated_external(::vlsir::utils::QualifiedName* external);

  void clear_to();
  ToCase to_case() const;
  // @@protoc_insertion_point(class_scope:vlsir.utils.Reference)
 private:
  void set_has_local();
  void set_has_external();

  inline bool has_to() const;
  inline void clear_has_to();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ToUnion {
    ToUnion() {}
    ::google::protobuf::internal::ArenaStringPtr local_;
    ::vlsir::utils::QualifiedName* external_;
  } to_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_utils_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LibraryMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vlsir.utils.LibraryMetadata) */ {
 public:
  LibraryMetadata();
  virtual ~LibraryMetadata();

  LibraryMetadata(const LibraryMetadata& from);

  inline LibraryMetadata& operator=(const LibraryMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LibraryMetadata(LibraryMetadata&& from) noexcept
    : LibraryMetadata() {
    *this = ::std::move(from);
  }

  inline LibraryMetadata& operator=(LibraryMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LibraryMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LibraryMetadata* internal_default_instance() {
    return reinterpret_cast<const LibraryMetadata*>(
               &_LibraryMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(LibraryMetadata* other);
  friend void swap(LibraryMetadata& a, LibraryMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LibraryMetadata* New() const final {
    return CreateMaybeMessage<LibraryMetadata>(NULL);
  }

  LibraryMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LibraryMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LibraryMetadata& from);
  void MergeFrom(const LibraryMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LibraryMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string cell_names = 10;
  int cell_names_size() const;
  void clear_cell_names();
  static const int kCellNamesFieldNumber = 10;
  const ::std::string& cell_names(int index) const;
  ::std::string* mutable_cell_names(int index);
  void set_cell_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_cell_names(int index, ::std::string&& value);
  #endif
  void set_cell_names(int index, const char* value);
  void set_cell_names(int index, const char* value, size_t size);
  ::std::string* add_cell_names();
  void add_cell_names(const ::std::string& value);
  #if LANG_CXX11
  void add_cell_names(::std::string&& value);
  #endif
  void add_cell_names(const char* value);
  void add_cell_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& cell_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cell_names();

  // string domain = 1;
  void clear_domain();
  static const int kDomainFieldNumber = 1;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // .vlsir.utils.AuthorMetadata author = 20;
  bool has_author() const;
  void clear_author();
  static const int kAuthorFieldNumber = 20;
  private:
  const ::vlsir::utils::AuthorMetadata& _internal_author() const;
  public:
  const ::vlsir::utils::AuthorMetadata& author() const;
  ::vlsir::utils::AuthorMetadata* release_author();
  ::vlsir::utils::AuthorMetadata* mutable_author();
  void set_allocated_author(::vlsir::utils::AuthorMetadata* author);

  // @@protoc_insertion_point(class_scope:vlsir.utils.LibraryMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cell_names_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::vlsir::utils::AuthorMetadata* author_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_utils_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthorMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vlsir.utils.AuthorMetadata) */ {
 public:
  AuthorMetadata();
  virtual ~AuthorMetadata();

  AuthorMetadata(const AuthorMetadata& from);

  inline AuthorMetadata& operator=(const AuthorMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthorMetadata(AuthorMetadata&& from) noexcept
    : AuthorMetadata() {
    *this = ::std::move(from);
  }

  inline AuthorMetadata& operator=(AuthorMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthorMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthorMetadata* internal_default_instance() {
    return reinterpret_cast<const AuthorMetadata*>(
               &_AuthorMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(AuthorMetadata* other);
  friend void swap(AuthorMetadata& a, AuthorMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthorMetadata* New() const final {
    return CreateMaybeMessage<AuthorMetadata>(NULL);
  }

  AuthorMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthorMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthorMetadata& from);
  void MergeFrom(const AuthorMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthorMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string author = 1;
  void clear_author();
  static const int kAuthorFieldNumber = 1;
  const ::std::string& author() const;
  void set_author(const ::std::string& value);
  #if LANG_CXX11
  void set_author(::std::string&& value);
  #endif
  void set_author(const char* value);
  void set_author(const char* value, size_t size);
  ::std::string* mutable_author();
  ::std::string* release_author();
  void set_allocated_author(::std::string* author);

  // string copyright = 10;
  void clear_copyright();
  static const int kCopyrightFieldNumber = 10;
  const ::std::string& copyright() const;
  void set_copyright(const ::std::string& value);
  #if LANG_CXX11
  void set_copyright(::std::string&& value);
  #endif
  void set_copyright(const char* value);
  void set_copyright(const char* value, size_t size);
  ::std::string* mutable_copyright();
  ::std::string* release_copyright();
  void set_allocated_copyright(::std::string* copyright);

  // string license = 11;
  void clear_license();
  static const int kLicenseFieldNumber = 11;
  const ::std::string& license() const;
  void set_license(const ::std::string& value);
  #if LANG_CXX11
  void set_license(::std::string&& value);
  #endif
  void set_license(const char* value);
  void set_license(const char* value, size_t size);
  ::std::string* mutable_license();
  ::std::string* release_license();
  void set_allocated_license(::std::string* license);

  // @@protoc_insertion_point(class_scope:vlsir.utils.AuthorMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr author_;
  ::google::protobuf::internal::ArenaStringPtr copyright_;
  ::google::protobuf::internal::ArenaStringPtr license_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_utils_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Prefixed

// .vlsir.utils.SIPrefix prefix = 1;
inline void Prefixed::clear_prefix() {
  prefix_ = 0;
}
inline ::vlsir::utils::SIPrefix Prefixed::prefix() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.Prefixed.prefix)
  return static_cast< ::vlsir::utils::SIPrefix >(prefix_);
}
inline void Prefixed::set_prefix(::vlsir::utils::SIPrefix value) {
  
  prefix_ = value;
  // @@protoc_insertion_point(field_set:vlsir.utils.Prefixed.prefix)
}

// int64 integer = 2;
inline bool Prefixed::has_integer() const {
  return number_case() == kInteger;
}
inline void Prefixed::set_has_integer() {
  _oneof_case_[0] = kInteger;
}
inline void Prefixed::clear_integer() {
  if (has_integer()) {
    number_.integer_ = GOOGLE_LONGLONG(0);
    clear_has_number();
  }
}
inline ::google::protobuf::int64 Prefixed::integer() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.Prefixed.integer)
  if (has_integer()) {
    return number_.integer_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void Prefixed::set_integer(::google::protobuf::int64 value) {
  if (!has_integer()) {
    clear_number();
    set_has_integer();
  }
  number_.integer_ = value;
  // @@protoc_insertion_point(field_set:vlsir.utils.Prefixed.integer)
}

// double double = 3;
inline bool Prefixed::has_double_() const {
  return number_case() == kDouble;
}
inline void Prefixed::set_has_double_() {
  _oneof_case_[0] = kDouble;
}
inline void Prefixed::clear_double_() {
  if (has_double_()) {
    number_.double__ = 0;
    clear_has_number();
  }
}
inline double Prefixed::double_() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.Prefixed.double)
  if (has_double_()) {
    return number_.double__;
  }
  return 0;
}
inline void Prefixed::set_double_(double value) {
  if (!has_double_()) {
    clear_number();
    set_has_double_();
  }
  number_.double__ = value;
  // @@protoc_insertion_point(field_set:vlsir.utils.Prefixed.double)
}

// string string = 4;
inline bool Prefixed::has_string() const {
  return number_case() == kString;
}
inline void Prefixed::set_has_string() {
  _oneof_case_[0] = kString;
}
inline void Prefixed::clear_string() {
  if (has_string()) {
    number_.string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_number();
  }
}
inline const ::std::string& Prefixed::string() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.Prefixed.string)
  if (has_string()) {
    return number_.string_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Prefixed::set_string(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:vlsir.utils.Prefixed.string)
  if (!has_string()) {
    clear_number();
    set_has_string();
    number_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  number_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vlsir.utils.Prefixed.string)
}
#if LANG_CXX11
inline void Prefixed::set_string(::std::string&& value) {
  // @@protoc_insertion_point(field_set:vlsir.utils.Prefixed.string)
  if (!has_string()) {
    clear_number();
    set_has_string();
    number_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  number_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vlsir.utils.Prefixed.string)
}
#endif
inline void Prefixed::set_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_string()) {
    clear_number();
    set_has_string();
    number_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  number_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vlsir.utils.Prefixed.string)
}
inline void Prefixed::set_string(const char* value, size_t size) {
  if (!has_string()) {
    clear_number();
    set_has_string();
    number_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  number_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vlsir.utils.Prefixed.string)
}
inline ::std::string* Prefixed::mutable_string() {
  if (!has_string()) {
    clear_number();
    set_has_string();
    number_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:vlsir.utils.Prefixed.string)
  return number_.string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Prefixed::release_string() {
  // @@protoc_insertion_point(field_release:vlsir.utils.Prefixed.string)
  if (has_string()) {
    clear_has_number();
    return number_.string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Prefixed::set_allocated_string(::std::string* string) {
  if (!has_string()) {
    number_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_number();
  if (string != NULL) {
    set_has_string();
    number_.string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string);
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.Prefixed.string)
}

inline bool Prefixed::has_number() const {
  return number_case() != NUMBER_NOT_SET;
}
inline void Prefixed::clear_has_number() {
  _oneof_case_[0] = NUMBER_NOT_SET;
}
inline Prefixed::NumberCase Prefixed::number_case() const {
  return Prefixed::NumberCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ParamValue

// int64 integer = 2;
inline bool ParamValue::has_integer() const {
  return value_case() == kInteger;
}
inline void ParamValue::set_has_integer() {
  _oneof_case_[0] = kInteger;
}
inline void ParamValue::clear_integer() {
  if (has_integer()) {
    value_.integer_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::int64 ParamValue::integer() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.ParamValue.integer)
  if (has_integer()) {
    return value_.integer_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void ParamValue::set_integer(::google::protobuf::int64 value) {
  if (!has_integer()) {
    clear_value();
    set_has_integer();
  }
  value_.integer_ = value;
  // @@protoc_insertion_point(field_set:vlsir.utils.ParamValue.integer)
}

// double double = 3;
inline bool ParamValue::has_double_() const {
  return value_case() == kDouble;
}
inline void ParamValue::set_has_double_() {
  _oneof_case_[0] = kDouble;
}
inline void ParamValue::clear_double_() {
  if (has_double_()) {
    value_.double__ = 0;
    clear_has_value();
  }
}
inline double ParamValue::double_() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.ParamValue.double)
  if (has_double_()) {
    return value_.double__;
  }
  return 0;
}
inline void ParamValue::set_double_(double value) {
  if (!has_double_()) {
    clear_value();
    set_has_double_();
  }
  value_.double__ = value;
  // @@protoc_insertion_point(field_set:vlsir.utils.ParamValue.double)
}

// string string = 4;
inline bool ParamValue::has_string() const {
  return value_case() == kString;
}
inline void ParamValue::set_has_string() {
  _oneof_case_[0] = kString;
}
inline void ParamValue::clear_string() {
  if (has_string()) {
    value_.string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& ParamValue::string() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.ParamValue.string)
  if (has_string()) {
    return value_.string_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ParamValue::set_string(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:vlsir.utils.ParamValue.string)
  if (!has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vlsir.utils.ParamValue.string)
}
#if LANG_CXX11
inline void ParamValue::set_string(::std::string&& value) {
  // @@protoc_insertion_point(field_set:vlsir.utils.ParamValue.string)
  if (!has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vlsir.utils.ParamValue.string)
}
#endif
inline void ParamValue::set_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vlsir.utils.ParamValue.string)
}
inline void ParamValue::set_string(const char* value, size_t size) {
  if (!has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vlsir.utils.ParamValue.string)
}
inline ::std::string* ParamValue::mutable_string() {
  if (!has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:vlsir.utils.ParamValue.string)
  return value_.string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamValue::release_string() {
  // @@protoc_insertion_point(field_release:vlsir.utils.ParamValue.string)
  if (has_string()) {
    clear_has_value();
    return value_.string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ParamValue::set_allocated_string(::std::string* string) {
  if (!has_string()) {
    value_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (string != NULL) {
    set_has_string();
    value_.string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string);
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.ParamValue.string)
}

// string literal = 5;
inline bool ParamValue::has_literal() const {
  return value_case() == kLiteral;
}
inline void ParamValue::set_has_literal() {
  _oneof_case_[0] = kLiteral;
}
inline void ParamValue::clear_literal() {
  if (has_literal()) {
    value_.literal_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& ParamValue::literal() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.ParamValue.literal)
  if (has_literal()) {
    return value_.literal_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ParamValue::set_literal(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:vlsir.utils.ParamValue.literal)
  if (!has_literal()) {
    clear_value();
    set_has_literal();
    value_.literal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.literal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vlsir.utils.ParamValue.literal)
}
#if LANG_CXX11
inline void ParamValue::set_literal(::std::string&& value) {
  // @@protoc_insertion_point(field_set:vlsir.utils.ParamValue.literal)
  if (!has_literal()) {
    clear_value();
    set_has_literal();
    value_.literal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.literal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vlsir.utils.ParamValue.literal)
}
#endif
inline void ParamValue::set_literal(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_literal()) {
    clear_value();
    set_has_literal();
    value_.literal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.literal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vlsir.utils.ParamValue.literal)
}
inline void ParamValue::set_literal(const char* value, size_t size) {
  if (!has_literal()) {
    clear_value();
    set_has_literal();
    value_.literal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.literal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vlsir.utils.ParamValue.literal)
}
inline ::std::string* ParamValue::mutable_literal() {
  if (!has_literal()) {
    clear_value();
    set_has_literal();
    value_.literal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:vlsir.utils.ParamValue.literal)
  return value_.literal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamValue::release_literal() {
  // @@protoc_insertion_point(field_release:vlsir.utils.ParamValue.literal)
  if (has_literal()) {
    clear_has_value();
    return value_.literal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ParamValue::set_allocated_literal(::std::string* literal) {
  if (!has_literal()) {
    value_.literal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (literal != NULL) {
    set_has_literal();
    value_.literal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), literal);
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.ParamValue.literal)
}

// .vlsir.utils.Prefixed prefixed = 6;
inline bool ParamValue::has_prefixed() const {
  return value_case() == kPrefixed;
}
inline void ParamValue::set_has_prefixed() {
  _oneof_case_[0] = kPrefixed;
}
inline void ParamValue::clear_prefixed() {
  if (has_prefixed()) {
    delete value_.prefixed_;
    clear_has_value();
  }
}
inline const ::vlsir::utils::Prefixed& ParamValue::_internal_prefixed() const {
  return *value_.prefixed_;
}
inline ::vlsir::utils::Prefixed* ParamValue::release_prefixed() {
  // @@protoc_insertion_point(field_release:vlsir.utils.ParamValue.prefixed)
  if (has_prefixed()) {
    clear_has_value();
      ::vlsir::utils::Prefixed* temp = value_.prefixed_;
    value_.prefixed_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::vlsir::utils::Prefixed& ParamValue::prefixed() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.ParamValue.prefixed)
  return has_prefixed()
      ? *value_.prefixed_
      : *reinterpret_cast< ::vlsir::utils::Prefixed*>(&::vlsir::utils::_Prefixed_default_instance_);
}
inline ::vlsir::utils::Prefixed* ParamValue::mutable_prefixed() {
  if (!has_prefixed()) {
    clear_value();
    set_has_prefixed();
    value_.prefixed_ = CreateMaybeMessage< ::vlsir::utils::Prefixed >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:vlsir.utils.ParamValue.prefixed)
  return value_.prefixed_;
}

inline bool ParamValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ParamValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ParamValue::ValueCase ParamValue::value_case() const {
  return ParamValue::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Param

// string name = 1;
inline void Param::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Param::name() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.Param.name)
  return name_.GetNoArena();
}
inline void Param::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vlsir.utils.Param.name)
}
#if LANG_CXX11
inline void Param::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vlsir.utils.Param.name)
}
#endif
inline void Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vlsir.utils.Param.name)
}
inline void Param::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vlsir.utils.Param.name)
}
inline ::std::string* Param::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:vlsir.utils.Param.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Param::release_name() {
  // @@protoc_insertion_point(field_release:vlsir.utils.Param.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Param::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.Param.name)
}

// .vlsir.utils.ParamValue value = 2;
inline bool Param::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void Param::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::vlsir::utils::ParamValue& Param::_internal_value() const {
  return *value_;
}
inline const ::vlsir::utils::ParamValue& Param::value() const {
  const ::vlsir::utils::ParamValue* p = value_;
  // @@protoc_insertion_point(field_get:vlsir.utils.Param.value)
  return p != NULL ? *p : *reinterpret_cast<const ::vlsir::utils::ParamValue*>(
      &::vlsir::utils::_ParamValue_default_instance_);
}
inline ::vlsir::utils::ParamValue* Param::release_value() {
  // @@protoc_insertion_point(field_release:vlsir.utils.Param.value)
  
  ::vlsir::utils::ParamValue* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::vlsir::utils::ParamValue* Param::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::vlsir::utils::ParamValue>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vlsir.utils.Param.value)
  return value_;
}
inline void Param::set_allocated_value(::vlsir::utils::ParamValue* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.Param.value)
}

// string desc = 3;
inline void Param::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Param::desc() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.Param.desc)
  return desc_.GetNoArena();
}
inline void Param::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vlsir.utils.Param.desc)
}
#if LANG_CXX11
inline void Param::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vlsir.utils.Param.desc)
}
#endif
inline void Param::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vlsir.utils.Param.desc)
}
inline void Param::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vlsir.utils.Param.desc)
}
inline ::std::string* Param::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:vlsir.utils.Param.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Param::release_desc() {
  // @@protoc_insertion_point(field_release:vlsir.utils.Param.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Param::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.Param.desc)
}

// -------------------------------------------------------------------

// QualifiedName

// string domain = 1;
inline void QualifiedName::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QualifiedName::domain() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.QualifiedName.domain)
  return domain_.GetNoArena();
}
inline void QualifiedName::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vlsir.utils.QualifiedName.domain)
}
#if LANG_CXX11
inline void QualifiedName::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vlsir.utils.QualifiedName.domain)
}
#endif
inline void QualifiedName::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vlsir.utils.QualifiedName.domain)
}
inline void QualifiedName::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vlsir.utils.QualifiedName.domain)
}
inline ::std::string* QualifiedName::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:vlsir.utils.QualifiedName.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QualifiedName::release_domain() {
  // @@protoc_insertion_point(field_release:vlsir.utils.QualifiedName.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QualifiedName::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.QualifiedName.domain)
}

// string name = 2;
inline void QualifiedName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QualifiedName::name() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.QualifiedName.name)
  return name_.GetNoArena();
}
inline void QualifiedName::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vlsir.utils.QualifiedName.name)
}
#if LANG_CXX11
inline void QualifiedName::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vlsir.utils.QualifiedName.name)
}
#endif
inline void QualifiedName::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vlsir.utils.QualifiedName.name)
}
inline void QualifiedName::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vlsir.utils.QualifiedName.name)
}
inline ::std::string* QualifiedName::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:vlsir.utils.QualifiedName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QualifiedName::release_name() {
  // @@protoc_insertion_point(field_release:vlsir.utils.QualifiedName.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QualifiedName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.QualifiedName.name)
}

// -------------------------------------------------------------------

// Reference

// string local = 1;
inline bool Reference::has_local() const {
  return to_case() == kLocal;
}
inline void Reference::set_has_local() {
  _oneof_case_[0] = kLocal;
}
inline void Reference::clear_local() {
  if (has_local()) {
    to_.local_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_to();
  }
}
inline const ::std::string& Reference::local() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.Reference.local)
  if (has_local()) {
    return to_.local_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Reference::set_local(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:vlsir.utils.Reference.local)
  if (!has_local()) {
    clear_to();
    set_has_local();
    to_.local_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  to_.local_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vlsir.utils.Reference.local)
}
#if LANG_CXX11
inline void Reference::set_local(::std::string&& value) {
  // @@protoc_insertion_point(field_set:vlsir.utils.Reference.local)
  if (!has_local()) {
    clear_to();
    set_has_local();
    to_.local_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  to_.local_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vlsir.utils.Reference.local)
}
#endif
inline void Reference::set_local(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_local()) {
    clear_to();
    set_has_local();
    to_.local_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  to_.local_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vlsir.utils.Reference.local)
}
inline void Reference::set_local(const char* value, size_t size) {
  if (!has_local()) {
    clear_to();
    set_has_local();
    to_.local_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  to_.local_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vlsir.utils.Reference.local)
}
inline ::std::string* Reference::mutable_local() {
  if (!has_local()) {
    clear_to();
    set_has_local();
    to_.local_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:vlsir.utils.Reference.local)
  return to_.local_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Reference::release_local() {
  // @@protoc_insertion_point(field_release:vlsir.utils.Reference.local)
  if (has_local()) {
    clear_has_to();
    return to_.local_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Reference::set_allocated_local(::std::string* local) {
  if (!has_local()) {
    to_.local_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_to();
  if (local != NULL) {
    set_has_local();
    to_.local_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local);
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.Reference.local)
}

// .vlsir.utils.QualifiedName external = 2;
inline bool Reference::has_external() const {
  return to_case() == kExternal;
}
inline void Reference::set_has_external() {
  _oneof_case_[0] = kExternal;
}
inline void Reference::clear_external() {
  if (has_external()) {
    delete to_.external_;
    clear_has_to();
  }
}
inline const ::vlsir::utils::QualifiedName& Reference::_internal_external() const {
  return *to_.external_;
}
inline ::vlsir::utils::QualifiedName* Reference::release_external() {
  // @@protoc_insertion_point(field_release:vlsir.utils.Reference.external)
  if (has_external()) {
    clear_has_to();
      ::vlsir::utils::QualifiedName* temp = to_.external_;
    to_.external_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::vlsir::utils::QualifiedName& Reference::external() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.Reference.external)
  return has_external()
      ? *to_.external_
      : *reinterpret_cast< ::vlsir::utils::QualifiedName*>(&::vlsir::utils::_QualifiedName_default_instance_);
}
inline ::vlsir::utils::QualifiedName* Reference::mutable_external() {
  if (!has_external()) {
    clear_to();
    set_has_external();
    to_.external_ = CreateMaybeMessage< ::vlsir::utils::QualifiedName >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:vlsir.utils.Reference.external)
  return to_.external_;
}

inline bool Reference::has_to() const {
  return to_case() != TO_NOT_SET;
}
inline void Reference::clear_has_to() {
  _oneof_case_[0] = TO_NOT_SET;
}
inline Reference::ToCase Reference::to_case() const {
  return Reference::ToCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// LibraryMetadata

// string domain = 1;
inline void LibraryMetadata::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LibraryMetadata::domain() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.LibraryMetadata.domain)
  return domain_.GetNoArena();
}
inline void LibraryMetadata::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vlsir.utils.LibraryMetadata.domain)
}
#if LANG_CXX11
inline void LibraryMetadata::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vlsir.utils.LibraryMetadata.domain)
}
#endif
inline void LibraryMetadata::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vlsir.utils.LibraryMetadata.domain)
}
inline void LibraryMetadata::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vlsir.utils.LibraryMetadata.domain)
}
inline ::std::string* LibraryMetadata::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:vlsir.utils.LibraryMetadata.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LibraryMetadata::release_domain() {
  // @@protoc_insertion_point(field_release:vlsir.utils.LibraryMetadata.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LibraryMetadata::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.LibraryMetadata.domain)
}

// repeated string cell_names = 10;
inline int LibraryMetadata::cell_names_size() const {
  return cell_names_.size();
}
inline void LibraryMetadata::clear_cell_names() {
  cell_names_.Clear();
}
inline const ::std::string& LibraryMetadata::cell_names(int index) const {
  // @@protoc_insertion_point(field_get:vlsir.utils.LibraryMetadata.cell_names)
  return cell_names_.Get(index);
}
inline ::std::string* LibraryMetadata::mutable_cell_names(int index) {
  // @@protoc_insertion_point(field_mutable:vlsir.utils.LibraryMetadata.cell_names)
  return cell_names_.Mutable(index);
}
inline void LibraryMetadata::set_cell_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:vlsir.utils.LibraryMetadata.cell_names)
  cell_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void LibraryMetadata::set_cell_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:vlsir.utils.LibraryMetadata.cell_names)
  cell_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void LibraryMetadata::set_cell_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  cell_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vlsir.utils.LibraryMetadata.cell_names)
}
inline void LibraryMetadata::set_cell_names(int index, const char* value, size_t size) {
  cell_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vlsir.utils.LibraryMetadata.cell_names)
}
inline ::std::string* LibraryMetadata::add_cell_names() {
  // @@protoc_insertion_point(field_add_mutable:vlsir.utils.LibraryMetadata.cell_names)
  return cell_names_.Add();
}
inline void LibraryMetadata::add_cell_names(const ::std::string& value) {
  cell_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vlsir.utils.LibraryMetadata.cell_names)
}
#if LANG_CXX11
inline void LibraryMetadata::add_cell_names(::std::string&& value) {
  cell_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vlsir.utils.LibraryMetadata.cell_names)
}
#endif
inline void LibraryMetadata::add_cell_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  cell_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vlsir.utils.LibraryMetadata.cell_names)
}
inline void LibraryMetadata::add_cell_names(const char* value, size_t size) {
  cell_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vlsir.utils.LibraryMetadata.cell_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LibraryMetadata::cell_names() const {
  // @@protoc_insertion_point(field_list:vlsir.utils.LibraryMetadata.cell_names)
  return cell_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LibraryMetadata::mutable_cell_names() {
  // @@protoc_insertion_point(field_mutable_list:vlsir.utils.LibraryMetadata.cell_names)
  return &cell_names_;
}

// .vlsir.utils.AuthorMetadata author = 20;
inline bool LibraryMetadata::has_author() const {
  return this != internal_default_instance() && author_ != NULL;
}
inline void LibraryMetadata::clear_author() {
  if (GetArenaNoVirtual() == NULL && author_ != NULL) {
    delete author_;
  }
  author_ = NULL;
}
inline const ::vlsir::utils::AuthorMetadata& LibraryMetadata::_internal_author() const {
  return *author_;
}
inline const ::vlsir::utils::AuthorMetadata& LibraryMetadata::author() const {
  const ::vlsir::utils::AuthorMetadata* p = author_;
  // @@protoc_insertion_point(field_get:vlsir.utils.LibraryMetadata.author)
  return p != NULL ? *p : *reinterpret_cast<const ::vlsir::utils::AuthorMetadata*>(
      &::vlsir::utils::_AuthorMetadata_default_instance_);
}
inline ::vlsir::utils::AuthorMetadata* LibraryMetadata::release_author() {
  // @@protoc_insertion_point(field_release:vlsir.utils.LibraryMetadata.author)
  
  ::vlsir::utils::AuthorMetadata* temp = author_;
  author_ = NULL;
  return temp;
}
inline ::vlsir::utils::AuthorMetadata* LibraryMetadata::mutable_author() {
  
  if (author_ == NULL) {
    auto* p = CreateMaybeMessage<::vlsir::utils::AuthorMetadata>(GetArenaNoVirtual());
    author_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vlsir.utils.LibraryMetadata.author)
  return author_;
}
inline void LibraryMetadata::set_allocated_author(::vlsir::utils::AuthorMetadata* author) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete author_;
  }
  if (author) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      author = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, author, submessage_arena);
    }
    
  } else {
    
  }
  author_ = author;
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.LibraryMetadata.author)
}

// -------------------------------------------------------------------

// AuthorMetadata

// string author = 1;
inline void AuthorMetadata::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthorMetadata::author() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.AuthorMetadata.author)
  return author_.GetNoArena();
}
inline void AuthorMetadata::set_author(const ::std::string& value) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vlsir.utils.AuthorMetadata.author)
}
#if LANG_CXX11
inline void AuthorMetadata::set_author(::std::string&& value) {
  
  author_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vlsir.utils.AuthorMetadata.author)
}
#endif
inline void AuthorMetadata::set_author(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vlsir.utils.AuthorMetadata.author)
}
inline void AuthorMetadata::set_author(const char* value, size_t size) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vlsir.utils.AuthorMetadata.author)
}
inline ::std::string* AuthorMetadata::mutable_author() {
  
  // @@protoc_insertion_point(field_mutable:vlsir.utils.AuthorMetadata.author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthorMetadata::release_author() {
  // @@protoc_insertion_point(field_release:vlsir.utils.AuthorMetadata.author)
  
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthorMetadata::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    
  } else {
    
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.AuthorMetadata.author)
}

// string copyright = 10;
inline void AuthorMetadata::clear_copyright() {
  copyright_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthorMetadata::copyright() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.AuthorMetadata.copyright)
  return copyright_.GetNoArena();
}
inline void AuthorMetadata::set_copyright(const ::std::string& value) {
  
  copyright_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vlsir.utils.AuthorMetadata.copyright)
}
#if LANG_CXX11
inline void AuthorMetadata::set_copyright(::std::string&& value) {
  
  copyright_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vlsir.utils.AuthorMetadata.copyright)
}
#endif
inline void AuthorMetadata::set_copyright(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  copyright_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vlsir.utils.AuthorMetadata.copyright)
}
inline void AuthorMetadata::set_copyright(const char* value, size_t size) {
  
  copyright_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vlsir.utils.AuthorMetadata.copyright)
}
inline ::std::string* AuthorMetadata::mutable_copyright() {
  
  // @@protoc_insertion_point(field_mutable:vlsir.utils.AuthorMetadata.copyright)
  return copyright_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthorMetadata::release_copyright() {
  // @@protoc_insertion_point(field_release:vlsir.utils.AuthorMetadata.copyright)
  
  return copyright_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthorMetadata::set_allocated_copyright(::std::string* copyright) {
  if (copyright != NULL) {
    
  } else {
    
  }
  copyright_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), copyright);
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.AuthorMetadata.copyright)
}

// string license = 11;
inline void AuthorMetadata::clear_license() {
  license_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthorMetadata::license() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.AuthorMetadata.license)
  return license_.GetNoArena();
}
inline void AuthorMetadata::set_license(const ::std::string& value) {
  
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vlsir.utils.AuthorMetadata.license)
}
#if LANG_CXX11
inline void AuthorMetadata::set_license(::std::string&& value) {
  
  license_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vlsir.utils.AuthorMetadata.license)
}
#endif
inline void AuthorMetadata::set_license(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vlsir.utils.AuthorMetadata.license)
}
inline void AuthorMetadata::set_license(const char* value, size_t size) {
  
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vlsir.utils.AuthorMetadata.license)
}
inline ::std::string* AuthorMetadata::mutable_license() {
  
  // @@protoc_insertion_point(field_mutable:vlsir.utils.AuthorMetadata.license)
  return license_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthorMetadata::release_license() {
  // @@protoc_insertion_point(field_release:vlsir.utils.AuthorMetadata.license)
  
  return license_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthorMetadata::set_allocated_license(::std::string* license) {
  if (license != NULL) {
    
  } else {
    
  }
  license_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), license);
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.AuthorMetadata.license)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace utils
}  // namespace vlsir

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::vlsir::utils::SIPrefix> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vlsir::utils::SIPrefix>() {
  return ::vlsir::utils::SIPrefix_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_utils_2eproto
