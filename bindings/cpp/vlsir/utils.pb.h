// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: utils.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_utils_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_utils_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_utils_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_utils_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_utils_2eproto;
namespace vlsir {
namespace utils {
class AuthorMetadata;
struct AuthorMetadataDefaultTypeInternal;
extern AuthorMetadataDefaultTypeInternal _AuthorMetadata_default_instance_;
class LibraryMetadata;
struct LibraryMetadataDefaultTypeInternal;
extern LibraryMetadataDefaultTypeInternal _LibraryMetadata_default_instance_;
class Param;
struct ParamDefaultTypeInternal;
extern ParamDefaultTypeInternal _Param_default_instance_;
class ParamValue;
struct ParamValueDefaultTypeInternal;
extern ParamValueDefaultTypeInternal _ParamValue_default_instance_;
class Prefixed;
struct PrefixedDefaultTypeInternal;
extern PrefixedDefaultTypeInternal _Prefixed_default_instance_;
class QualifiedName;
struct QualifiedNameDefaultTypeInternal;
extern QualifiedNameDefaultTypeInternal _QualifiedName_default_instance_;
class Reference;
struct ReferenceDefaultTypeInternal;
extern ReferenceDefaultTypeInternal _Reference_default_instance_;
}  // namespace utils
}  // namespace vlsir
PROTOBUF_NAMESPACE_OPEN
template<> ::vlsir::utils::AuthorMetadata* Arena::CreateMaybeMessage<::vlsir::utils::AuthorMetadata>(Arena*);
template<> ::vlsir::utils::LibraryMetadata* Arena::CreateMaybeMessage<::vlsir::utils::LibraryMetadata>(Arena*);
template<> ::vlsir::utils::Param* Arena::CreateMaybeMessage<::vlsir::utils::Param>(Arena*);
template<> ::vlsir::utils::ParamValue* Arena::CreateMaybeMessage<::vlsir::utils::ParamValue>(Arena*);
template<> ::vlsir::utils::Prefixed* Arena::CreateMaybeMessage<::vlsir::utils::Prefixed>(Arena*);
template<> ::vlsir::utils::QualifiedName* Arena::CreateMaybeMessage<::vlsir::utils::QualifiedName>(Arena*);
template<> ::vlsir::utils::Reference* Arena::CreateMaybeMessage<::vlsir::utils::Reference>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vlsir {
namespace utils {

enum SIPrefix : int {
  YOCTO = 0,
  ZEPTO = 1,
  ATTO = 2,
  FEMTO = 3,
  PICO = 4,
  NANO = 5,
  MICRO = 6,
  MILLI = 7,
  CENTI = 8,
  DECI = 9,
  DECA = 10,
  HECTO = 11,
  KILO = 12,
  MEGA = 13,
  GIGA = 14,
  TERA = 15,
  PETA = 16,
  EXA = 17,
  ZETTA = 18,
  YOTTA = 19,
  UNIT = 20,
  SIPrefix_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SIPrefix_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SIPrefix_IsValid(int value);
constexpr SIPrefix SIPrefix_MIN = YOCTO;
constexpr SIPrefix SIPrefix_MAX = UNIT;
constexpr int SIPrefix_ARRAYSIZE = SIPrefix_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SIPrefix_descriptor();
template<typename T>
inline const std::string& SIPrefix_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SIPrefix>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SIPrefix_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SIPrefix_descriptor(), enum_t_value);
}
inline bool SIPrefix_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SIPrefix* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SIPrefix>(
    SIPrefix_descriptor(), name, value);
}
// ===================================================================

class Prefixed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vlsir.utils.Prefixed) */ {
 public:
  inline Prefixed() : Prefixed(nullptr) {}
  ~Prefixed() override;
  explicit PROTOBUF_CONSTEXPR Prefixed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Prefixed(const Prefixed& from);
  Prefixed(Prefixed&& from) noexcept
    : Prefixed() {
    *this = ::std::move(from);
  }

  inline Prefixed& operator=(const Prefixed& from) {
    CopyFrom(from);
    return *this;
  }
  inline Prefixed& operator=(Prefixed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Prefixed& default_instance() {
    return *internal_default_instance();
  }
  enum NumberCase {
    kInt64Value = 2,
    kDoubleValue = 3,
    kStringValue = 4,
    NUMBER_NOT_SET = 0,
  };

  static inline const Prefixed* internal_default_instance() {
    return reinterpret_cast<const Prefixed*>(
               &_Prefixed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Prefixed& a, Prefixed& b) {
    a.Swap(&b);
  }
  inline void Swap(Prefixed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Prefixed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Prefixed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Prefixed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Prefixed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Prefixed& from) {
    Prefixed::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Prefixed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vlsir.utils.Prefixed";
  }
  protected:
  explicit Prefixed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 1,
    kInt64ValueFieldNumber = 2,
    kDoubleValueFieldNumber = 3,
    kStringValueFieldNumber = 4,
  };
  // .vlsir.utils.SIPrefix prefix = 1;
  void clear_prefix();
  ::vlsir::utils::SIPrefix prefix() const;
  void set_prefix(::vlsir::utils::SIPrefix value);
  private:
  ::vlsir::utils::SIPrefix _internal_prefix() const;
  void _internal_set_prefix(::vlsir::utils::SIPrefix value);
  public:

  // int64 int64_value = 2;
  bool has_int64_value() const;
  private:
  bool _internal_has_int64_value() const;
  public:
  void clear_int64_value();
  int64_t int64_value() const;
  void set_int64_value(int64_t value);
  private:
  int64_t _internal_int64_value() const;
  void _internal_set_int64_value(int64_t value);
  public:

  // double double_value = 3;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // string string_value = 4;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  void clear_number();
  NumberCase number_case() const;
  // @@protoc_insertion_point(class_scope:vlsir.utils.Prefixed)
 private:
  class _Internal;
  void set_has_int64_value();
  void set_has_double_value();
  void set_has_string_value();

  inline bool has_number() const;
  inline void clear_has_number();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int prefix_;
    union NumberUnion {
      constexpr NumberUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int64_t int64_value_;
      double double_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    } number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_utils_2eproto;
};
// -------------------------------------------------------------------

class ParamValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vlsir.utils.ParamValue) */ {
 public:
  inline ParamValue() : ParamValue(nullptr) {}
  ~ParamValue() override;
  explicit PROTOBUF_CONSTEXPR ParamValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParamValue(const ParamValue& from);
  ParamValue(ParamValue&& from) noexcept
    : ParamValue() {
    *this = ::std::move(from);
  }

  inline ParamValue& operator=(const ParamValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParamValue& operator=(ParamValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParamValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kBoolValue = 1,
    kInt64Value = 2,
    kDoubleValue = 3,
    kStringValue = 4,
    kLiteral = 5,
    kPrefixed = 6,
    VALUE_NOT_SET = 0,
  };

  static inline const ParamValue* internal_default_instance() {
    return reinterpret_cast<const ParamValue*>(
               &_ParamValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ParamValue& a, ParamValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ParamValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParamValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParamValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParamValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParamValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ParamValue& from) {
    ParamValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParamValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vlsir.utils.ParamValue";
  }
  protected:
  explicit ParamValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoolValueFieldNumber = 1,
    kInt64ValueFieldNumber = 2,
    kDoubleValueFieldNumber = 3,
    kStringValueFieldNumber = 4,
    kLiteralFieldNumber = 5,
    kPrefixedFieldNumber = 6,
  };
  // bool bool_value = 1;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // int64 int64_value = 2;
  bool has_int64_value() const;
  private:
  bool _internal_has_int64_value() const;
  public:
  void clear_int64_value();
  int64_t int64_value() const;
  void set_int64_value(int64_t value);
  private:
  int64_t _internal_int64_value() const;
  void _internal_set_int64_value(int64_t value);
  public:

  // double double_value = 3;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // string string_value = 4;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // string literal = 5;
  bool has_literal() const;
  private:
  bool _internal_has_literal() const;
  public:
  void clear_literal();
  const std::string& literal() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_literal(ArgT0&& arg0, ArgT... args);
  std::string* mutable_literal();
  PROTOBUF_NODISCARD std::string* release_literal();
  void set_allocated_literal(std::string* literal);
  private:
  const std::string& _internal_literal() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_literal(const std::string& value);
  std::string* _internal_mutable_literal();
  public:

  // .vlsir.utils.Prefixed prefixed = 6;
  bool has_prefixed() const;
  private:
  bool _internal_has_prefixed() const;
  public:
  void clear_prefixed();
  const ::vlsir::utils::Prefixed& prefixed() const;
  PROTOBUF_NODISCARD ::vlsir::utils::Prefixed* release_prefixed();
  ::vlsir::utils::Prefixed* mutable_prefixed();
  void set_allocated_prefixed(::vlsir::utils::Prefixed* prefixed);
  private:
  const ::vlsir::utils::Prefixed& _internal_prefixed() const;
  ::vlsir::utils::Prefixed* _internal_mutable_prefixed();
  public:
  void unsafe_arena_set_allocated_prefixed(
      ::vlsir::utils::Prefixed* prefixed);
  ::vlsir::utils::Prefixed* unsafe_arena_release_prefixed();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:vlsir.utils.ParamValue)
 private:
  class _Internal;
  void set_has_bool_value();
  void set_has_int64_value();
  void set_has_double_value();
  void set_has_string_value();
  void set_has_literal();
  void set_has_prefixed();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool bool_value_;
      int64_t int64_value_;
      double double_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr literal_;
      ::vlsir::utils::Prefixed* prefixed_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_utils_2eproto;
};
// -------------------------------------------------------------------

class Param final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vlsir.utils.Param) */ {
 public:
  inline Param() : Param(nullptr) {}
  ~Param() override;
  explicit PROTOBUF_CONSTEXPR Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Param(const Param& from);
  Param(Param&& from) noexcept
    : Param() {
    *this = ::std::move(from);
  }

  inline Param& operator=(const Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline Param& operator=(Param&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const Param* internal_default_instance() {
    return reinterpret_cast<const Param*>(
               &_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Param& a, Param& b) {
    a.Swap(&b);
  }
  inline void Swap(Param* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Param>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Param& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Param& from) {
    Param::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Param* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vlsir.utils.Param";
  }
  protected:
  explicit Param(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescFieldNumber = 3,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string desc = 3;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // .vlsir.utils.ParamValue value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::vlsir::utils::ParamValue& value() const;
  PROTOBUF_NODISCARD ::vlsir::utils::ParamValue* release_value();
  ::vlsir::utils::ParamValue* mutable_value();
  void set_allocated_value(::vlsir::utils::ParamValue* value);
  private:
  const ::vlsir::utils::ParamValue& _internal_value() const;
  ::vlsir::utils::ParamValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::vlsir::utils::ParamValue* value);
  ::vlsir::utils::ParamValue* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:vlsir.utils.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
    ::vlsir::utils::ParamValue* value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_utils_2eproto;
};
// -------------------------------------------------------------------

class QualifiedName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vlsir.utils.QualifiedName) */ {
 public:
  inline QualifiedName() : QualifiedName(nullptr) {}
  ~QualifiedName() override;
  explicit PROTOBUF_CONSTEXPR QualifiedName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QualifiedName(const QualifiedName& from);
  QualifiedName(QualifiedName&& from) noexcept
    : QualifiedName() {
    *this = ::std::move(from);
  }

  inline QualifiedName& operator=(const QualifiedName& from) {
    CopyFrom(from);
    return *this;
  }
  inline QualifiedName& operator=(QualifiedName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QualifiedName& default_instance() {
    return *internal_default_instance();
  }
  static inline const QualifiedName* internal_default_instance() {
    return reinterpret_cast<const QualifiedName*>(
               &_QualifiedName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QualifiedName& a, QualifiedName& b) {
    a.Swap(&b);
  }
  inline void Swap(QualifiedName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QualifiedName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QualifiedName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QualifiedName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QualifiedName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QualifiedName& from) {
    QualifiedName::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QualifiedName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vlsir.utils.QualifiedName";
  }
  protected:
  explicit QualifiedName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string domain = 1;
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:vlsir.utils.QualifiedName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_utils_2eproto;
};
// -------------------------------------------------------------------

class Reference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vlsir.utils.Reference) */ {
 public:
  inline Reference() : Reference(nullptr) {}
  ~Reference() override;
  explicit PROTOBUF_CONSTEXPR Reference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Reference(const Reference& from);
  Reference(Reference&& from) noexcept
    : Reference() {
    *this = ::std::move(from);
  }

  inline Reference& operator=(const Reference& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reference& operator=(Reference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Reference& default_instance() {
    return *internal_default_instance();
  }
  enum ToCase {
    kLocal = 1,
    kExternal = 2,
    TO_NOT_SET = 0,
  };

  static inline const Reference* internal_default_instance() {
    return reinterpret_cast<const Reference*>(
               &_Reference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Reference& a, Reference& b) {
    a.Swap(&b);
  }
  inline void Swap(Reference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Reference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Reference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Reference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Reference& from) {
    Reference::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vlsir.utils.Reference";
  }
  protected:
  explicit Reference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalFieldNumber = 1,
    kExternalFieldNumber = 2,
  };
  // string local = 1;
  bool has_local() const;
  private:
  bool _internal_has_local() const;
  public:
  void clear_local();
  const std::string& local() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_local(ArgT0&& arg0, ArgT... args);
  std::string* mutable_local();
  PROTOBUF_NODISCARD std::string* release_local();
  void set_allocated_local(std::string* local);
  private:
  const std::string& _internal_local() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local(const std::string& value);
  std::string* _internal_mutable_local();
  public:

  // .vlsir.utils.QualifiedName external = 2;
  bool has_external() const;
  private:
  bool _internal_has_external() const;
  public:
  void clear_external();
  const ::vlsir::utils::QualifiedName& external() const;
  PROTOBUF_NODISCARD ::vlsir::utils::QualifiedName* release_external();
  ::vlsir::utils::QualifiedName* mutable_external();
  void set_allocated_external(::vlsir::utils::QualifiedName* external);
  private:
  const ::vlsir::utils::QualifiedName& _internal_external() const;
  ::vlsir::utils::QualifiedName* _internal_mutable_external();
  public:
  void unsafe_arena_set_allocated_external(
      ::vlsir::utils::QualifiedName* external);
  ::vlsir::utils::QualifiedName* unsafe_arena_release_external();

  void clear_to();
  ToCase to_case() const;
  // @@protoc_insertion_point(class_scope:vlsir.utils.Reference)
 private:
  class _Internal;
  void set_has_local();
  void set_has_external();

  inline bool has_to() const;
  inline void clear_has_to();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ToUnion {
      constexpr ToUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_;
      ::vlsir::utils::QualifiedName* external_;
    } to_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_utils_2eproto;
};
// -------------------------------------------------------------------

class LibraryMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vlsir.utils.LibraryMetadata) */ {
 public:
  inline LibraryMetadata() : LibraryMetadata(nullptr) {}
  ~LibraryMetadata() override;
  explicit PROTOBUF_CONSTEXPR LibraryMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LibraryMetadata(const LibraryMetadata& from);
  LibraryMetadata(LibraryMetadata&& from) noexcept
    : LibraryMetadata() {
    *this = ::std::move(from);
  }

  inline LibraryMetadata& operator=(const LibraryMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline LibraryMetadata& operator=(LibraryMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LibraryMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const LibraryMetadata* internal_default_instance() {
    return reinterpret_cast<const LibraryMetadata*>(
               &_LibraryMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LibraryMetadata& a, LibraryMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(LibraryMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LibraryMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LibraryMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LibraryMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LibraryMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LibraryMetadata& from) {
    LibraryMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LibraryMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vlsir.utils.LibraryMetadata";
  }
  protected:
  explicit LibraryMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellNamesFieldNumber = 10,
    kDomainFieldNumber = 1,
    kAuthorFieldNumber = 20,
  };
  // repeated string cell_names = 10;
  int cell_names_size() const;
  private:
  int _internal_cell_names_size() const;
  public:
  void clear_cell_names();
  const std::string& cell_names(int index) const;
  std::string* mutable_cell_names(int index);
  void set_cell_names(int index, const std::string& value);
  void set_cell_names(int index, std::string&& value);
  void set_cell_names(int index, const char* value);
  void set_cell_names(int index, const char* value, size_t size);
  std::string* add_cell_names();
  void add_cell_names(const std::string& value);
  void add_cell_names(std::string&& value);
  void add_cell_names(const char* value);
  void add_cell_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cell_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cell_names();
  private:
  const std::string& _internal_cell_names(int index) const;
  std::string* _internal_add_cell_names();
  public:

  // string domain = 1;
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // .vlsir.utils.AuthorMetadata author = 20;
  bool has_author() const;
  private:
  bool _internal_has_author() const;
  public:
  void clear_author();
  const ::vlsir::utils::AuthorMetadata& author() const;
  PROTOBUF_NODISCARD ::vlsir::utils::AuthorMetadata* release_author();
  ::vlsir::utils::AuthorMetadata* mutable_author();
  void set_allocated_author(::vlsir::utils::AuthorMetadata* author);
  private:
  const ::vlsir::utils::AuthorMetadata& _internal_author() const;
  ::vlsir::utils::AuthorMetadata* _internal_mutable_author();
  public:
  void unsafe_arena_set_allocated_author(
      ::vlsir::utils::AuthorMetadata* author);
  ::vlsir::utils::AuthorMetadata* unsafe_arena_release_author();

  // @@protoc_insertion_point(class_scope:vlsir.utils.LibraryMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cell_names_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
    ::vlsir::utils::AuthorMetadata* author_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_utils_2eproto;
};
// -------------------------------------------------------------------

class AuthorMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vlsir.utils.AuthorMetadata) */ {
 public:
  inline AuthorMetadata() : AuthorMetadata(nullptr) {}
  ~AuthorMetadata() override;
  explicit PROTOBUF_CONSTEXPR AuthorMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthorMetadata(const AuthorMetadata& from);
  AuthorMetadata(AuthorMetadata&& from) noexcept
    : AuthorMetadata() {
    *this = ::std::move(from);
  }

  inline AuthorMetadata& operator=(const AuthorMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthorMetadata& operator=(AuthorMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthorMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthorMetadata* internal_default_instance() {
    return reinterpret_cast<const AuthorMetadata*>(
               &_AuthorMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AuthorMetadata& a, AuthorMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthorMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthorMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthorMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthorMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthorMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuthorMetadata& from) {
    AuthorMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthorMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vlsir.utils.AuthorMetadata";
  }
  protected:
  explicit AuthorMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorFieldNumber = 1,
    kCopyrightFieldNumber = 10,
    kLicenseFieldNumber = 11,
  };
  // string author = 1;
  void clear_author();
  const std::string& author() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_author(ArgT0&& arg0, ArgT... args);
  std::string* mutable_author();
  PROTOBUF_NODISCARD std::string* release_author();
  void set_allocated_author(std::string* author);
  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(const std::string& value);
  std::string* _internal_mutable_author();
  public:

  // string copyright = 10;
  void clear_copyright();
  const std::string& copyright() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_copyright(ArgT0&& arg0, ArgT... args);
  std::string* mutable_copyright();
  PROTOBUF_NODISCARD std::string* release_copyright();
  void set_allocated_copyright(std::string* copyright);
  private:
  const std::string& _internal_copyright() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_copyright(const std::string& value);
  std::string* _internal_mutable_copyright();
  public:

  // string license = 11;
  void clear_license();
  const std::string& license() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_license(ArgT0&& arg0, ArgT... args);
  std::string* mutable_license();
  PROTOBUF_NODISCARD std::string* release_license();
  void set_allocated_license(std::string* license);
  private:
  const std::string& _internal_license() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_license(const std::string& value);
  std::string* _internal_mutable_license();
  public:

  // @@protoc_insertion_point(class_scope:vlsir.utils.AuthorMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr copyright_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr license_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_utils_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Prefixed

// .vlsir.utils.SIPrefix prefix = 1;
inline void Prefixed::clear_prefix() {
  _impl_.prefix_ = 0;
}
inline ::vlsir::utils::SIPrefix Prefixed::_internal_prefix() const {
  return static_cast< ::vlsir::utils::SIPrefix >(_impl_.prefix_);
}
inline ::vlsir::utils::SIPrefix Prefixed::prefix() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.Prefixed.prefix)
  return _internal_prefix();
}
inline void Prefixed::_internal_set_prefix(::vlsir::utils::SIPrefix value) {
  
  _impl_.prefix_ = value;
}
inline void Prefixed::set_prefix(::vlsir::utils::SIPrefix value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:vlsir.utils.Prefixed.prefix)
}

// int64 int64_value = 2;
inline bool Prefixed::_internal_has_int64_value() const {
  return number_case() == kInt64Value;
}
inline bool Prefixed::has_int64_value() const {
  return _internal_has_int64_value();
}
inline void Prefixed::set_has_int64_value() {
  _impl_._oneof_case_[0] = kInt64Value;
}
inline void Prefixed::clear_int64_value() {
  if (_internal_has_int64_value()) {
    _impl_.number_.int64_value_ = int64_t{0};
    clear_has_number();
  }
}
inline int64_t Prefixed::_internal_int64_value() const {
  if (_internal_has_int64_value()) {
    return _impl_.number_.int64_value_;
  }
  return int64_t{0};
}
inline void Prefixed::_internal_set_int64_value(int64_t value) {
  if (!_internal_has_int64_value()) {
    clear_number();
    set_has_int64_value();
  }
  _impl_.number_.int64_value_ = value;
}
inline int64_t Prefixed::int64_value() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.Prefixed.int64_value)
  return _internal_int64_value();
}
inline void Prefixed::set_int64_value(int64_t value) {
  _internal_set_int64_value(value);
  // @@protoc_insertion_point(field_set:vlsir.utils.Prefixed.int64_value)
}

// double double_value = 3;
inline bool Prefixed::_internal_has_double_value() const {
  return number_case() == kDoubleValue;
}
inline bool Prefixed::has_double_value() const {
  return _internal_has_double_value();
}
inline void Prefixed::set_has_double_value() {
  _impl_._oneof_case_[0] = kDoubleValue;
}
inline void Prefixed::clear_double_value() {
  if (_internal_has_double_value()) {
    _impl_.number_.double_value_ = 0;
    clear_has_number();
  }
}
inline double Prefixed::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return _impl_.number_.double_value_;
  }
  return 0;
}
inline void Prefixed::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_number();
    set_has_double_value();
  }
  _impl_.number_.double_value_ = value;
}
inline double Prefixed::double_value() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.Prefixed.double_value)
  return _internal_double_value();
}
inline void Prefixed::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:vlsir.utils.Prefixed.double_value)
}

// string string_value = 4;
inline bool Prefixed::_internal_has_string_value() const {
  return number_case() == kStringValue;
}
inline bool Prefixed::has_string_value() const {
  return _internal_has_string_value();
}
inline void Prefixed::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void Prefixed::clear_string_value() {
  if (_internal_has_string_value()) {
    _impl_.number_.string_value_.Destroy();
    clear_has_number();
  }
}
inline const std::string& Prefixed::string_value() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.Prefixed.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void Prefixed::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_number();
    set_has_string_value();
    _impl_.number_.string_value_.InitDefault();
  }
  _impl_.number_.string_value_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vlsir.utils.Prefixed.string_value)
}
inline std::string* Prefixed::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:vlsir.utils.Prefixed.string_value)
  return _s;
}
inline const std::string& Prefixed::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return _impl_.number_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Prefixed::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_number();
    set_has_string_value();
    _impl_.number_.string_value_.InitDefault();
  }
  _impl_.number_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* Prefixed::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_number();
    set_has_string_value();
    _impl_.number_.string_value_.InitDefault();
  }
  return _impl_.number_.string_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* Prefixed::release_string_value() {
  // @@protoc_insertion_point(field_release:vlsir.utils.Prefixed.string_value)
  if (_internal_has_string_value()) {
    clear_has_number();
    return _impl_.number_.string_value_.Release();
  } else {
    return nullptr;
  }
}
inline void Prefixed::set_allocated_string_value(std::string* string_value) {
  if (has_number()) {
    clear_number();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    _impl_.number_.string_value_.InitAllocated(string_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.Prefixed.string_value)
}

inline bool Prefixed::has_number() const {
  return number_case() != NUMBER_NOT_SET;
}
inline void Prefixed::clear_has_number() {
  _impl_._oneof_case_[0] = NUMBER_NOT_SET;
}
inline Prefixed::NumberCase Prefixed::number_case() const {
  return Prefixed::NumberCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ParamValue

// bool bool_value = 1;
inline bool ParamValue::_internal_has_bool_value() const {
  return value_case() == kBoolValue;
}
inline bool ParamValue::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void ParamValue::set_has_bool_value() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline void ParamValue::clear_bool_value() {
  if (_internal_has_bool_value()) {
    _impl_.value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool ParamValue::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return _impl_.value_.bool_value_;
  }
  return false;
}
inline void ParamValue::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  _impl_.value_.bool_value_ = value;
}
inline bool ParamValue::bool_value() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.ParamValue.bool_value)
  return _internal_bool_value();
}
inline void ParamValue::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:vlsir.utils.ParamValue.bool_value)
}

// int64 int64_value = 2;
inline bool ParamValue::_internal_has_int64_value() const {
  return value_case() == kInt64Value;
}
inline bool ParamValue::has_int64_value() const {
  return _internal_has_int64_value();
}
inline void ParamValue::set_has_int64_value() {
  _impl_._oneof_case_[0] = kInt64Value;
}
inline void ParamValue::clear_int64_value() {
  if (_internal_has_int64_value()) {
    _impl_.value_.int64_value_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t ParamValue::_internal_int64_value() const {
  if (_internal_has_int64_value()) {
    return _impl_.value_.int64_value_;
  }
  return int64_t{0};
}
inline void ParamValue::_internal_set_int64_value(int64_t value) {
  if (!_internal_has_int64_value()) {
    clear_value();
    set_has_int64_value();
  }
  _impl_.value_.int64_value_ = value;
}
inline int64_t ParamValue::int64_value() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.ParamValue.int64_value)
  return _internal_int64_value();
}
inline void ParamValue::set_int64_value(int64_t value) {
  _internal_set_int64_value(value);
  // @@protoc_insertion_point(field_set:vlsir.utils.ParamValue.int64_value)
}

// double double_value = 3;
inline bool ParamValue::_internal_has_double_value() const {
  return value_case() == kDoubleValue;
}
inline bool ParamValue::has_double_value() const {
  return _internal_has_double_value();
}
inline void ParamValue::set_has_double_value() {
  _impl_._oneof_case_[0] = kDoubleValue;
}
inline void ParamValue::clear_double_value() {
  if (_internal_has_double_value()) {
    _impl_.value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double ParamValue::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return _impl_.value_.double_value_;
  }
  return 0;
}
inline void ParamValue::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  _impl_.value_.double_value_ = value;
}
inline double ParamValue::double_value() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.ParamValue.double_value)
  return _internal_double_value();
}
inline void ParamValue::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:vlsir.utils.ParamValue.double_value)
}

// string string_value = 4;
inline bool ParamValue::_internal_has_string_value() const {
  return value_case() == kStringValue;
}
inline bool ParamValue::has_string_value() const {
  return _internal_has_string_value();
}
inline void ParamValue::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void ParamValue::clear_string_value() {
  if (_internal_has_string_value()) {
    _impl_.value_.string_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& ParamValue::string_value() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.ParamValue.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void ParamValue::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vlsir.utils.ParamValue.string_value)
}
inline std::string* ParamValue::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:vlsir.utils.ParamValue.string_value)
  return _s;
}
inline const std::string& ParamValue::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return _impl_.value_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ParamValue::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* ParamValue::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  return _impl_.value_.string_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* ParamValue::release_string_value() {
  // @@protoc_insertion_point(field_release:vlsir.utils.ParamValue.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
    return _impl_.value_.string_value_.Release();
  } else {
    return nullptr;
  }
}
inline void ParamValue::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    _impl_.value_.string_value_.InitAllocated(string_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.ParamValue.string_value)
}

// string literal = 5;
inline bool ParamValue::_internal_has_literal() const {
  return value_case() == kLiteral;
}
inline bool ParamValue::has_literal() const {
  return _internal_has_literal();
}
inline void ParamValue::set_has_literal() {
  _impl_._oneof_case_[0] = kLiteral;
}
inline void ParamValue::clear_literal() {
  if (_internal_has_literal()) {
    _impl_.value_.literal_.Destroy();
    clear_has_value();
  }
}
inline const std::string& ParamValue::literal() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.ParamValue.literal)
  return _internal_literal();
}
template <typename ArgT0, typename... ArgT>
inline void ParamValue::set_literal(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_literal()) {
    clear_value();
    set_has_literal();
    _impl_.value_.literal_.InitDefault();
  }
  _impl_.value_.literal_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vlsir.utils.ParamValue.literal)
}
inline std::string* ParamValue::mutable_literal() {
  std::string* _s = _internal_mutable_literal();
  // @@protoc_insertion_point(field_mutable:vlsir.utils.ParamValue.literal)
  return _s;
}
inline const std::string& ParamValue::_internal_literal() const {
  if (_internal_has_literal()) {
    return _impl_.value_.literal_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ParamValue::_internal_set_literal(const std::string& value) {
  if (!_internal_has_literal()) {
    clear_value();
    set_has_literal();
    _impl_.value_.literal_.InitDefault();
  }
  _impl_.value_.literal_.Set(value, GetArenaForAllocation());
}
inline std::string* ParamValue::_internal_mutable_literal() {
  if (!_internal_has_literal()) {
    clear_value();
    set_has_literal();
    _impl_.value_.literal_.InitDefault();
  }
  return _impl_.value_.literal_.Mutable(      GetArenaForAllocation());
}
inline std::string* ParamValue::release_literal() {
  // @@protoc_insertion_point(field_release:vlsir.utils.ParamValue.literal)
  if (_internal_has_literal()) {
    clear_has_value();
    return _impl_.value_.literal_.Release();
  } else {
    return nullptr;
  }
}
inline void ParamValue::set_allocated_literal(std::string* literal) {
  if (has_value()) {
    clear_value();
  }
  if (literal != nullptr) {
    set_has_literal();
    _impl_.value_.literal_.InitAllocated(literal, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.ParamValue.literal)
}

// .vlsir.utils.Prefixed prefixed = 6;
inline bool ParamValue::_internal_has_prefixed() const {
  return value_case() == kPrefixed;
}
inline bool ParamValue::has_prefixed() const {
  return _internal_has_prefixed();
}
inline void ParamValue::set_has_prefixed() {
  _impl_._oneof_case_[0] = kPrefixed;
}
inline void ParamValue::clear_prefixed() {
  if (_internal_has_prefixed()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.prefixed_;
    }
    clear_has_value();
  }
}
inline ::vlsir::utils::Prefixed* ParamValue::release_prefixed() {
  // @@protoc_insertion_point(field_release:vlsir.utils.ParamValue.prefixed)
  if (_internal_has_prefixed()) {
    clear_has_value();
    ::vlsir::utils::Prefixed* temp = _impl_.value_.prefixed_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.prefixed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vlsir::utils::Prefixed& ParamValue::_internal_prefixed() const {
  return _internal_has_prefixed()
      ? *_impl_.value_.prefixed_
      : reinterpret_cast< ::vlsir::utils::Prefixed&>(::vlsir::utils::_Prefixed_default_instance_);
}
inline const ::vlsir::utils::Prefixed& ParamValue::prefixed() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.ParamValue.prefixed)
  return _internal_prefixed();
}
inline ::vlsir::utils::Prefixed* ParamValue::unsafe_arena_release_prefixed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vlsir.utils.ParamValue.prefixed)
  if (_internal_has_prefixed()) {
    clear_has_value();
    ::vlsir::utils::Prefixed* temp = _impl_.value_.prefixed_;
    _impl_.value_.prefixed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ParamValue::unsafe_arena_set_allocated_prefixed(::vlsir::utils::Prefixed* prefixed) {
  clear_value();
  if (prefixed) {
    set_has_prefixed();
    _impl_.value_.prefixed_ = prefixed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vlsir.utils.ParamValue.prefixed)
}
inline ::vlsir::utils::Prefixed* ParamValue::_internal_mutable_prefixed() {
  if (!_internal_has_prefixed()) {
    clear_value();
    set_has_prefixed();
    _impl_.value_.prefixed_ = CreateMaybeMessage< ::vlsir::utils::Prefixed >(GetArenaForAllocation());
  }
  return _impl_.value_.prefixed_;
}
inline ::vlsir::utils::Prefixed* ParamValue::mutable_prefixed() {
  ::vlsir::utils::Prefixed* _msg = _internal_mutable_prefixed();
  // @@protoc_insertion_point(field_mutable:vlsir.utils.ParamValue.prefixed)
  return _msg;
}

inline bool ParamValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ParamValue::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline ParamValue::ValueCase ParamValue::value_case() const {
  return ParamValue::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Param

// string name = 1;
inline void Param::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Param::name() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.Param.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Param::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vlsir.utils.Param.name)
}
inline std::string* Param::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:vlsir.utils.Param.name)
  return _s;
}
inline const std::string& Param::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Param::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Param::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Param::release_name() {
  // @@protoc_insertion_point(field_release:vlsir.utils.Param.name)
  return _impl_.name_.Release();
}
inline void Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.Param.name)
}

// .vlsir.utils.ParamValue value = 2;
inline bool Param::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool Param::has_value() const {
  return _internal_has_value();
}
inline void Param::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
inline const ::vlsir::utils::ParamValue& Param::_internal_value() const {
  const ::vlsir::utils::ParamValue* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::vlsir::utils::ParamValue&>(
      ::vlsir::utils::_ParamValue_default_instance_);
}
inline const ::vlsir::utils::ParamValue& Param::value() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.Param.value)
  return _internal_value();
}
inline void Param::unsafe_arena_set_allocated_value(
    ::vlsir::utils::ParamValue* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vlsir.utils.Param.value)
}
inline ::vlsir::utils::ParamValue* Param::release_value() {
  
  ::vlsir::utils::ParamValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vlsir::utils::ParamValue* Param::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:vlsir.utils.Param.value)
  
  ::vlsir::utils::ParamValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::vlsir::utils::ParamValue* Param::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::vlsir::utils::ParamValue>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::vlsir::utils::ParamValue* Param::mutable_value() {
  ::vlsir::utils::ParamValue* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:vlsir.utils.Param.value)
  return _msg;
}
inline void Param::set_allocated_value(::vlsir::utils::ParamValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.Param.value)
}

// string desc = 3;
inline void Param::clear_desc() {
  _impl_.desc_.ClearToEmpty();
}
inline const std::string& Param::desc() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.Param.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Param::set_desc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.desc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vlsir.utils.Param.desc)
}
inline std::string* Param::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:vlsir.utils.Param.desc)
  return _s;
}
inline const std::string& Param::_internal_desc() const {
  return _impl_.desc_.Get();
}
inline void Param::_internal_set_desc(const std::string& value) {
  
  _impl_.desc_.Set(value, GetArenaForAllocation());
}
inline std::string* Param::_internal_mutable_desc() {
  
  return _impl_.desc_.Mutable(GetArenaForAllocation());
}
inline std::string* Param::release_desc() {
  // @@protoc_insertion_point(field_release:vlsir.utils.Param.desc)
  return _impl_.desc_.Release();
}
inline void Param::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  _impl_.desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.desc_.IsDefault()) {
    _impl_.desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.Param.desc)
}

// -------------------------------------------------------------------

// QualifiedName

// string domain = 1;
inline void QualifiedName::clear_domain() {
  _impl_.domain_.ClearToEmpty();
}
inline const std::string& QualifiedName::domain() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.QualifiedName.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QualifiedName::set_domain(ArgT0&& arg0, ArgT... args) {
 
 _impl_.domain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vlsir.utils.QualifiedName.domain)
}
inline std::string* QualifiedName::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:vlsir.utils.QualifiedName.domain)
  return _s;
}
inline const std::string& QualifiedName::_internal_domain() const {
  return _impl_.domain_.Get();
}
inline void QualifiedName::_internal_set_domain(const std::string& value) {
  
  _impl_.domain_.Set(value, GetArenaForAllocation());
}
inline std::string* QualifiedName::_internal_mutable_domain() {
  
  return _impl_.domain_.Mutable(GetArenaForAllocation());
}
inline std::string* QualifiedName::release_domain() {
  // @@protoc_insertion_point(field_release:vlsir.utils.QualifiedName.domain)
  return _impl_.domain_.Release();
}
inline void QualifiedName::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  _impl_.domain_.SetAllocated(domain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_.IsDefault()) {
    _impl_.domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.QualifiedName.domain)
}

// string name = 2;
inline void QualifiedName::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& QualifiedName::name() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.QualifiedName.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QualifiedName::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vlsir.utils.QualifiedName.name)
}
inline std::string* QualifiedName::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:vlsir.utils.QualifiedName.name)
  return _s;
}
inline const std::string& QualifiedName::_internal_name() const {
  return _impl_.name_.Get();
}
inline void QualifiedName::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* QualifiedName::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* QualifiedName::release_name() {
  // @@protoc_insertion_point(field_release:vlsir.utils.QualifiedName.name)
  return _impl_.name_.Release();
}
inline void QualifiedName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.QualifiedName.name)
}

// -------------------------------------------------------------------

// Reference

// string local = 1;
inline bool Reference::_internal_has_local() const {
  return to_case() == kLocal;
}
inline bool Reference::has_local() const {
  return _internal_has_local();
}
inline void Reference::set_has_local() {
  _impl_._oneof_case_[0] = kLocal;
}
inline void Reference::clear_local() {
  if (_internal_has_local()) {
    _impl_.to_.local_.Destroy();
    clear_has_to();
  }
}
inline const std::string& Reference::local() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.Reference.local)
  return _internal_local();
}
template <typename ArgT0, typename... ArgT>
inline void Reference::set_local(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_local()) {
    clear_to();
    set_has_local();
    _impl_.to_.local_.InitDefault();
  }
  _impl_.to_.local_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vlsir.utils.Reference.local)
}
inline std::string* Reference::mutable_local() {
  std::string* _s = _internal_mutable_local();
  // @@protoc_insertion_point(field_mutable:vlsir.utils.Reference.local)
  return _s;
}
inline const std::string& Reference::_internal_local() const {
  if (_internal_has_local()) {
    return _impl_.to_.local_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Reference::_internal_set_local(const std::string& value) {
  if (!_internal_has_local()) {
    clear_to();
    set_has_local();
    _impl_.to_.local_.InitDefault();
  }
  _impl_.to_.local_.Set(value, GetArenaForAllocation());
}
inline std::string* Reference::_internal_mutable_local() {
  if (!_internal_has_local()) {
    clear_to();
    set_has_local();
    _impl_.to_.local_.InitDefault();
  }
  return _impl_.to_.local_.Mutable(      GetArenaForAllocation());
}
inline std::string* Reference::release_local() {
  // @@protoc_insertion_point(field_release:vlsir.utils.Reference.local)
  if (_internal_has_local()) {
    clear_has_to();
    return _impl_.to_.local_.Release();
  } else {
    return nullptr;
  }
}
inline void Reference::set_allocated_local(std::string* local) {
  if (has_to()) {
    clear_to();
  }
  if (local != nullptr) {
    set_has_local();
    _impl_.to_.local_.InitAllocated(local, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.Reference.local)
}

// .vlsir.utils.QualifiedName external = 2;
inline bool Reference::_internal_has_external() const {
  return to_case() == kExternal;
}
inline bool Reference::has_external() const {
  return _internal_has_external();
}
inline void Reference::set_has_external() {
  _impl_._oneof_case_[0] = kExternal;
}
inline void Reference::clear_external() {
  if (_internal_has_external()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.to_.external_;
    }
    clear_has_to();
  }
}
inline ::vlsir::utils::QualifiedName* Reference::release_external() {
  // @@protoc_insertion_point(field_release:vlsir.utils.Reference.external)
  if (_internal_has_external()) {
    clear_has_to();
    ::vlsir::utils::QualifiedName* temp = _impl_.to_.external_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.to_.external_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vlsir::utils::QualifiedName& Reference::_internal_external() const {
  return _internal_has_external()
      ? *_impl_.to_.external_
      : reinterpret_cast< ::vlsir::utils::QualifiedName&>(::vlsir::utils::_QualifiedName_default_instance_);
}
inline const ::vlsir::utils::QualifiedName& Reference::external() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.Reference.external)
  return _internal_external();
}
inline ::vlsir::utils::QualifiedName* Reference::unsafe_arena_release_external() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vlsir.utils.Reference.external)
  if (_internal_has_external()) {
    clear_has_to();
    ::vlsir::utils::QualifiedName* temp = _impl_.to_.external_;
    _impl_.to_.external_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Reference::unsafe_arena_set_allocated_external(::vlsir::utils::QualifiedName* external) {
  clear_to();
  if (external) {
    set_has_external();
    _impl_.to_.external_ = external;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vlsir.utils.Reference.external)
}
inline ::vlsir::utils::QualifiedName* Reference::_internal_mutable_external() {
  if (!_internal_has_external()) {
    clear_to();
    set_has_external();
    _impl_.to_.external_ = CreateMaybeMessage< ::vlsir::utils::QualifiedName >(GetArenaForAllocation());
  }
  return _impl_.to_.external_;
}
inline ::vlsir::utils::QualifiedName* Reference::mutable_external() {
  ::vlsir::utils::QualifiedName* _msg = _internal_mutable_external();
  // @@protoc_insertion_point(field_mutable:vlsir.utils.Reference.external)
  return _msg;
}

inline bool Reference::has_to() const {
  return to_case() != TO_NOT_SET;
}
inline void Reference::clear_has_to() {
  _impl_._oneof_case_[0] = TO_NOT_SET;
}
inline Reference::ToCase Reference::to_case() const {
  return Reference::ToCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// LibraryMetadata

// string domain = 1;
inline void LibraryMetadata::clear_domain() {
  _impl_.domain_.ClearToEmpty();
}
inline const std::string& LibraryMetadata::domain() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.LibraryMetadata.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LibraryMetadata::set_domain(ArgT0&& arg0, ArgT... args) {
 
 _impl_.domain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vlsir.utils.LibraryMetadata.domain)
}
inline std::string* LibraryMetadata::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:vlsir.utils.LibraryMetadata.domain)
  return _s;
}
inline const std::string& LibraryMetadata::_internal_domain() const {
  return _impl_.domain_.Get();
}
inline void LibraryMetadata::_internal_set_domain(const std::string& value) {
  
  _impl_.domain_.Set(value, GetArenaForAllocation());
}
inline std::string* LibraryMetadata::_internal_mutable_domain() {
  
  return _impl_.domain_.Mutable(GetArenaForAllocation());
}
inline std::string* LibraryMetadata::release_domain() {
  // @@protoc_insertion_point(field_release:vlsir.utils.LibraryMetadata.domain)
  return _impl_.domain_.Release();
}
inline void LibraryMetadata::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  _impl_.domain_.SetAllocated(domain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_.IsDefault()) {
    _impl_.domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.LibraryMetadata.domain)
}

// repeated string cell_names = 10;
inline int LibraryMetadata::_internal_cell_names_size() const {
  return _impl_.cell_names_.size();
}
inline int LibraryMetadata::cell_names_size() const {
  return _internal_cell_names_size();
}
inline void LibraryMetadata::clear_cell_names() {
  _impl_.cell_names_.Clear();
}
inline std::string* LibraryMetadata::add_cell_names() {
  std::string* _s = _internal_add_cell_names();
  // @@protoc_insertion_point(field_add_mutable:vlsir.utils.LibraryMetadata.cell_names)
  return _s;
}
inline const std::string& LibraryMetadata::_internal_cell_names(int index) const {
  return _impl_.cell_names_.Get(index);
}
inline const std::string& LibraryMetadata::cell_names(int index) const {
  // @@protoc_insertion_point(field_get:vlsir.utils.LibraryMetadata.cell_names)
  return _internal_cell_names(index);
}
inline std::string* LibraryMetadata::mutable_cell_names(int index) {
  // @@protoc_insertion_point(field_mutable:vlsir.utils.LibraryMetadata.cell_names)
  return _impl_.cell_names_.Mutable(index);
}
inline void LibraryMetadata::set_cell_names(int index, const std::string& value) {
  _impl_.cell_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:vlsir.utils.LibraryMetadata.cell_names)
}
inline void LibraryMetadata::set_cell_names(int index, std::string&& value) {
  _impl_.cell_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:vlsir.utils.LibraryMetadata.cell_names)
}
inline void LibraryMetadata::set_cell_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.cell_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vlsir.utils.LibraryMetadata.cell_names)
}
inline void LibraryMetadata::set_cell_names(int index, const char* value, size_t size) {
  _impl_.cell_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vlsir.utils.LibraryMetadata.cell_names)
}
inline std::string* LibraryMetadata::_internal_add_cell_names() {
  return _impl_.cell_names_.Add();
}
inline void LibraryMetadata::add_cell_names(const std::string& value) {
  _impl_.cell_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vlsir.utils.LibraryMetadata.cell_names)
}
inline void LibraryMetadata::add_cell_names(std::string&& value) {
  _impl_.cell_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vlsir.utils.LibraryMetadata.cell_names)
}
inline void LibraryMetadata::add_cell_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.cell_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vlsir.utils.LibraryMetadata.cell_names)
}
inline void LibraryMetadata::add_cell_names(const char* value, size_t size) {
  _impl_.cell_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vlsir.utils.LibraryMetadata.cell_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LibraryMetadata::cell_names() const {
  // @@protoc_insertion_point(field_list:vlsir.utils.LibraryMetadata.cell_names)
  return _impl_.cell_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LibraryMetadata::mutable_cell_names() {
  // @@protoc_insertion_point(field_mutable_list:vlsir.utils.LibraryMetadata.cell_names)
  return &_impl_.cell_names_;
}

// .vlsir.utils.AuthorMetadata author = 20;
inline bool LibraryMetadata::_internal_has_author() const {
  return this != internal_default_instance() && _impl_.author_ != nullptr;
}
inline bool LibraryMetadata::has_author() const {
  return _internal_has_author();
}
inline void LibraryMetadata::clear_author() {
  if (GetArenaForAllocation() == nullptr && _impl_.author_ != nullptr) {
    delete _impl_.author_;
  }
  _impl_.author_ = nullptr;
}
inline const ::vlsir::utils::AuthorMetadata& LibraryMetadata::_internal_author() const {
  const ::vlsir::utils::AuthorMetadata* p = _impl_.author_;
  return p != nullptr ? *p : reinterpret_cast<const ::vlsir::utils::AuthorMetadata&>(
      ::vlsir::utils::_AuthorMetadata_default_instance_);
}
inline const ::vlsir::utils::AuthorMetadata& LibraryMetadata::author() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.LibraryMetadata.author)
  return _internal_author();
}
inline void LibraryMetadata::unsafe_arena_set_allocated_author(
    ::vlsir::utils::AuthorMetadata* author) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.author_);
  }
  _impl_.author_ = author;
  if (author) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vlsir.utils.LibraryMetadata.author)
}
inline ::vlsir::utils::AuthorMetadata* LibraryMetadata::release_author() {
  
  ::vlsir::utils::AuthorMetadata* temp = _impl_.author_;
  _impl_.author_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vlsir::utils::AuthorMetadata* LibraryMetadata::unsafe_arena_release_author() {
  // @@protoc_insertion_point(field_release:vlsir.utils.LibraryMetadata.author)
  
  ::vlsir::utils::AuthorMetadata* temp = _impl_.author_;
  _impl_.author_ = nullptr;
  return temp;
}
inline ::vlsir::utils::AuthorMetadata* LibraryMetadata::_internal_mutable_author() {
  
  if (_impl_.author_ == nullptr) {
    auto* p = CreateMaybeMessage<::vlsir::utils::AuthorMetadata>(GetArenaForAllocation());
    _impl_.author_ = p;
  }
  return _impl_.author_;
}
inline ::vlsir::utils::AuthorMetadata* LibraryMetadata::mutable_author() {
  ::vlsir::utils::AuthorMetadata* _msg = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:vlsir.utils.LibraryMetadata.author)
  return _msg;
}
inline void LibraryMetadata::set_allocated_author(::vlsir::utils::AuthorMetadata* author) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.author_;
  }
  if (author) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(author);
    if (message_arena != submessage_arena) {
      author = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, author, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.author_ = author;
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.LibraryMetadata.author)
}

// -------------------------------------------------------------------

// AuthorMetadata

// string author = 1;
inline void AuthorMetadata::clear_author() {
  _impl_.author_.ClearToEmpty();
}
inline const std::string& AuthorMetadata::author() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.AuthorMetadata.author)
  return _internal_author();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthorMetadata::set_author(ArgT0&& arg0, ArgT... args) {
 
 _impl_.author_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vlsir.utils.AuthorMetadata.author)
}
inline std::string* AuthorMetadata::mutable_author() {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:vlsir.utils.AuthorMetadata.author)
  return _s;
}
inline const std::string& AuthorMetadata::_internal_author() const {
  return _impl_.author_.Get();
}
inline void AuthorMetadata::_internal_set_author(const std::string& value) {
  
  _impl_.author_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthorMetadata::_internal_mutable_author() {
  
  return _impl_.author_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthorMetadata::release_author() {
  // @@protoc_insertion_point(field_release:vlsir.utils.AuthorMetadata.author)
  return _impl_.author_.Release();
}
inline void AuthorMetadata::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    
  } else {
    
  }
  _impl_.author_.SetAllocated(author, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.author_.IsDefault()) {
    _impl_.author_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.AuthorMetadata.author)
}

// string copyright = 10;
inline void AuthorMetadata::clear_copyright() {
  _impl_.copyright_.ClearToEmpty();
}
inline const std::string& AuthorMetadata::copyright() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.AuthorMetadata.copyright)
  return _internal_copyright();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthorMetadata::set_copyright(ArgT0&& arg0, ArgT... args) {
 
 _impl_.copyright_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vlsir.utils.AuthorMetadata.copyright)
}
inline std::string* AuthorMetadata::mutable_copyright() {
  std::string* _s = _internal_mutable_copyright();
  // @@protoc_insertion_point(field_mutable:vlsir.utils.AuthorMetadata.copyright)
  return _s;
}
inline const std::string& AuthorMetadata::_internal_copyright() const {
  return _impl_.copyright_.Get();
}
inline void AuthorMetadata::_internal_set_copyright(const std::string& value) {
  
  _impl_.copyright_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthorMetadata::_internal_mutable_copyright() {
  
  return _impl_.copyright_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthorMetadata::release_copyright() {
  // @@protoc_insertion_point(field_release:vlsir.utils.AuthorMetadata.copyright)
  return _impl_.copyright_.Release();
}
inline void AuthorMetadata::set_allocated_copyright(std::string* copyright) {
  if (copyright != nullptr) {
    
  } else {
    
  }
  _impl_.copyright_.SetAllocated(copyright, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.copyright_.IsDefault()) {
    _impl_.copyright_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.AuthorMetadata.copyright)
}

// string license = 11;
inline void AuthorMetadata::clear_license() {
  _impl_.license_.ClearToEmpty();
}
inline const std::string& AuthorMetadata::license() const {
  // @@protoc_insertion_point(field_get:vlsir.utils.AuthorMetadata.license)
  return _internal_license();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthorMetadata::set_license(ArgT0&& arg0, ArgT... args) {
 
 _impl_.license_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vlsir.utils.AuthorMetadata.license)
}
inline std::string* AuthorMetadata::mutable_license() {
  std::string* _s = _internal_mutable_license();
  // @@protoc_insertion_point(field_mutable:vlsir.utils.AuthorMetadata.license)
  return _s;
}
inline const std::string& AuthorMetadata::_internal_license() const {
  return _impl_.license_.Get();
}
inline void AuthorMetadata::_internal_set_license(const std::string& value) {
  
  _impl_.license_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthorMetadata::_internal_mutable_license() {
  
  return _impl_.license_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthorMetadata::release_license() {
  // @@protoc_insertion_point(field_release:vlsir.utils.AuthorMetadata.license)
  return _impl_.license_.Release();
}
inline void AuthorMetadata::set_allocated_license(std::string* license) {
  if (license != nullptr) {
    
  } else {
    
  }
  _impl_.license_.SetAllocated(license, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.license_.IsDefault()) {
    _impl_.license_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.AuthorMetadata.license)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace utils
}  // namespace vlsir

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::vlsir::utils::SIPrefix> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vlsir::utils::SIPrefix>() {
  return ::vlsir::utils::SIPrefix_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_utils_2eproto
