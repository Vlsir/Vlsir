// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: utils.proto

#include "utils.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace vlsir {
namespace utils {
PROTOBUF_CONSTEXPR Prefixed::Prefixed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prefix_)*/0
  , /*decltype(_impl_.number_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PrefixedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrefixedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrefixedDefaultTypeInternal() {}
  union {
    Prefixed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrefixedDefaultTypeInternal _Prefixed_default_instance_;
PROTOBUF_CONSTEXPR ParamValue::ParamValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ParamValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParamValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParamValueDefaultTypeInternal() {}
  union {
    ParamValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParamValueDefaultTypeInternal _ParamValue_default_instance_;
PROTOBUF_CONSTEXPR Param::Param(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParamDefaultTypeInternal() {}
  union {
    Param _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParamDefaultTypeInternal _Param_default_instance_;
PROTOBUF_CONSTEXPR QualifiedName::QualifiedName(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.domain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QualifiedNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QualifiedNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QualifiedNameDefaultTypeInternal() {}
  union {
    QualifiedName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QualifiedNameDefaultTypeInternal _QualifiedName_default_instance_;
PROTOBUF_CONSTEXPR Reference::Reference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.to_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReferenceDefaultTypeInternal() {}
  union {
    Reference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReferenceDefaultTypeInternal _Reference_default_instance_;
PROTOBUF_CONSTEXPR LibraryMetadata::LibraryMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_names_)*/{}
  , /*decltype(_impl_.domain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.author_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LibraryMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LibraryMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LibraryMetadataDefaultTypeInternal() {}
  union {
    LibraryMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LibraryMetadataDefaultTypeInternal _LibraryMetadata_default_instance_;
PROTOBUF_CONSTEXPR AuthorMetadata::AuthorMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.author_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.copyright_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.license_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AuthorMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthorMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthorMetadataDefaultTypeInternal() {}
  union {
    AuthorMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthorMetadataDefaultTypeInternal _AuthorMetadata_default_instance_;
}  // namespace utils
}  // namespace vlsir
static ::_pb::Metadata file_level_metadata_utils_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_utils_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_utils_2eproto = nullptr;

const uint32_t TableStruct_utils_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::utils::Prefixed, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vlsir::utils::Prefixed, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::utils::Prefixed, _impl_.prefix_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vlsir::utils::Prefixed, _impl_.number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::utils::ParamValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vlsir::utils::ParamValue, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vlsir::utils::ParamValue, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::utils::Param, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::utils::Param, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::vlsir::utils::Param, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::vlsir::utils::Param, _impl_.desc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::utils::QualifiedName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::utils::QualifiedName, _impl_.domain_),
  PROTOBUF_FIELD_OFFSET(::vlsir::utils::QualifiedName, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::utils::Reference, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vlsir::utils::Reference, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vlsir::utils::Reference, _impl_.to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::utils::LibraryMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::utils::LibraryMetadata, _impl_.domain_),
  PROTOBUF_FIELD_OFFSET(::vlsir::utils::LibraryMetadata, _impl_.cell_names_),
  PROTOBUF_FIELD_OFFSET(::vlsir::utils::LibraryMetadata, _impl_.author_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlsir::utils::AuthorMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vlsir::utils::AuthorMetadata, _impl_.author_),
  PROTOBUF_FIELD_OFFSET(::vlsir::utils::AuthorMetadata, _impl_.copyright_),
  PROTOBUF_FIELD_OFFSET(::vlsir::utils::AuthorMetadata, _impl_.license_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::vlsir::utils::Prefixed)},
  { 11, -1, -1, sizeof(::vlsir::utils::ParamValue)},
  { 24, -1, -1, sizeof(::vlsir::utils::Param)},
  { 33, -1, -1, sizeof(::vlsir::utils::QualifiedName)},
  { 41, -1, -1, sizeof(::vlsir::utils::Reference)},
  { 50, -1, -1, sizeof(::vlsir::utils::LibraryMetadata)},
  { 59, -1, -1, sizeof(::vlsir::utils::AuthorMetadata)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::vlsir::utils::_Prefixed_default_instance_._instance,
  &::vlsir::utils::_ParamValue_default_instance_._instance,
  &::vlsir::utils::_Param_default_instance_._instance,
  &::vlsir::utils::_QualifiedName_default_instance_._instance,
  &::vlsir::utils::_Reference_default_instance_._instance,
  &::vlsir::utils::_LibraryMetadata_default_instance_._instance,
  &::vlsir::utils::_AuthorMetadata_default_instance_._instance,
};

const char descriptor_table_protodef_utils_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013utils.proto\022\013vlsir.utils\"\202\001\n\010Prefixed\022"
  "%\n\006prefix\030\001 \001(\0162\025.vlsir.utils.SIPrefix\022\025"
  "\n\013int64_value\030\002 \001(\003H\000\022\026\n\014double_value\030\003 "
  "\001(\001H\000\022\026\n\014string_value\030\004 \001(\tH\000B\010\n\006number\""
  "\260\001\n\nParamValue\022\024\n\nbool_value\030\001 \001(\010H\000\022\025\n\013"
  "int64_value\030\002 \001(\003H\000\022\026\n\014double_value\030\003 \001("
  "\001H\000\022\026\n\014string_value\030\004 \001(\tH\000\022\021\n\007literal\030\005"
  " \001(\tH\000\022)\n\010prefixed\030\006 \001(\0132\025.vlsir.utils.P"
  "refixedH\000B\007\n\005value\"K\n\005Param\022\014\n\004name\030\001 \001("
  "\t\022&\n\005value\030\002 \001(\0132\027.vlsir.utils.ParamValu"
  "e\022\014\n\004desc\030\003 \001(\t\"-\n\rQualifiedName\022\016\n\006doma"
  "in\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\"R\n\tReference\022\017\n\005l"
  "ocal\030\001 \001(\tH\000\022.\n\010external\030\002 \001(\0132\032.vlsir.u"
  "tils.QualifiedNameH\000B\004\n\002to\"b\n\017LibraryMet"
  "adata\022\016\n\006domain\030\001 \001(\t\022\022\n\ncell_names\030\n \003("
  "\t\022+\n\006author\030\024 \001(\0132\033.vlsir.utils.AuthorMe"
  "tadata\"D\n\016AuthorMetadata\022\016\n\006author\030\001 \001(\t"
  "\022\021\n\tcopyright\030\n \001(\t\022\017\n\007license\030\013 \001(\t*\344\001\n"
  "\010SIPrefix\022\t\n\005YOCTO\020\000\022\t\n\005ZEPTO\020\001\022\010\n\004ATTO\020"
  "\002\022\t\n\005FEMTO\020\003\022\010\n\004PICO\020\004\022\010\n\004NANO\020\005\022\t\n\005MICR"
  "O\020\006\022\t\n\005MILLI\020\007\022\t\n\005CENTI\020\010\022\010\n\004DECI\020\t\022\010\n\004D"
  "ECA\020\n\022\t\n\005HECTO\020\013\022\010\n\004KILO\020\014\022\010\n\004MEGA\020\r\022\010\n\004"
  "GIGA\020\016\022\010\n\004TERA\020\017\022\010\n\004PETA\020\020\022\007\n\003EXA\020\021\022\t\n\005Z"
  "ETTA\020\022\022\t\n\005YOTTA\020\023\022\010\n\004UNIT\020\024b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_utils_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_utils_2eproto = {
    false, false, 955, descriptor_table_protodef_utils_2eproto,
    "utils.proto",
    &descriptor_table_utils_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_utils_2eproto::offsets,
    file_level_metadata_utils_2eproto, file_level_enum_descriptors_utils_2eproto,
    file_level_service_descriptors_utils_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_utils_2eproto_getter() {
  return &descriptor_table_utils_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_utils_2eproto(&descriptor_table_utils_2eproto);
namespace vlsir {
namespace utils {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SIPrefix_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_utils_2eproto);
  return file_level_enum_descriptors_utils_2eproto[0];
}
bool SIPrefix_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Prefixed::_Internal {
 public:
};

Prefixed::Prefixed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.utils.Prefixed)
}
Prefixed::Prefixed(const Prefixed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Prefixed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prefix_){}
    , decltype(_impl_.number_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.prefix_ = from._impl_.prefix_;
  clear_has_number();
  switch (from.number_case()) {
    case kInt64Value: {
      _this->_internal_set_int64_value(from._internal_int64_value());
      break;
    }
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case kStringValue: {
      _this->_internal_set_string_value(from._internal_string_value());
      break;
    }
    case NUMBER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.utils.Prefixed)
}

inline void Prefixed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prefix_){0}
    , decltype(_impl_.number_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_number();
}

Prefixed::~Prefixed() {
  // @@protoc_insertion_point(destructor:vlsir.utils.Prefixed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Prefixed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_number()) {
    clear_number();
  }
}

void Prefixed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Prefixed::clear_number() {
// @@protoc_insertion_point(one_of_clear_start:vlsir.utils.Prefixed)
  switch (number_case()) {
    case kInt64Value: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      _impl_.number_.string_value_.Destroy();
      break;
    }
    case NUMBER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NUMBER_NOT_SET;
}


void Prefixed::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.utils.Prefixed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prefix_ = 0;
  clear_number();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Prefixed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vlsir.utils.SIPrefix prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_prefix(static_cast<::vlsir::utils::SIPrefix>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 int64_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double double_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string string_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.utils.Prefixed.string_value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Prefixed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.utils.Prefixed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vlsir.utils.SIPrefix prefix = 1;
  if (this->_internal_prefix() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_prefix(), target);
  }

  // int64 int64_value = 2;
  if (_internal_has_int64_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_int64_value(), target);
  }

  // double double_value = 3;
  if (_internal_has_double_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_double_value(), target);
  }

  // string string_value = 4;
  if (_internal_has_string_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.utils.Prefixed.string_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_string_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.utils.Prefixed)
  return target;
}

size_t Prefixed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.utils.Prefixed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vlsir.utils.SIPrefix prefix = 1;
  if (this->_internal_prefix() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_prefix());
  }

  switch (number_case()) {
    // int64 int64_value = 2;
    case kInt64Value: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_int64_value());
      break;
    }
    // double double_value = 3;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // string string_value = 4;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    case NUMBER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Prefixed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Prefixed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Prefixed::GetClassData() const { return &_class_data_; }


void Prefixed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Prefixed*>(&to_msg);
  auto& from = static_cast<const Prefixed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.utils.Prefixed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_prefix() != 0) {
    _this->_internal_set_prefix(from._internal_prefix());
  }
  switch (from.number_case()) {
    case kInt64Value: {
      _this->_internal_set_int64_value(from._internal_int64_value());
      break;
    }
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case kStringValue: {
      _this->_internal_set_string_value(from._internal_string_value());
      break;
    }
    case NUMBER_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Prefixed::CopyFrom(const Prefixed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.utils.Prefixed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prefixed::IsInitialized() const {
  return true;
}

void Prefixed::InternalSwap(Prefixed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.prefix_, other->_impl_.prefix_);
  swap(_impl_.number_, other->_impl_.number_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Prefixed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_utils_2eproto_getter, &descriptor_table_utils_2eproto_once,
      file_level_metadata_utils_2eproto[0]);
}

// ===================================================================

class ParamValue::_Internal {
 public:
  static const ::vlsir::utils::Prefixed& prefixed(const ParamValue* msg);
};

const ::vlsir::utils::Prefixed&
ParamValue::_Internal::prefixed(const ParamValue* msg) {
  return *msg->_impl_.value_.prefixed_;
}
void ParamValue::set_allocated_prefixed(::vlsir::utils::Prefixed* prefixed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (prefixed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(prefixed);
    if (message_arena != submessage_arena) {
      prefixed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefixed, submessage_arena);
    }
    set_has_prefixed();
    _impl_.value_.prefixed_ = prefixed;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.ParamValue.prefixed)
}
ParamValue::ParamValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.utils.ParamValue)
}
ParamValue::ParamValue(const ParamValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParamValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kBoolValue: {
      _this->_internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kInt64Value: {
      _this->_internal_set_int64_value(from._internal_int64_value());
      break;
    }
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case kStringValue: {
      _this->_internal_set_string_value(from._internal_string_value());
      break;
    }
    case kLiteral: {
      _this->_internal_set_literal(from._internal_literal());
      break;
    }
    case kPrefixed: {
      _this->_internal_mutable_prefixed()->::vlsir::utils::Prefixed::MergeFrom(
          from._internal_prefixed());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.utils.ParamValue)
}

inline void ParamValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_value();
}

ParamValue::~ParamValue() {
  // @@protoc_insertion_point(destructor:vlsir.utils.ParamValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParamValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void ParamValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParamValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:vlsir.utils.ParamValue)
  switch (value_case()) {
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kInt64Value: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      _impl_.value_.string_value_.Destroy();
      break;
    }
    case kLiteral: {
      _impl_.value_.literal_.Destroy();
      break;
    }
    case kPrefixed: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.prefixed_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void ParamValue::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.utils.ParamValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParamValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool bool_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 int64_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double double_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string string_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.utils.ParamValue.string_value"));
        } else
          goto handle_unusual;
        continue;
      // string literal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_literal();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.utils.ParamValue.literal"));
        } else
          goto handle_unusual;
        continue;
      // .vlsir.utils.Prefixed prefixed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefixed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParamValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.utils.ParamValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bool_value = 1;
  if (_internal_has_bool_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_bool_value(), target);
  }

  // int64 int64_value = 2;
  if (_internal_has_int64_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_int64_value(), target);
  }

  // double double_value = 3;
  if (_internal_has_double_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_double_value(), target);
  }

  // string string_value = 4;
  if (_internal_has_string_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.utils.ParamValue.string_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_string_value(), target);
  }

  // string literal = 5;
  if (_internal_has_literal()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_literal().data(), static_cast<int>(this->_internal_literal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.utils.ParamValue.literal");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_literal(), target);
  }

  // .vlsir.utils.Prefixed prefixed = 6;
  if (_internal_has_prefixed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::prefixed(this),
        _Internal::prefixed(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.utils.ParamValue)
  return target;
}

size_t ParamValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.utils.ParamValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // bool bool_value = 1;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // int64 int64_value = 2;
    case kInt64Value: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_int64_value());
      break;
    }
    // double double_value = 3;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // string string_value = 4;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    // string literal = 5;
    case kLiteral: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_literal());
      break;
    }
    // .vlsir.utils.Prefixed prefixed = 6;
    case kPrefixed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.prefixed_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParamValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParamValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParamValue::GetClassData() const { return &_class_data_; }


void ParamValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParamValue*>(&to_msg);
  auto& from = static_cast<const ParamValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.utils.ParamValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kBoolValue: {
      _this->_internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kInt64Value: {
      _this->_internal_set_int64_value(from._internal_int64_value());
      break;
    }
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case kStringValue: {
      _this->_internal_set_string_value(from._internal_string_value());
      break;
    }
    case kLiteral: {
      _this->_internal_set_literal(from._internal_literal());
      break;
    }
    case kPrefixed: {
      _this->_internal_mutable_prefixed()->::vlsir::utils::Prefixed::MergeFrom(
          from._internal_prefixed());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParamValue::CopyFrom(const ParamValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.utils.ParamValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamValue::IsInitialized() const {
  return true;
}

void ParamValue::InternalSwap(ParamValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParamValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_utils_2eproto_getter, &descriptor_table_utils_2eproto_once,
      file_level_metadata_utils_2eproto[1]);
}

// ===================================================================

class Param::_Internal {
 public:
  static const ::vlsir::utils::ParamValue& value(const Param* msg);
};

const ::vlsir::utils::ParamValue&
Param::_Internal::value(const Param* msg) {
  return *msg->_impl_.value_;
}
Param::Param(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.utils.Param)
}
Param::Param(const Param& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Param* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    _this->_impl_.desc_.Set(from._internal_desc(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::vlsir::utils::ParamValue(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.utils.Param)
}

inline void Param::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Param::~Param() {
  // @@protoc_insertion_point(destructor:vlsir.utils.Param)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Param::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.desc_.Destroy();
  if (this != internal_default_instance()) delete _impl_.value_;
}

void Param::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Param::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.utils.Param)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.desc_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Param::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.utils.Param.name"));
        } else
          goto handle_unusual;
        continue;
      // .vlsir.utils.ParamValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.utils.Param.desc"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Param::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.utils.Param)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.utils.Param.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .vlsir.utils.ParamValue value = 2;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // string desc = 3;
  if (!this->_internal_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.utils.Param.desc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.utils.Param)
  return target;
}

size_t Param::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.utils.Param)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string desc = 3;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // .vlsir.utils.ParamValue value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Param::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Param::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Param::GetClassData() const { return &_class_data_; }


void Param::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Param*>(&to_msg);
  auto& from = static_cast<const Param&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.utils.Param)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_desc().empty()) {
    _this->_internal_set_desc(from._internal_desc());
  }
  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::vlsir::utils::ParamValue::MergeFrom(
        from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Param::CopyFrom(const Param& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.utils.Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Param::IsInitialized() const {
  return true;
}

void Param::InternalSwap(Param* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_, lhs_arena,
      &other->_impl_.desc_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Param::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_utils_2eproto_getter, &descriptor_table_utils_2eproto_once,
      file_level_metadata_utils_2eproto[2]);
}

// ===================================================================

class QualifiedName::_Internal {
 public:
};

QualifiedName::QualifiedName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.utils.QualifiedName)
}
QualifiedName::QualifiedName(const QualifiedName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QualifiedName* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.domain_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_domain().empty()) {
    _this->_impl_.domain_.Set(from._internal_domain(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.utils.QualifiedName)
}

inline void QualifiedName::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.domain_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QualifiedName::~QualifiedName() {
  // @@protoc_insertion_point(destructor:vlsir.utils.QualifiedName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QualifiedName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.domain_.Destroy();
  _impl_.name_.Destroy();
}

void QualifiedName::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QualifiedName::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.utils.QualifiedName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.domain_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QualifiedName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string domain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.utils.QualifiedName.domain"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.utils.QualifiedName.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QualifiedName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.utils.QualifiedName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string domain = 1;
  if (!this->_internal_domain().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.utils.QualifiedName.domain");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_domain(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.utils.QualifiedName.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.utils.QualifiedName)
  return target;
}

size_t QualifiedName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.utils.QualifiedName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string domain = 1;
  if (!this->_internal_domain().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domain());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QualifiedName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QualifiedName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QualifiedName::GetClassData() const { return &_class_data_; }


void QualifiedName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QualifiedName*>(&to_msg);
  auto& from = static_cast<const QualifiedName&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.utils.QualifiedName)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_domain().empty()) {
    _this->_internal_set_domain(from._internal_domain());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QualifiedName::CopyFrom(const QualifiedName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.utils.QualifiedName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QualifiedName::IsInitialized() const {
  return true;
}

void QualifiedName::InternalSwap(QualifiedName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.domain_, lhs_arena,
      &other->_impl_.domain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata QualifiedName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_utils_2eproto_getter, &descriptor_table_utils_2eproto_once,
      file_level_metadata_utils_2eproto[3]);
}

// ===================================================================

class Reference::_Internal {
 public:
  static const ::vlsir::utils::QualifiedName& external(const Reference* msg);
};

const ::vlsir::utils::QualifiedName&
Reference::_Internal::external(const Reference* msg) {
  return *msg->_impl_.to_.external_;
}
void Reference::set_allocated_external(::vlsir::utils::QualifiedName* external) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_to();
  if (external) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(external);
    if (message_arena != submessage_arena) {
      external = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, external, submessage_arena);
    }
    set_has_external();
    _impl_.to_.external_ = external;
  }
  // @@protoc_insertion_point(field_set_allocated:vlsir.utils.Reference.external)
}
Reference::Reference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.utils.Reference)
}
Reference::Reference(const Reference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Reference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.to_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_to();
  switch (from.to_case()) {
    case kLocal: {
      _this->_internal_set_local(from._internal_local());
      break;
    }
    case kExternal: {
      _this->_internal_mutable_external()->::vlsir::utils::QualifiedName::MergeFrom(
          from._internal_external());
      break;
    }
    case TO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.utils.Reference)
}

inline void Reference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.to_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_to();
}

Reference::~Reference() {
  // @@protoc_insertion_point(destructor:vlsir.utils.Reference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Reference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_to()) {
    clear_to();
  }
}

void Reference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Reference::clear_to() {
// @@protoc_insertion_point(one_of_clear_start:vlsir.utils.Reference)
  switch (to_case()) {
    case kLocal: {
      _impl_.to_.local_.Destroy();
      break;
    }
    case kExternal: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.to_.external_;
      }
      break;
    }
    case TO_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TO_NOT_SET;
}


void Reference::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.utils.Reference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_to();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Reference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string local = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_local();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.utils.Reference.local"));
        } else
          goto handle_unusual;
        continue;
      // .vlsir.utils.QualifiedName external = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_external(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Reference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.utils.Reference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string local = 1;
  if (_internal_has_local()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local().data(), static_cast<int>(this->_internal_local().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.utils.Reference.local");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_local(), target);
  }

  // .vlsir.utils.QualifiedName external = 2;
  if (_internal_has_external()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::external(this),
        _Internal::external(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.utils.Reference)
  return target;
}

size_t Reference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.utils.Reference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (to_case()) {
    // string local = 1;
    case kLocal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_local());
      break;
    }
    // .vlsir.utils.QualifiedName external = 2;
    case kExternal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.to_.external_);
      break;
    }
    case TO_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Reference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Reference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Reference::GetClassData() const { return &_class_data_; }


void Reference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Reference*>(&to_msg);
  auto& from = static_cast<const Reference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.utils.Reference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.to_case()) {
    case kLocal: {
      _this->_internal_set_local(from._internal_local());
      break;
    }
    case kExternal: {
      _this->_internal_mutable_external()->::vlsir::utils::QualifiedName::MergeFrom(
          from._internal_external());
      break;
    }
    case TO_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Reference::CopyFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.utils.Reference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reference::IsInitialized() const {
  return true;
}

void Reference::InternalSwap(Reference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.to_, other->_impl_.to_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Reference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_utils_2eproto_getter, &descriptor_table_utils_2eproto_once,
      file_level_metadata_utils_2eproto[4]);
}

// ===================================================================

class LibraryMetadata::_Internal {
 public:
  static const ::vlsir::utils::AuthorMetadata& author(const LibraryMetadata* msg);
};

const ::vlsir::utils::AuthorMetadata&
LibraryMetadata::_Internal::author(const LibraryMetadata* msg) {
  return *msg->_impl_.author_;
}
LibraryMetadata::LibraryMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.utils.LibraryMetadata)
}
LibraryMetadata::LibraryMetadata(const LibraryMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LibraryMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_names_){from._impl_.cell_names_}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.author_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_domain().empty()) {
    _this->_impl_.domain_.Set(from._internal_domain(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_author()) {
    _this->_impl_.author_ = new ::vlsir::utils::AuthorMetadata(*from._impl_.author_);
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.utils.LibraryMetadata)
}

inline void LibraryMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_names_){arena}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.author_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LibraryMetadata::~LibraryMetadata() {
  // @@protoc_insertion_point(destructor:vlsir.utils.LibraryMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LibraryMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cell_names_.~RepeatedPtrField();
  _impl_.domain_.Destroy();
  if (this != internal_default_instance()) delete _impl_.author_;
}

void LibraryMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LibraryMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.utils.LibraryMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cell_names_.Clear();
  _impl_.domain_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.author_ != nullptr) {
    delete _impl_.author_;
  }
  _impl_.author_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LibraryMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string domain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.utils.LibraryMetadata.domain"));
        } else
          goto handle_unusual;
        continue;
      // repeated string cell_names = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cell_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "vlsir.utils.LibraryMetadata.cell_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .vlsir.utils.AuthorMetadata author = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_author(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LibraryMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.utils.LibraryMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string domain = 1;
  if (!this->_internal_domain().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.utils.LibraryMetadata.domain");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_domain(), target);
  }

  // repeated string cell_names = 10;
  for (int i = 0, n = this->_internal_cell_names_size(); i < n; i++) {
    const auto& s = this->_internal_cell_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.utils.LibraryMetadata.cell_names");
    target = stream->WriteString(10, s, target);
  }

  // .vlsir.utils.AuthorMetadata author = 20;
  if (this->_internal_has_author()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::author(this),
        _Internal::author(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.utils.LibraryMetadata)
  return target;
}

size_t LibraryMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.utils.LibraryMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cell_names = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.cell_names_.size());
  for (int i = 0, n = _impl_.cell_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.cell_names_.Get(i));
  }

  // string domain = 1;
  if (!this->_internal_domain().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domain());
  }

  // .vlsir.utils.AuthorMetadata author = 20;
  if (this->_internal_has_author()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.author_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LibraryMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LibraryMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LibraryMetadata::GetClassData() const { return &_class_data_; }


void LibraryMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LibraryMetadata*>(&to_msg);
  auto& from = static_cast<const LibraryMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.utils.LibraryMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cell_names_.MergeFrom(from._impl_.cell_names_);
  if (!from._internal_domain().empty()) {
    _this->_internal_set_domain(from._internal_domain());
  }
  if (from._internal_has_author()) {
    _this->_internal_mutable_author()->::vlsir::utils::AuthorMetadata::MergeFrom(
        from._internal_author());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LibraryMetadata::CopyFrom(const LibraryMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.utils.LibraryMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LibraryMetadata::IsInitialized() const {
  return true;
}

void LibraryMetadata::InternalSwap(LibraryMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cell_names_.InternalSwap(&other->_impl_.cell_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.domain_, lhs_arena,
      &other->_impl_.domain_, rhs_arena
  );
  swap(_impl_.author_, other->_impl_.author_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LibraryMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_utils_2eproto_getter, &descriptor_table_utils_2eproto_once,
      file_level_metadata_utils_2eproto[5]);
}

// ===================================================================

class AuthorMetadata::_Internal {
 public:
};

AuthorMetadata::AuthorMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vlsir.utils.AuthorMetadata)
}
AuthorMetadata::AuthorMetadata(const AuthorMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AuthorMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.author_){}
    , decltype(_impl_.copyright_){}
    , decltype(_impl_.license_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.author_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.author_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_author().empty()) {
    _this->_impl_.author_.Set(from._internal_author(), 
      _this->GetArenaForAllocation());
  }
  _impl_.copyright_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.copyright_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_copyright().empty()) {
    _this->_impl_.copyright_.Set(from._internal_copyright(), 
      _this->GetArenaForAllocation());
  }
  _impl_.license_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.license_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_license().empty()) {
    _this->_impl_.license_.Set(from._internal_license(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:vlsir.utils.AuthorMetadata)
}

inline void AuthorMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.author_){}
    , decltype(_impl_.copyright_){}
    , decltype(_impl_.license_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.author_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.author_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.copyright_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.copyright_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.license_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.license_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthorMetadata::~AuthorMetadata() {
  // @@protoc_insertion_point(destructor:vlsir.utils.AuthorMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthorMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.author_.Destroy();
  _impl_.copyright_.Destroy();
  _impl_.license_.Destroy();
}

void AuthorMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuthorMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:vlsir.utils.AuthorMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.author_.ClearToEmpty();
  _impl_.copyright_.ClearToEmpty();
  _impl_.license_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthorMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string author = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_author();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.utils.AuthorMetadata.author"));
        } else
          goto handle_unusual;
        continue;
      // string copyright = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_copyright();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.utils.AuthorMetadata.copyright"));
        } else
          goto handle_unusual;
        continue;
      // string license = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_license();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vlsir.utils.AuthorMetadata.license"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthorMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlsir.utils.AuthorMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string author = 1;
  if (!this->_internal_author().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_author().data(), static_cast<int>(this->_internal_author().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.utils.AuthorMetadata.author");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_author(), target);
  }

  // string copyright = 10;
  if (!this->_internal_copyright().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_copyright().data(), static_cast<int>(this->_internal_copyright().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.utils.AuthorMetadata.copyright");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_copyright(), target);
  }

  // string license = 11;
  if (!this->_internal_license().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_license().data(), static_cast<int>(this->_internal_license().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vlsir.utils.AuthorMetadata.license");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_license(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlsir.utils.AuthorMetadata)
  return target;
}

size_t AuthorMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlsir.utils.AuthorMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string author = 1;
  if (!this->_internal_author().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_author());
  }

  // string copyright = 10;
  if (!this->_internal_copyright().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_copyright());
  }

  // string license = 11;
  if (!this->_internal_license().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_license());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthorMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuthorMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthorMetadata::GetClassData() const { return &_class_data_; }


void AuthorMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuthorMetadata*>(&to_msg);
  auto& from = static_cast<const AuthorMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vlsir.utils.AuthorMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_author().empty()) {
    _this->_internal_set_author(from._internal_author());
  }
  if (!from._internal_copyright().empty()) {
    _this->_internal_set_copyright(from._internal_copyright());
  }
  if (!from._internal_license().empty()) {
    _this->_internal_set_license(from._internal_license());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthorMetadata::CopyFrom(const AuthorMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlsir.utils.AuthorMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthorMetadata::IsInitialized() const {
  return true;
}

void AuthorMetadata::InternalSwap(AuthorMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.author_, lhs_arena,
      &other->_impl_.author_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.copyright_, lhs_arena,
      &other->_impl_.copyright_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.license_, lhs_arena,
      &other->_impl_.license_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthorMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_utils_2eproto_getter, &descriptor_table_utils_2eproto_once,
      file_level_metadata_utils_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace utils
}  // namespace vlsir
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vlsir::utils::Prefixed*
Arena::CreateMaybeMessage< ::vlsir::utils::Prefixed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::utils::Prefixed >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::utils::ParamValue*
Arena::CreateMaybeMessage< ::vlsir::utils::ParamValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::utils::ParamValue >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::utils::Param*
Arena::CreateMaybeMessage< ::vlsir::utils::Param >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::utils::Param >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::utils::QualifiedName*
Arena::CreateMaybeMessage< ::vlsir::utils::QualifiedName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::utils::QualifiedName >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::utils::Reference*
Arena::CreateMaybeMessage< ::vlsir::utils::Reference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::utils::Reference >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::utils::LibraryMetadata*
Arena::CreateMaybeMessage< ::vlsir::utils::LibraryMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::utils::LibraryMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::vlsir::utils::AuthorMetadata*
Arena::CreateMaybeMessage< ::vlsir::utils::AuthorMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlsir::utils::AuthorMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
